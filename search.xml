<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ATX2入门进阶应用</title>
    <url>/2019/08/22/ATX2%E5%85%A5%E9%97%A8%E8%BF%9B%E9%98%B6%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<p>[TOC]</p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前面我们已经搭建好了ATX2平台来管理iOS设备，搭建博文参考:ATX2 iOS设备管理平台搭建 接下来分享一下该平台的入门进阶使用(还是基于iOS设备)。</p>
<h1 id="ATX2入门操作"><a href="#ATX2入门操作" class="headerlink" title="ATX2入门操作"></a>ATX2入门操作</h1><ul>
<li>打开登录地址：<a href="http://172.28.xx.xx:4000/login">http://172.28.xx.xx:4000/login</a> 输入用户名登录ATX平台。</li>
<li>登录之后进入ATX2界面，在对应的设备点击<code>点击使用</code>则可以远程操作设备。</li>
<li>如下图所示，点击使用之后可以使用鼠标进行设备远程操作控制。<br><img src="/.kim//atx2_iOS_action.gif" alt="示例图"></li>
</ul>
<blockquote>
<p>注意： iOS的弹窗不能通过屏幕点击来选择，需要在常用功能中点击“选择弹窗按钮”来进行操作</p>
</blockquote>
<h1 id="ATX2-API"><a href="#ATX2-API" class="headerlink" title="ATX2 API"></a>ATX2 API</h1><p>ATX2提供了API可以进行调用，可以方便我们在自动化测试过程中进行调用。<br>API文档地址：<a href="https://github.com/openatx/atxserver2/blob/master/API.md">https://github.com/openatx/atxserver2/blob/master/API.md</a></p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="token获取"><a href="#token获取" class="headerlink" title="token获取"></a>token获取</h3><p>ATX2所有的接口采用<code>token</code>认证，<code>token</code>可以在<a href="http://172.28.xx.xx:4000/user%E9%A1%B5%E9%9D%A2%E8%8E%B7%E5%8F%96%E5%88%B0">http://172.28.xx.xx:4000/user页面获取到</a><br>也可以点击右上角用户名-&gt;用户信息获取，如下图所示:<br><img src="/.kim//token.png" alt="示例图"></p>
<h3 id="获取设备的udid"><a href="#获取设备的udid" class="headerlink" title="获取设备的udid"></a>获取设备的udid</h3><p>设备列表界面中的设备编号即为设备的<code>udid</code>，可以使用<code>libimobiledevice</code>命令获取设备的udid,命令如下：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">idevice_id</span> -l  <span class="comment"># 显示当前所连接的设备[udid]，包括 usb、WiFi 连接</span></span><br><span class="line">c06e788b2d8dc60004a7015ce5dad782</span><br></pre></td></tr></table></figure>
<h2 id="API封装"><a href="#API封装" class="headerlink" title="API封装"></a>API封装</h2><p>为了更好的调用API,我们可以进行封装方法，便于后续的调用。首先如下所示，我们定义一个类<code>AtxiOS</code> 这个类进行远程调用设备的初始化操作，如atx地址和token的初始化。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json,logging</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urljoin</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pprint</span><br><span class="line"></span><br><span class="line">logging.basicConfig(level=logging.INFO,</span><br><span class="line">                    <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s %(filename)s[line:%(lineno)d]%(levelname)s%(message)s&#x27;</span>)</span><br><span class="line"></span><br><span class="line">DEVICES_URL = <span class="string">&#x27;/api/v1/devices&#x27;</span> <span class="comment">#获取全部设备信息</span></span><br><span class="line">USER_DEVICES_URL = <span class="string">&#x27;/api/v1/user/devices&#x27;</span>  <span class="comment">#获取单台设备信息</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AtxiOS</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    封装ATX2接口用于设备远程操作</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">       <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, atx_url, token</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        初始化操作</span></span><br><span class="line"><span class="string">        :param atx_url: atx的url地址</span></span><br><span class="line"><span class="string">        :param token: 账户的token</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        self.atx_url = atx_url</span><br><span class="line">        self.token = token</span><br><span class="line">        self.session = requests.Session()</span><br><span class="line">        self.headers = <span class="built_in">dict</span>(Authorization=<span class="string">&quot;Bearer &#123;&#125;&quot;</span>.<span class="built_in">format</span>(self.token))</span><br><span class="line">        self.apply_devices = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_get_response</span>(<span class="params">self, url, method=<span class="string">&quot;GET&quot;</span>, headers=<span class="literal">None</span>, data=<span class="literal">None</span></span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        获取API响应结果</span></span><br><span class="line"><span class="string">        :param url:返回的url地址</span></span><br><span class="line"><span class="string">        :param method:请求方法</span></span><br><span class="line"><span class="string">        :param headers:响应header内容</span></span><br><span class="line"><span class="string">        :param data:响应的data内容</span></span><br><span class="line"><span class="string">        :return: 返回响应信息</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> headers:</span><br><span class="line">            headers = self.headers</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            response = self.session.request(method, url, headers=headers, data=data, timeout=<span class="number">20</span>)</span><br><span class="line">            info = response.json()</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> error:</span><br><span class="line">            logging.error(<span class="string">&#x27;网址：&#123;&#125;请求失败。&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(url, error))</span><br><span class="line">            info = &#123;<span class="string">&#x27;success&#x27;</span>: <span class="literal">False</span>, <span class="string">&#x27;description&#x27;</span>: <span class="string">&#x27;Bad request url: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(url)&#125;</span><br><span class="line">        <span class="keyword">return</span> info</span><br></pre></td></tr></table></figure>

<h2 id="获取所有iOS设备信息"><a href="#获取所有iOS设备信息" class="headerlink" title="获取所有iOS设备信息"></a>获取所有iOS设备信息</h2><p>在上面的<code>AtxiOS</code>类中定义如下方法用于获取所有iOS设备信息。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_all_iOS_devices</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    获取所有iOS设备</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    url = urljoin(self.atx_url, DEVICES_URL)</span><br><span class="line">    info = self._get_response(url=url)</span><br><span class="line">    pprint(info)</span><br><span class="line">    <span class="keyword">return</span> info</span><br></pre></td></tr></table></figure>
<p>然后调用定义好的方法</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ATX_URL</span> =&#x27;http://<span class="number">172</span>.<span class="number">28</span>.xx.xx:<span class="number">4000</span>&#x27;</span><br><span class="line"><span class="attribute">Token</span>=&#x27;xxxxxxxxx&#x27;</span><br><span class="line"><span class="attribute">udid</span>=&#x27;<span class="number">2</span>cced<span class="number">5</span>ac<span class="number">6</span>ad<span class="number">06</span>c<span class="number">35</span>e<span class="number">067460</span>dad<span class="number">5</span>ff<span class="number">417</span>f<span class="number">264</span>b<span class="number">8</span>ae&#x27;  #iphone<span class="number">7</span></span><br><span class="line"> </span><br><span class="line"><span class="attribute">atx</span>=AtxiOS(ATX_URL,Token)</span><br><span class="line"><span class="attribute">atx</span>.get_all_iOS_devices() #获取所有设备信息</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>调用之后返回结果如下：</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">&#123;&#x27;count&#x27;: <span class="number">4</span>,</span><br><span class="line"> &#x27;devices&#x27;: [&#123;&#x27;colding&#x27;: False,</span><br><span class="line">              &#x27;createdAt&#x27;: &#x27;<span class="number">2019-06-11</span>T16:57:17.<span class="number">371000</span>&#x27;,</span><br><span class="line">              &#x27;owner&#x27;: &#x27;&#x27;,</span><br><span class="line">              &#x27;platform&#x27;: &#x27;apple&#x27;,</span><br><span class="line">              &#x27;present&#x27;: False,</span><br><span class="line">              &#x27;properties&#x27;: &#123;&#x27;brand&#x27;: &#x27;Apple&#x27;,</span><br><span class="line">                             &#x27;name&#x27;: &#x27;&#x27;,</span><br><span class="line">                             &#x27;product&#x27;: &#x27;Unknown&#x27;&#125;,</span><br><span class="line">              &#x27;udid&#x27;: &#x27;ece<span class="number">8186</span>4b51f3e<span class="number">0535</span>bf86e9ab24f<span class="number">9209</span>e<span class="number">9727</span>f0&#x27;,</span><br><span class="line">              &#x27;updatedAt&#x27;: &#x27;<span class="number">2019-06-11</span>T16:58:33.<span class="number">049000</span>&#x27;&#125;,</span><br><span class="line">             &#123;&#x27;colding&#x27;: False,</span><br><span class="line">              &#x27;createdAt&#x27;: &#x27;<span class="number">2019-06-11</span>T10:17:43.<span class="number">340000</span>&#x27;,</span><br><span class="line">              &#x27;owner&#x27;: &#x27;&#x27;,</span><br><span class="line">              &#x27;platform&#x27;: &#x27;apple&#x27;,</span><br><span class="line">              &#x27;present&#x27;: False,</span><br><span class="line">              &#x27;properties&#x27;: &#123;&#x27;brand&#x27;: &#x27;Apple&#x27;,</span><br><span class="line">                             &#x27;name&#x27;: &#x27;&#x27;,</span><br><span class="line">                             &#x27;product&#x27;: &#x27;Unknown&#x27;&#125;,</span><br><span class="line">              &#x27;udid&#x27;: &#x27;6dd5e55bf<span class="number">4204</span>cd5ad<span class="number">8042</span>dc4ecb2b703bbdb435&#x27;,</span><br><span class="line">              &#x27;updatedAt&#x27;: &#x27;<span class="number">2019-06-11</span>T10:21:28.<span class="number">894000</span>&#x27;,</span><br><span class="line">              &#x27;using&#x27;: False&#125;,</span><br><span class="line">             &#123;&#x27;colding&#x27;: False,</span><br><span class="line">              &#x27;createdAt&#x27;: &#x27;<span class="number">2019-06-06</span>T08:54:42.<span class="number">115000</span>&#x27;,</span><br><span class="line">              &#x27;idleTimeout&#x27;: <span class="number">600</span>,</span><br><span class="line">              &#x27;lastActivatedAt&#x27;: &#x27;<span class="number">2019-06-10</span>T09:12:46.<span class="number">465000</span>&#x27;,</span><br><span class="line">              &#x27;owner&#x27;: &#x27;&#x27;,</span><br><span class="line">              &#x27;platform&#x27;: &#x27;apple&#x27;,</span><br><span class="line">              &#x27;present&#x27;: False,</span><br><span class="line">              &#x27;properties&#x27;: &#123;&#x27;brand&#x27;: &#x27;Apple&#x27;,</span><br><span class="line">                             &#x27;ip&#x27;: &#x27;172.28.212.16&#x27;,</span><br><span class="line">                             &#x27;name&#x27;: &#x27;iPhone6&#x27;,</span><br><span class="line">                             &#x27;product&#x27;: &#x27;iPhone 6&#x27;,</span><br><span class="line">                             &#x27;propertyId&#x27;: &#x27;<span class="number">1908090114</span>&#x27;,</span><br><span class="line">                             &#x27;sdkVersion&#x27;: &#x27;12.2&#x27;,</span><br><span class="line">                             &#x27;version&#x27;: &#x27;12.1.4&#x27;&#125;,</span><br><span class="line">              &#x27;udid&#x27;: &#x27;fa00fcc158dadb6bd1cc7c<span class="number">618540</span>ebd7c<span class="number">372352</span>0&#x27;,</span><br><span class="line">              &#x27;updatedAt&#x27;: &#x27;<span class="number">2019-06-10</span>T10:13:48.<span class="number">662000</span>&#x27;,</span><br><span class="line">              &#x27;userId&#x27;: None,</span><br><span class="line">              &#x27;using&#x27;: False,</span><br><span class="line">              &#x27;usingBeganAt&#x27;: &#x27;<span class="number">2019-06-10</span>T09:02:10.<span class="number">333000</span>&#x27;,</span><br><span class="line">              &#x27;usingDuration&#x27;: <span class="number">1041.401</span>&#125;,</span><br><span class="line">             &#123;&#x27;colding&#x27;: False,</span><br><span class="line">              &#x27;createdAt&#x27;: &#x27;<span class="number">2019-05-30</span>T21:39:47.<span class="number">708000</span>&#x27;,</span><br><span class="line">              &#x27;idleTimeout&#x27;: <span class="number">600</span>,</span><br><span class="line">              &#x27;lastActivatedAt&#x27;: &#x27;<span class="number">2019-06-11</span>T16:53:32.<span class="number">250000</span>&#x27;,</span><br><span class="line">              &#x27;owner&#x27;: &#x27;&#x27;,</span><br><span class="line">              &#x27;platform&#x27;: &#x27;apple&#x27;,</span><br><span class="line">              &#x27;present&#x27;: True,</span><br><span class="line">              &#x27;properties&#x27;: &#123;&#x27;brand&#x27;: &#x27;Apple&#x27;,</span><br><span class="line">                             &#x27;ip&#x27;: &#x27;172.28.213.231&#x27;,</span><br><span class="line">                             &#x27;name&#x27;: &#x27;iPhone 7&#x27;,</span><br><span class="line">                             &#x27;product&#x27;: &#x27;iPhone 7&#x27;,</span><br><span class="line">                             &#x27;propertyId&#x27;: &#x27;<span class="number">1908090112</span>&#x27;,</span><br><span class="line">                             &#x27;sdkVersion&#x27;: &#x27;12.2&#x27;,</span><br><span class="line">                             &#x27;version&#x27;: &#x27;12.1.4&#x27;&#125;,</span><br><span class="line">              &#x27;udid&#x27;: &#x27;2cced5ac6ad06c35e<span class="number">067460</span>dad5ff417f264b8ae&#x27;,</span><br><span class="line">              &#x27;updatedAt&#x27;: &#x27;<span class="number">2019-06-11</span>T16:53:56.<span class="number">737000</span>&#x27;,</span><br><span class="line">              &#x27;userId&#x27;: None,</span><br><span class="line">              &#x27;using&#x27;: False,</span><br><span class="line">              &#x27;usingBeganAt&#x27;: &#x27;<span class="number">2019-06-11</span>T16:53:32.<span class="number">250000</span>&#x27;,</span><br><span class="line">              &#x27;usingDuration&#x27;: <span class="number">8877.971</span>&#125;],</span><br><span class="line"> &#x27;success&#x27;: True&#125;</span><br></pre></td></tr></table></figure>
<p>几个比较重要的字段说明</p>
<pre><code>* platform目前有两个值android和apple
* present代表设备是否在线
* colding代表设备是否正在清理或者自检中, 此时是不能占用设备的
* using代表设备是否有人正在使用
* userId代表使用者的ID，这里的ID其实就是Email
* properties代表设备的一些状态信息，基本都是静态信息
</code></pre>
<h2 id="获取单个设备信息"><a href="#获取单个设备信息" class="headerlink" title="获取单个设备信息"></a>获取单个设备信息</h2><p>如果我们想查看单个设备的信息，可以封装如下方法来查看。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_iOS_device_by_udid</span>(<span class="params">self, udid</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    获取单个设备信息</span></span><br><span class="line"><span class="string">    :param udid:str 设备的 udid 字段</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    left_url = <span class="string">&quot;/&quot;</span>.join([USER_DEVICES_URL, udid])</span><br><span class="line">    url = urljoin(self.atx_url, left_url)</span><br><span class="line">    info = self._get_response(url=url)</span><br><span class="line">    <span class="comment"># pprint(info)</span></span><br><span class="line">    <span class="keyword">return</span> info</span><br></pre></td></tr></table></figure>
<p>调用方法如下：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ATX_URL</span> =&#x27;http://<span class="number">172</span>.<span class="number">28</span>.xx.xx:<span class="number">4000</span>&#x27;</span><br><span class="line"><span class="attribute">Token</span>=&#x27;xxxxxxx&#x27;</span><br><span class="line"><span class="attribute">udid</span>=&#x27;<span class="number">2</span>cced<span class="number">5</span>ac<span class="number">6</span>ad<span class="number">06</span>c<span class="number">35</span>e<span class="number">067460</span>dad<span class="number">5</span>ff<span class="number">417</span>f<span class="number">264</span>b<span class="number">8</span>ae&#x27;  #iphone<span class="number">7</span></span><br><span class="line"> </span><br><span class="line"><span class="attribute">atx</span>=AtxiOS(ATX_URL,Token)</span><br><span class="line"><span class="attribute">device_info</span>=atx.get_iOS_device_by_udid(udid) #获取单个设备信息</span><br><span class="line"><span class="attribute">pprint</span>(device_info)</span><br></pre></td></tr></table></figure>
<p>返回内容如下：</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">&#123;&#x27;device&#x27;: &#123;&#x27;colding&#x27;: False,</span><br><span class="line">            &#x27;createdAt&#x27;: &#x27;<span class="number">2019-05-30</span>T21:39:47.<span class="number">708000</span>&#x27;,</span><br><span class="line">            &#x27;idleTimeout&#x27;: <span class="number">600</span>,</span><br><span class="line">            &#x27;lastActivatedAt&#x27;: &#x27;<span class="number">2019-06-11</span>T16:53:32.<span class="number">250000</span>&#x27;,</span><br><span class="line">            &#x27;owner&#x27;: &#x27;&#x27;,</span><br><span class="line">            &#x27;platform&#x27;: &#x27;apple&#x27;,</span><br><span class="line">            &#x27;properties&#x27;: &#123;&#x27;brand&#x27;: &#x27;Apple&#x27;,</span><br><span class="line">                           &#x27;ip&#x27;: &#x27;172.28.213.231&#x27;,</span><br><span class="line">                           &#x27;name&#x27;: &#x27;iPhone 7&#x27;,</span><br><span class="line">                           &#x27;product&#x27;: &#x27;iPhone 7&#x27;,</span><br><span class="line">                           &#x27;propertyId&#x27;: &#x27;<span class="number">1908090112</span>&#x27;,</span><br><span class="line">                           &#x27;sdkVersion&#x27;: &#x27;12.2&#x27;,</span><br><span class="line">                           &#x27;version&#x27;: &#x27;12.1.4&#x27;&#125;,</span><br><span class="line">            &#x27;source&#x27;: &#123;&#x27;id&#x27;: &#x27;<span class="number">0681</span>c592-8bf4-11e9-afd1-<span class="number">0242</span>ac<span class="number">120002</span>&#x27;,</span><br><span class="line">                       &#x27;name&#x27;: &#x27;pyclient&#x27;,</span><br><span class="line">                       &#x27;owner&#x27;: &#x27;nobody@nobody.io&#x27;,</span><br><span class="line">                       &#x27;priority&#x27;: <span class="number">2</span>,</span><br><span class="line">                       &#x27;secret&#x27;: &#x27;&#x27;,</span><br><span class="line">                       &#x27;url&#x27;: &#x27;http://172.28.xx.xx:<span class="number">3600</span>&#x27;,</span><br><span class="line">                       &#x27;wdaUrl&#x27;: &#x27;http://172.28.xx.xx:<span class="number">2002</span>3&#x27;&#125;,</span><br><span class="line">            &#x27;sources&#x27;: &#123;&#x27;<span class="number">0681</span>c592-8bf4-11e9-afd1-<span class="number">0242</span>ac<span class="number">120002</span>&#x27;: &#123;&#x27;id&#x27;: &#x27;<span class="number">0681</span>c592-8bf4-11e9-afd1-<span class="number">0242</span>ac<span class="number">120002</span>&#x27;,</span><br><span class="line">                                                                 &#x27;name&#x27;: &#x27;pyclient&#x27;,</span><br><span class="line">                                                                 &#x27;owner&#x27;: &#x27;nobody@nobody.io&#x27;,</span><br><span class="line">                                                                 &#x27;priority&#x27;: <span class="number">2</span>,</span><br><span class="line">                                                                 &#x27;secret&#x27;: &#x27;&#x27;,</span><br><span class="line">                                                                 &#x27;url&#x27;: &#x27;http://172.28.xx.xx:<span class="number">3600</span>&#x27;,</span><br><span class="line">                                                                 &#x27;wdaUrl&#x27;: &#x27;http://172.28.xx.xx:<span class="number">2002</span>3&#x27;&#125;&#125;,</span><br><span class="line">            &#x27;udid&#x27;: &#x27;2cced5ac6ad06c35e<span class="number">067460</span>dad5ff417f264b8ae&#x27;,</span><br><span class="line">            &#x27;updatedAt&#x27;: &#x27;<span class="number">2019-06-11</span>T16:53:56.<span class="number">737000</span>&#x27;,</span><br><span class="line">            &#x27;userId&#x27;: None,</span><br><span class="line">            &#x27;using&#x27;: False,</span><br><span class="line">            &#x27;usingBeganAt&#x27;: &#x27;<span class="number">2019-06-11</span>T16:53:32.<span class="number">250000</span>&#x27;,</span><br><span class="line">            &#x27;usingDuration&#x27;: <span class="number">8877.971</span>&#125;,</span><br><span class="line"> &#x27;success&#x27;: True&#125;</span><br></pre></td></tr></table></figure>
<h2 id="获取设备远程WDA地址"><a href="#获取设备远程WDA地址" class="headerlink" title="获取设备远程WDA地址"></a>获取设备远程WDA地址</h2><p>每台挂载在ATX2平台的iOS设备都有一个唯一的WDA地址，我们可以根据这个地址来远程调用该设备，一般地址格式为:ATX地址IP+端口号</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_wda_url</span>(<span class="params">self,udid</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    获取iOS设备远程wda链接</span></span><br><span class="line"><span class="string">    :param udid: 设备udid</span></span><br><span class="line"><span class="string">    :return: </span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    device_info =self.get_iOS_device_by_udid(udid)</span><br><span class="line">    wda_url = device_info[<span class="string">&#x27;device&#x27;</span>][<span class="string">&#x27;source&#x27;</span>][<span class="string">&#x27;wdaUrl&#x27;</span>]</span><br><span class="line">    logging.info(<span class="string">&#x27;wda_url is %s&#x27;</span> %wda_url)</span><br><span class="line">    <span class="keyword">return</span> wda_url</span><br></pre></td></tr></table></figure>
<p>调用方法</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ATX_URL</span> =&#x27;http://<span class="number">172</span>.<span class="number">28</span>.xx.xx:<span class="number">4000</span>&#x27;</span><br><span class="line"><span class="attribute">Token</span>=&#x27;a<span class="number">0344</span>xxxxx<span class="number">45</span>e<span class="number">92</span>a<span class="number">396</span>b<span class="number">0530</span>&#x27;</span><br><span class="line"><span class="attribute">udid</span>=&#x27;<span class="number">2</span>cced<span class="number">5</span>ac<span class="number">6</span>ad<span class="number">06</span>c<span class="number">35</span>e<span class="number">067460</span>dad<span class="number">5</span>ff<span class="number">417</span>f<span class="number">264</span>b<span class="number">8</span>ae&#x27;  #iphone<span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">atx</span>=AtxiOS(ATX_URL,Token)</span><br><span class="line"><span class="attribute">atx</span>.get_wda_url(udid) #获取设备的远程url地址</span><br></pre></td></tr></table></figure>
<p>返回结果</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">http</span>://<span class="number">172</span>.<span class="number">28</span>.xx.xx:<span class="number">200000</span></span><br></pre></td></tr></table></figure>
<p>设备占用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">using_iOS_device</span>(<span class="params">self, udid</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    占用一台设备</span></span><br><span class="line"><span class="string">    :param udid: str 设备的 udid 字段</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    url = urljoin(self.atx_url, USER_DEVICES_URL)</span><br><span class="line">    data = &#123;<span class="string">&quot;udid&quot;</span>: udid&#125;</span><br><span class="line">    headers = self.headers</span><br><span class="line">    headers[<span class="string">&quot;Content-Type&quot;</span>] = <span class="string">&quot;application/json&quot;</span></span><br><span class="line">    info = self._get_response(url, <span class="string">&quot;POST&quot;</span>, headers, json.dumps(data))</span><br><span class="line">    logging.info(info)</span><br></pre></td></tr></table></figure>
<p>调用方法</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ATX_URL</span> =&#x27;http://<span class="number">172</span>.<span class="number">28</span>.xx.xx:<span class="number">4000</span>&#x27;</span><br><span class="line"><span class="attribute">Token</span>=&#x27;a<span class="number">0344</span>xxxxx<span class="number">45</span>e<span class="number">92</span>a<span class="number">396</span>b<span class="number">0530</span>&#x27;</span><br><span class="line"><span class="attribute">udid</span>=&#x27;<span class="number">2</span>cced<span class="number">5</span>ac<span class="number">6</span>ad<span class="number">06</span>c<span class="number">35</span>e<span class="number">067460</span>dad<span class="number">5</span>ff<span class="number">417</span>f<span class="number">264</span>b<span class="number">8</span>ae&#x27;  #iphone<span class="number">7</span></span><br><span class="line"> </span><br><span class="line"><span class="attribute">atx</span>=AtxiOS(ATX_URL,Token)</span><br><span class="line"><span class="attribute">atx</span>.using_iOS_device(udid) #占用设备</span><br></pre></td></tr></table></figure>
<p>调用方法之后会有三种情况，设备占用成功或失败，返回内容如下：</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;description&#x27;</span>: <span class="string">&#x27;Device successfully added&#x27;</span>, <span class="string">&#x27;success&#x27;</span>: <span class="literal">True</span>&#125; <span class="meta">#设备占用成功</span></span><br><span class="line">&#123;<span class="string">&#x27;description&#x27;</span>: <span class="string">&#x27;Device add failed: device busy&#x27;</span>, <span class="string">&#x27;success&#x27;</span>: <span class="literal">False</span>&#125; <span class="meta">#设备被其他人占用</span></span><br><span class="line">&#123;<span class="string">&#x27;success&#x27;</span>: <span class="literal">False</span>, <span class="string">&#x27;description&#x27;</span>: <span class="string">&#x27;Device add failed: device not exist&#x27;</span>&#125; <span class="meta">#udid值错误</span></span><br></pre></td></tr></table></figure>

<h2 id="设备释放"><a href="#设备释放" class="headerlink" title="设备释放"></a>设备释放</h2><p>使用完设备之后我们需要释放设备，定义方法如下:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">release_iOS_device</span>(<span class="params">self, udid</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    释放iOS设备</span></span><br><span class="line"><span class="string">    :param udid:str 设备的 udid 字段</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    left_url = <span class="string">&quot;/&quot;</span>.join([USER_DEVICES_URL, udid])</span><br><span class="line">    url = urljoin(self.atx_url, left_url)</span><br><span class="line">    info = self._get_response(url, <span class="string">&quot;DELETE&quot;</span>)</span><br><span class="line">    logging.info(info)</span><br></pre></td></tr></table></figure>
<p>调用方法如下：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ATX_URL</span> =&#x27;http://<span class="number">172</span>.<span class="number">28</span>.xx.xx:<span class="number">4000</span>&#x27;</span><br><span class="line"><span class="attribute">Token</span>=&#x27;a<span class="number">0344</span>xxxxx<span class="number">45</span>e<span class="number">92</span>a<span class="number">396</span>b<span class="number">0530</span>&#x27;</span><br><span class="line"><span class="attribute">udid</span>=&#x27;<span class="number">2</span>cced<span class="number">5</span>ac<span class="number">6</span>ad<span class="number">06</span>c<span class="number">35</span>e<span class="number">067460</span>dad<span class="number">5</span>ff<span class="number">417</span>f<span class="number">264</span>b<span class="number">8</span>ae&#x27;  #iphone<span class="number">7</span></span><br><span class="line"> </span><br><span class="line"><span class="attribute">atx</span>=AtxiOS(ATX_URL,Token)</span><br><span class="line"><span class="attribute">atx</span>.release_iOS_device(udid) #释放设备</span><br></pre></td></tr></table></figure>
<p>设备释放成功时返回内容如下：</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">&#123;<span class="symbol">&#x27;success</span>&#x27;: <span class="literal">True</span>, <span class="symbol">&#x27;description</span>&#x27;: <span class="symbol">&#x27;Device</span> successfully released&#x27;&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：释放接口可以释放非当前账户占用的设备，释放时一定要确认udid是否为自己占用的设备，避免影响他人正常使用！</p>
</blockquote>
]]></content>
      <categories>
        <category>App自动化</category>
      </categories>
      <tags>
        <tag>App自动化</tag>
      </tags>
  </entry>
  <entry>
    <title>ATX基于ATX-Server2的UI自动化测试框架</title>
    <url>/2019/10/24/ATX%E5%9F%BA%E4%BA%8EATX-Server2%E7%9A%84UI%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>基于ATX-Server2的UI自动化测试框架，支持多设备的并行测试，并生成统一的测试报告</p>
<h1 id="支持atx-server2"><a href="#支持atx-server2" class="headerlink" title="支持atx-server2"></a>支持atx-server2</h1><p>android：修改config下的Server地址为atx-server2的Url，token填写正确后,就可以正常运行了</p>
<p><a href="https://vic.kim/2019/08/21/atxserver2%E8%AE%BE%E5%A4%87%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/">atxserver2设备管理平台搭建</a></p>
<h1 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h1><p>部署好atxserver2<br>只支持Python 3上运行  本人python版本 3.7<br>Android设备需要通过uiautomator2 init 初始化完成（<code>python -m uiautomator2 init</code>），确认可以正常连接 </p>
<h1 id="工程介绍"><a href="#工程介绍" class="headerlink" title="工程介绍"></a>工程介绍</h1><h2 id="工程目录如下"><a href="#工程目录如下" class="headerlink" title="工程目录如下"></a>工程目录如下</h2><p><img src="/.kim//directory.jpg" alt="Directory"></p>
<h2 id="common："><a href="#common：" class="headerlink" title="common："></a><strong>common：</strong></h2><ul>
<li>devices.py 获取atx-server2上特定设备（get_atxserver2_online_devices()）、或config.ini下devices IP列表的在线设备（get_local_devices()）、有线连接电脑的设备自动连接u2（get_usb_devices()）</li>
<li>atxserver.py 获取</li>
<li>base_page.py 用于设备的初始化 u2.connect  已经一些公共模块的封装</li>
<li>chromedriver.py 和Ports.py 结合使用，启动chromedriver以便实现u2的webview操作（目前还没做到根据设备的chromeversion 启动指定版本的chromedriver）</li>
<li>cases_trategy.py 组织测试用例</li>
<li>decorator.py 有<a href="https://testerhome.com/testcase">*@*testcase</a>、<a href="https://testerhome.com/teststep">*@*teststep</a>这样的装饰器用例执行日志打印、错误后的处理、生成截图（支持gif测试步骤）</li>
<li>report.py  对生成的报告的一些操作，备份Testreport的报告到TestReport_History下、多设备统一报告的生成、报告的文件夹压缩</li>
<li>test_data.py 在执行测试前的测试数据的生成，会在common下生成data.json，测试执行的时候各个设设备更具自己的serial获取对应的测试数据</li>
<li>drivers.py  设备的获取，初始化准备，测试执行都是在这里完成的</li>
<li>run_case.py 存放测试报告/日志/截图的路径的生成，以及最终通过HTMLTestRunner来执行用例 </li>
<li>config.ini 一些需要用到的数据，atx-server地址、测试设备的ip、测试数据等</li>
</ul>
<h2 id="流程："><a href="#流程：" class="headerlink" title="流程："></a>流程：</h2><h3 id="通过runAll-py开始执行测试"><a href="#通过runAll-py开始执行测试" class="headerlink" title="通过runAll .py开始执行测试"></a>通过runAll .py开始执行测试</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    cs = CaseStrategy()</span><br><span class="line">    cases = cs.set_case_suite()</span><br><span class="line">    Drivers().run(cases)</span><br><span class="line">    zip_report()</span><br></pre></td></tr></table></figure>

<ol>
<li>​    通过CaseStrategy获取到需要执的测试用例</li>
<li>​    <code>Drivers().run(cases)</code>开始执行测试</li>
<li>​    执行完成之后打包压缩（压缩后发邮件方便）</li>
</ol>
<h3 id="Drivers-run-cases-执行测试"><a href="#Drivers-run-cases-执行测试" class="headerlink" title="Drivers().run(cases)执行测试"></a><code>Drivers().run(cases)</code>执行测试</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self, cases</span>):</span></span><br><span class="line">    start_time = time.strftime(<span class="string">&#x27;%Y%m%d%H%M%S&#x27;</span>, time.localtime(time.time()))</span><br><span class="line">    devices = check_devices()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> devices:</span><br><span class="line">        print(<span class="string">&#x27;没有发现设备，测试结束&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># generate test data data.json 准备测试数据</span></span><br><span class="line">    generate_test_data(devices)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&#x27;Starting Run test &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#x27;</span>)</span><br><span class="line">    <span class="comment"># devices_list = []</span></span><br><span class="line">    <span class="comment"># for i in range(len(devices)):</span></span><br><span class="line">    <span class="comment">#     devices_list.append(RunCases(devices[i]))</span></span><br><span class="line">    run_devices_list = [RunCases(device) <span class="keyword">for</span> device <span class="keyword">in</span> devices]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># run on every device 开始执行测试</span></span><br><span class="line">    pool = Pool(processes=<span class="built_in">len</span>(run_devices_list))</span><br><span class="line">    <span class="keyword">for</span> run_device <span class="keyword">in</span> run_devices_list:</span><br><span class="line">        pool.apply_async(self._run_cases,</span><br><span class="line">                         args=(run_device, cases,))</span><br><span class="line">    print(<span class="string">&#x27;Waiting for all runs done........ &#x27;</span>)</span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br><span class="line">    print(<span class="string">&#x27;All runs done........ &#x27;</span>)</span><br><span class="line">    <span class="comment"># ChromeDriver.kill()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#  Generate statistics report  生成统计测试报告 将所有设备的报告在一个HTML中展示</span></span><br><span class="line">    create_statistics_report(run_devices_list)</span><br><span class="line">    backup_report(<span class="string">&#x27;./TestReport&#x27;</span>, <span class="string">&#x27;./TestReport_History&#x27;</span>, start_time)</span><br><span class="line">```   </span><br><span class="line">```python    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_devices</span>():</span></span><br><span class="line">    <span class="comment"># 根据method 获取android设备</span></span><br><span class="line">    method = ReadConfig().get_method().strip()</span><br><span class="line">    <span class="keyword">if</span> method == <span class="string">&#x27;SERVER2&#x27;</span>:</span><br><span class="line">        print(<span class="string">&#x27;atxserver2 中获取可用的在线设备…&#x27;</span>)</span><br><span class="line">        devices = get_atxserver2_online_devices(Atxserver2(ReadConfig().get_server_url()).present_android_devices())</span><br><span class="line">        print(<span class="string">&#x27;atxserver2中有%s台在线设备&#x27;</span> % <span class="built_in">len</span>(devices))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> method == <span class="string">&#x27;UDID&#x27;</span>:</span><br><span class="line">        print(<span class="string">&#x27;Get available UDID devices %s from atxserver2...&#x27;</span> % ReadConfig().get_server_udid())</span><br><span class="line">        devices = get_atxserver2_online_devices(Atxserver2(ReadConfig().get_server_url()).present_udid_devices())</span><br><span class="line">        print(<span class="string">&#x27;\nThere has %s available udid devices in atxserver2&#x27;</span> % <span class="built_in">len</span>(devices))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> method == <span class="string">&#x27;IP&#x27;</span>:</span><br><span class="line">        <span class="comment"># get  devices from config devices list</span></span><br><span class="line">        print(<span class="string">&#x27;Get available IP devices %s from config... &#x27;</span> % ReadConfig().get_devices_ip())</span><br><span class="line">        devices = get_local_devices()</span><br><span class="line">        print(<span class="string">&#x27;\nThere has %s  devices alive in config IP list&#x27;</span> % <span class="built_in">len</span>(devices))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> method == <span class="string">&#x27;USB&#x27;</span>:</span><br><span class="line">        <span class="comment"># get  devices connected PC with USB</span></span><br><span class="line">        print(<span class="string">&#x27;Get available USB devices connected on PC... &#x27;</span>)</span><br><span class="line">        devices = get_usb_devices()</span><br><span class="line">        print(<span class="string">&#x27;\nThere has %s  USB devices alive &#x27;</span> % <span class="built_in">len</span>(devices))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&#x27;Config.ini method illegal:method =%s&#x27;</span> % method)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> devices</span><br><span class="line">```    </span><br><span class="line">```python</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_run_cases</span>(<span class="params">run_device, cases</span>):</span></span><br><span class="line">    log = Log()</span><br><span class="line">    log.set_logger(run_device.get_device()[<span class="string">&#x27;model&#x27;</span>], os.path.join(run_device.get_path(), <span class="string">&#x27;client.log&#x27;</span>))</span><br><span class="line">    log.i(<span class="string">&#x27;udid: %s&#x27;</span> % run_device.get_device()[<span class="string">&#x27;udid&#x27;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置cls.path, 必须在操作任何页面之前调用</span></span><br><span class="line">    path = ReportPath()</span><br><span class="line">    path.set_path(run_device.get_path())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置cls.driver, 必须在操作任何页面之前调用</span></span><br><span class="line">    base_page = BasePage()</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;ip&#x27;</span> <span class="keyword">in</span> run_device.get_device():</span><br><span class="line">        base_page.set_driver(run_device.get_device()[<span class="string">&#x27;ip&#x27;</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        base_page.set_driver(run_device.get_device()[<span class="string">&#x27;serial&#x27;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># run cases</span></span><br><span class="line">        base_page.set_fastinput_ime()  <span class="comment"># 切换成FastInputIME输入法</span></span><br><span class="line">        base_page.d.shell(<span class="string">&#x27;logcat -c&#x27;</span>)  <span class="comment"># 清空logcat</span></span><br><span class="line"></span><br><span class="line">        run_device.run_cases(cases)  <span class="comment"># RunCases().run(cases)</span></span><br><span class="line">        <span class="comment"># 将logcat文件上传到报告</span></span><br><span class="line">        base_page.d.shell(<span class="string">&#x27;logcat -d &gt; /sdcard/logcat.log&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        base_page.d.pull(<span class="string">&#x27;/sdcard/logcat.log&#x27;</span>, os.path.join(path.get_path(), <span class="string">&#x27;logcat.log&#x27;</span>))</span><br><span class="line">        base_page.set_original_ime()  <span class="comment"># 切换成正常输入法</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ReadConfig().get_method().strip() <span class="keyword">in</span> [<span class="string">&quot;UDID&quot;</span>, <span class="string">&quot;SERVER2&quot;</span>]:</span><br><span class="line">            log.i(<span class="string">&#x27;释放设备 %s &#x27;</span> % run_device.get_device()[<span class="string">&#x27;serial&#x27;</span>])</span><br><span class="line">            Atxserver2(ReadConfig().get_server_url()).release_device(run_device.get_device()[<span class="string">&#x27;serial&#x27;</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">except</span> AssertionError <span class="keyword">as</span> e:</span><br><span class="line">        log.e(<span class="string">&#x27;AssertionError, %s&#x27;</span>, e)   </span><br></pre></td></tr></table></figure>

<ol>
<li>​首先根据config.ini中<code>method</code>的值来判断从SERVER2获取online的设备 还是从config.ini中的ip来获取在线的设备</li>
<li>​在获取到设备之后，根据设备生产data.json测试数据</li>
<li>​生成设备列表</li>
<li>根据设备列表数生成多进程，执行测试用例</li>
<li>​测试完之后，杀掉执行过程</li>
<li>​最后在TestReport下生成统计测试报告，并且移到TestReport_History下（自动化测试报告.html</li>
</ol>
<h3 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示"></a>结果展示</h3><p>生成的测试报告路径结构如下<br><img src="/.kim//TestReport.png" alt="TestReport"></p>
<p>每个设备的测试结果及报告或存放在单独的文件夹下<br>在Testreport目录下会有一个统计测试报告（自动化测试报告.html)会将所有设备的报告统一在一个页面展示<br><img src="/.kim//Report.png" alt="Report"></p>
]]></content>
      <categories>
        <category>App自动化</category>
      </categories>
      <tags>
        <tag>App自动化</tag>
      </tags>
  </entry>
  <entry>
    <title>10分钟看懂Docker和K8S</title>
    <url>/2019/05/23/10%E5%88%86%E9%92%9F%E7%9C%8B%E6%87%82Docker%E5%92%8CK8S/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>2010年，几个搞IT的年轻人，在美国旧金山成立了一家名叫“dotCloud”的公司。这家公司主要提供基于PaaS的云计算技术服务。具体来说，是和LXC有关的容器技术。<br>LXC，就是Linux容器虚拟技术（Linux container）</p>
<p>后来，dotCloud公司将自己的容器技术进行了简化和标准化，并命名为——Docker。<br><img src="/.kim//149930-20190731223405786-383145862.jpg" alt="Docker"></p>
<p>Docker技术诞生之后，并没有引起行业的关注。而dotCloud公司，作为一家小型创业企业，在激烈的竞争之下，也步履维艰。正当他们快要坚持不下去的时候，脑子里蹦出了“开源”的想法。什么是“开源”？开源，就是开放源代码。也就是将原来内部保密的程序源代码开放给所有人，然后让大家一起参与进来，贡献代码和意见。</p>
<p>有的软件是一开始就开源的。也有的软件，是混不下去，创造者又不想放弃，所以选择开源。自己养不活，就吃“百家饭”嘛。2013年3月，dotCloud公司的创始人之一，Docker之父，28岁的Solomon Hykes正式决定，将Docker项目开源。</p>
<p>不开则已，一开惊人。越来越多的IT工程师发现了Docker的优点，然后蜂拥而至，加入Docker开源社区。Docker的人气迅速攀升，速度之快，令人瞠目结舌。开源当月，Docker 0.1 版本发布。此后的每一个月，Docker都会发布一个版本。到2014年6月9日，Docker 1.0 版本正式发布。此时的Docker，已经成为行业里人气最火爆的开源技术，没有之一。甚至像Google、微软、Amazon、VMware这样的巨头，都对它青睐有加，表示将全力支持。Docker火了之后，dotCloud公司干脆把公司名字也改成了Docker Inc. 。</p>
<p> Docker和容器技术为什么会这么火爆？说白了，就是因为它“轻”。在容器技术之前，业界的网红是虚拟机。虚拟机技术的代表，是VMWare和OpenStack。</p>
<p>相信很多人都用过虚拟机。虚拟机，就是在你的操作系统里面，装一个软件，然后通过这个软件，再模拟一台甚至多台“子电脑”出来。在“子电脑”里，你可以和正常电脑一样运行程序，例如开QQ。如果你愿意，你可以变出好几个“子电脑”，里面都开上QQ。“子电脑”和“子电脑”之间，是相互隔离的，互不影响。虚拟机属于虚拟化技术。</p>
<p>而Docker这样的容器技术，也是虚拟化技术，属于轻量级的虚拟化。虚拟机虽然可以隔离出很多“子电脑”，但占用空间更大，启动更慢，虚拟机软件可能还要花钱（例如VMWare）。而容器技术恰好没有这些缺点。它不需要虚拟出整个操作系统，只需要虚拟一个小规模的环境（类似“沙箱”）。</p>
<p>它启动时间很快，几秒钟就能完成。而且，它对资源的利用率很高（一台主机可以同时运行几千个Docker容器）。此外，它占的空间很小，虚拟机一般要几GB到几十GB的空间，而容器只需要MB级甚至KB级。正因为如此，容器技术受到了热烈的欢迎和追捧，发展迅速。<br><img src="/.kim//149930-20190731223738304-439883279.jpg" alt="容器和虚拟机的对比"></p>
<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><p>我们具体来看看Docker。大家需要注意，Docker本身并不是容器，它是创建容器的工具，是应用容器<br>引擎。想要搞懂Docker，其实看它的两句口号就行。</p>
<p><strong>第一句，是“Build, Ship and Run”</strong>。<br>也就是，“搭建、发送、运行”，三板斧。</p>
<p>举个例子：我来到一片空地，想建个房子，于是我搬石头、砍木头、画图纸，一顿操作，终于把这个房子盖好了。</p>
<p>结果，我住了一段时间，想搬到另一片空地去。这时候，按以往的办法，我只能再次搬石头、砍木头、画图纸、盖房子。但是，跑来一个老巫婆，教会我一种魔法。这种魔法，可以把我盖好的房子复制一份，做成“镜像”，放在我的背包里。等我到了另一片空地，就用这个“镜像”，复制一套房子，摆在那<br>边，拎包入住。怎么样？是不是很神奇？</p>
<p><strong>Docker的第二句口号就是：“Build once，Run anywhere（搭建一次，到处能用）”</strong>。<br>Docker技术的三大核心概念，分别是：</p>
<ul>
<li>镜像（Image）</li>
<li>容器（Container）</li>
<li>仓库（Repository）<br>我刚才例子里面，那个放在包里的“镜像”，就是<strong>Docker镜像</strong>。而我的背包，就是<strong>Docker仓库</strong>。我在空地上，用魔法造好的房子，就是一个<strong>Docker容器</strong>。</li>
</ul>
<p>说白了，这个Docker镜像，是一个特殊的文件系统。它除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（例如环境变量）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。也就是说，每次变出房子，房子是一样的，但生活用品之类的，都是不管的。谁住谁负责添置。</p>
<p>每一个镜像可以变出一种房子。那么，我可以有多个镜像呀！也就是说，我盖了一个欧式别墅，生成了镜像。另一个哥们可能盖了一个中国四合院，也生成了镜像。还有哥们，盖了一个非洲茅草屋，也生成了镜像。。。这么一来，我们可以交换镜像，你用我的，我用你的，岂不是很爽？</p>
<p>于是乎，就变成了一个大的公共仓库。负责对Docker镜像进行管理的，是<strong>Docker Registry服务</strong>（类似仓库管理员）。不是任何人建的任何镜像都是合法的。万一有人盖了一个有问题的房子呢？所以，Docker Registry服务对镜像的管理是非常严格的。最常使用的Registry公开服务，是官方的Docker Hub，这也是默认的 Registry，并拥有大量的高质量的官方镜像。</p>
<h1 id="K8S"><a href="#K8S" class="headerlink" title="K8S"></a>K8S</h1><p>好了，说完了Docker，我们再把目光转向K8S。</p>
<p>就在Docker容器技术被炒得热火朝天之时，大家发现，如果想要将Docker应用于具体的业务实现，是存在困难的——编排、管理和调度等各个方面，都不容易。于是，人们迫切需要一套管理系统，对Docker及容器进行更高级更灵活的管理。</p>
<p>就在这个时候，K8S出现了。</p>
<p>K8S，就是基于容器的集群管理平台，它的全称，是kubernetes。</p>
<p>Kubernetes 这个单词来自于希腊语，含义是舵手或领航员。K8S是它的缩写，用“8”字替代了了“ubernete”这8个字符。和Docker不同，K8S的创造者，是众人皆知的行业巨头——<strong>Google</strong>。然而，K8S并不是一件全新的发明。它的前身，是Google自己捣鼓了十多年的<strong>Borg系统</strong>。K8S是2014年6月由Google公司正式公布出来并宣布开源的。同年7月，微软、Red Hat、IBM、Docker、CoreOS、 Mesosphere和Saltstack 等公司，相继加入K8S。之后的一年内，VMware、HP、Intel等公司，也陆续加入。2015年7月，Google正式加入OpenStack基金会。与此同时，Kuberentes v1.0正式发布。目前，kubernetes的版本已经发展到V1.13。K8S的架构，略微有一点复杂，我们简单来看一下。</p>
<p>一个K8S系统，通常称为一个K8S集群（Cluster）。<br>这个集群主要包括两个部分：<br>    * 一个Master节点（主节点）<br>    * 一群Node节点（计算节点）<br><img src="/.kim//WechatIMG14.png"></p>
<p>一看就明白：Master节点主要还是负责管理和控制。Node节点是工作负载节点，里面是具体的容器。深入来看这两种节点。首先是Master节点。<br><img src="/.kim//WechatIMG15.png"></p>
<p>Master节点包括API Server、Scheduler、Controller manager、etcd。</p>
<ul>
<li>API Server是整个系统的对外接口，供客户端和其它组件调用，相当于“营业厅”。</li>
<li>Scheduler负责对集群内部的资源进行调度，相当于“调度室”。</li>
<li>Controller manager负责管理控制器，相当于“大总管”。<br>然后是Node节点。<br><img src="/.kim//WechatIMG16.png"></li>
</ul>
<p>Node节点包括Docker、kubelet、kube-proxy、Fluentd、kube-dns（可选），还有就是Pod。</p>
<p>Pod是Kubernetes最基本的操作单元。一个Pod代表着集群中运行的一个进程，它内部封装了一个或多个紧密相关的容器。除了Pod之外，K8S还有一个Service的概念，一个Service可以看作一组提供相同服务的Pod的对外访问接口。这段不太好理解，跳过吧。</p>
<p>Docker，不用说了，创建容器的。<br>Kubelet，主要负责监视指派到它所在Node上的Pod，包括创建、修改、监控、删除等。<br>Kube-proxy，主要负责为Pod对象提供代理。<br>Fluentd，主要负责日志收集、存储与查询。<br>是不是有点懵？唉，三言两语真的很难讲清楚，继续跳过吧。</p>
<p>Docker和K8S都介绍完了，然而文章并没有结束。</p>
<p><strong>接下来的部分，是写给核心网工程师甚至所有通信工程师看的</strong>。</p>
<p>从几十年前的1G，到现在的4G，再到将来的5G，移动通信发生了翻天覆地的变化，核心网亦是如此。</p>
<p>但是，如果你仔细洞察这些变化，会发现，所谓的核心网，其实本质上并没有发生改变，无非就是很多的服务器而已。不同的核心网网元，就是不同的服务器，不同的计算节点。</p>
<p>变化的，是这些“服务器”的形态和接口：形态，从机柜单板，变成机柜刀片，从机柜刀片，变成X86通用刀片服务器；接口，从中继线缆，变成网线，从网线，变成光纤。</p>
<p>就算变来变去，还是服务器，是计算节点，是CPU。</p>
<p>既然是服务器，那么就势必会和IT云计算一样，走上虚拟化的道路。毕竟，虚拟化有太多的优势，例如前文所说的低成本、高利用率、充分灵活、动态调度，等等。</p>
<p>前几年，大家以为虚拟机是核心网的终极形态。目前看来，更有可能是容器化。这几年经常说的NFV（网元功能虚拟化），也有可能改口为NFC（网元功能容器化）。</p>
<p>以VoLTE为例，如果按以前2G/3G的方式，那需要大量的专用设备，分别充当EPC和IMS的不同网元。而采用容器之后，很可能只需要一台服务器，创建十几个容器，用不同的容器，来分别运行不同网元的服务程序。这些容器，随时可以创建，也可以随时销毁。还能够在不停机的情况下，随意变大，随意变小，随意变强，随意变弱，在性能和功耗之间动态平衡。简直完美！</p>
<p>5G时代，核心网采用微服务架构，也是和容器完美搭配——单体式架构（Monolithic）变成微服务架构（Microservices），相当于一个全能型变成N个专能型。每个专能型，分配给一个隔离的容器，赋予了最大程度的灵活。<br><img src="/.kim//%E7%B2%BE%E7%BB%86%E5%8C%96%E5%88%86%E5%B7%A5.jpg" alt="精细化分工"></p>
<p>按照这样的发展趋势，在移动通信系统中，除了天线，剩下的部分都有可能虚拟化。核心网是第一个，但不是最后一个。虚拟化之后的核心网，与其说属于通信，实际上更应该归为IT。核心网的功能，只是容器中普通一个软件功能而已。</p>
<p>至于说在座的各位核心网工程师，恭喜你们，马上就要成功转型啦！<br><img src="/.kim//WechatIMG17.png"></p>
<p><a href="https://www.jianshu.com/p/f1f94c6968f5">https://www.jianshu.com/p/f1f94c6968f5</a></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>CocoaPods安装</title>
    <url>/2019/08/21/CocoaPods%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1 id="Ruby环境搭建"><a href="#Ruby环境搭建" class="headerlink" title="Ruby环境搭建"></a>Ruby环境搭建</h1><h2 id="查看当前Ruby版本"><a href="#查看当前Ruby版本" class="headerlink" title="查看当前Ruby版本"></a>查看当前Ruby版本</h2><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ruby -v</span></span><br></pre></td></tr></table></figure>
<h2 id="查看rvm版本"><a href="#查看rvm版本" class="headerlink" title="查看rvm版本"></a>查看rvm版本</h2><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">rvm -v</span> </span><br></pre></td></tr></table></figure>
<p>显示如下(或者是其他版本)</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">rvm</span> <span class="number">1</span>.<span class="number">29</span>.<span class="number">3</span> (latest) by Michal Papis, Piotr Kuczynski, Wayne E. Seguin<span class="meta"> [https://rvm.io]</span></span><br></pre></td></tr></table></figure>

<h2 id="列出ruby可安装的版本信息"><a href="#列出ruby可安装的版本信息" class="headerlink" title="列出ruby可安装的版本信息"></a>列出ruby可安装的版本信息</h2><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">rvm list known</span></span><br></pre></td></tr></table></figure>
<p>显示如下</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"># <span class="selector-tag">MRI</span> <span class="selector-tag">Rubies</span></span><br><span class="line"><span class="selector-attr">[ruby-]</span><span class="selector-tag">1</span><span class="selector-class">.8</span><span class="selector-class">.6</span><span class="selector-attr">[-p420]</span></span><br><span class="line"><span class="selector-attr">[ruby-]</span><span class="selector-tag">1</span><span class="selector-class">.8</span><span class="selector-class">.7</span><span class="selector-attr">[-head]</span> # <span class="selector-tag">security</span> <span class="selector-tag">released</span> <span class="selector-tag">on</span> <span class="selector-tag">head</span></span><br><span class="line"><span class="selector-attr">[ruby-]</span><span class="selector-tag">1</span><span class="selector-class">.9</span><span class="selector-class">.1</span><span class="selector-attr">[-p431]</span></span><br><span class="line"><span class="selector-attr">[ruby-]</span><span class="selector-tag">1</span><span class="selector-class">.9</span><span class="selector-class">.2</span><span class="selector-attr">[-p330]</span></span><br><span class="line"><span class="selector-attr">[ruby-]</span><span class="selector-tag">1</span><span class="selector-class">.9</span><span class="selector-class">.3</span><span class="selector-attr">[-p551]</span></span><br><span class="line"><span class="selector-attr">[ruby-]</span><span class="selector-tag">2</span><span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-attr">[-p648]</span></span><br><span class="line"><span class="selector-attr">[ruby-]</span><span class="selector-tag">2</span><span class="selector-class">.1</span><span class="selector-attr">[.10]</span></span><br><span class="line"><span class="selector-attr">[ruby-]</span><span class="selector-tag">2</span><span class="selector-class">.2</span><span class="selector-attr">[.10]</span></span><br><span class="line"><span class="selector-attr">[ruby-]</span><span class="selector-tag">2</span><span class="selector-class">.3</span><span class="selector-attr">[.7]</span></span><br><span class="line"><span class="selector-attr">[ruby-]</span><span class="selector-tag">2</span><span class="selector-class">.4</span><span class="selector-attr">[.4]</span></span><br><span class="line"><span class="selector-attr">[ruby-]</span><span class="selector-tag">2</span><span class="selector-class">.5</span><span class="selector-attr">[.1]</span>  <span class="comment">// 重点在这里 重点在这里 重点在这里</span></span><br><span class="line"><span class="selector-attr">[ruby-]</span><span class="selector-tag">2</span><span class="selector-class">.6</span><span class="selector-attr">[.0-preview2]</span>   <span class="comment">// 测试版</span></span><br><span class="line"><span class="selector-tag">ruby-head</span></span><br><span class="line">.....</span><br></pre></td></tr></table></figure>

<h2 id="安装一个ruby版本（这里我选择的是2-5-1版本，当然你也可以选择其他的）"><a href="#安装一个ruby版本（这里我选择的是2-5-1版本，当然你也可以选择其他的）" class="headerlink" title="安装一个ruby版本（这里我选择的是2.5.1版本，当然你也可以选择其他的）"></a>安装一个ruby版本（这里我选择的是2.5.1版本，当然你也可以选择其他的）</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">rvm install <span class="number">2.5</span>.<span class="number">1</span></span><br><span class="line"><span class="regexp">//</span> 注意:安装过程中需要两次按下 Enter 键, 第二次按下后需要输入电脑访问密码(不可见,只管输入就行);</span><br><span class="line"><span class="regexp">//</span> 如果你电脑没有安装Xcode和Command Line Tools <span class="keyword">for</span> Xcode以及Homebrew 会自动下载安装,建议提前安装这三者.</span><br></pre></td></tr></table></figure>

<p>这里很多小伙伴会遇到错误，大部分是因为没有安装Homebrew造成，所以所以所以要提前安装比较好</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>bin<span class="regexp">/ruby -e &quot;$(curl -fsSL https:/</span><span class="regexp">/raw.githubusercontent.com/</span>Homebrew<span class="regexp">/install/m</span>aster/install)<span class="string">&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="设置为默认版本"><a href="#设置为默认版本" class="headerlink" title="设置为默认版本"></a>设置为默认版本</h2><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">rvm</span> use <span class="number">2</span>.<span class="number">5</span>.<span class="number">1</span> --default</span><br></pre></td></tr></table></figure>

<h2 id="更换源"><a href="#更换源" class="headerlink" title="更换源"></a>更换源</h2><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">sudo gem <span class="keyword">update</span> --<span class="built_in">system</span></span><br><span class="line">gem sources --<span class="built_in">remove</span> http<span class="variable">s:</span>//rubygems.org/</span><br><span class="line">gem sources --<span class="built_in">add</span> http<span class="variable">s:</span>//gems.<span class="keyword">ruby</span>-china.<span class="keyword">com</span>/</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="为了验证你的Ruby镜像是并且仅是ruby-china，执行以下命令查看"><a href="#为了验证你的Ruby镜像是并且仅是ruby-china，执行以下命令查看" class="headerlink" title="为了验证你的Ruby镜像是并且仅是ruby-china，执行以下命令查看"></a>为了验证你的Ruby镜像是并且仅是ruby-china，执行以下命令查看</h2><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">gem sources -l</span></span><br></pre></td></tr></table></figure>
<p>如果是以下结果说明正确，如果有其他的请自行百度解决</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">*** CURRENT SOURCES ***</span><br><span class="line">http<span class="variable">s:</span>//gems.<span class="keyword">ruby</span>-china.<span class="keyword">com</span>/</span><br></pre></td></tr></table></figure>
<h1 id="开始安装CocoaPods"><a href="#开始安装CocoaPods" class="headerlink" title="开始安装CocoaPods"></a>开始安装CocoaPods</h1><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">sudo gem install -n <span class="regexp">/usr/</span>local/bin cocoapods</span><br></pre></td></tr></table></figure>
<p>如果安装了多个Xcode使用下面的命令选择（一般需要选择最近的Xcode版本）</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">sudo xcode-select -<span class="keyword">switch</span> <span class="regexp">/Applications/</span>Xcode.app<span class="regexp">/Contents/</span>Developer</span><br></pre></td></tr></table></figure>

<h2 id="安装本地库"><a href="#安装本地库" class="headerlink" title="安装本地库"></a>安装本地库</h2><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">pod <span class="built_in">setup</span></span><br></pre></td></tr></table></figure>
<p>执行以上命令后</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">Setting up CocoaPods <span class="keyword">master</span> <span class="title">repo</span></span><br><span class="line">  $ /usr/bin/git <span class="keyword">clone</span> <span class="title">https</span>://github.com/CocoaPods/Specs.git <span class="keyword">master</span> <span class="title">--progress</span></span><br><span class="line">  Cloning into &#x27;<span class="literal">master</span>&#x27;...</span><br><span class="line">  remote: Counting objects: <span class="number">1879515</span>, done.        </span><br><span class="line">  remote: Compressing objects: <span class="number">100</span>% (<span class="number">321</span>/<span class="number">321</span>), done.        </span><br><span class="line">  Receiving objects:  <span class="number">21</span>% (<span class="number">404525</span>/<span class="number">1879515</span>), <span class="number">73.70</span> MiB | <span class="number">22.00</span> KiB/</span><br></pre></td></tr></table></figure>

<p>然后就是漫长的等待，当然,网络好的情况下会更快</p>
<p><a href="https://www.jianshu.com/p/d326fc80c719">如果一直安装不成功请参考这里</a></p>
<h2 id="查看你是否安裝成功"><a href="#查看你是否安裝成功" class="headerlink" title="查看你是否安裝成功"></a>查看你是否安裝成功</h2><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">pod</span></span><br></pre></td></tr></table></figure>
<p>显示</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">Usage:</span><br><span class="line"></span><br><span class="line">    $ pod COMMAND</span><br><span class="line"></span><br><span class="line">      CocoaPods, <span class="keyword">the</span> Cocoa library package manager.</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line"></span><br><span class="line">    + cache         Manipulate <span class="keyword">the</span> CocoaPods cache</span><br><span class="line">    + deintegrate   Deintegrate CocoaPods <span class="built_in">from</span> your project</span><br><span class="line">    + env           Display pod environment</span><br><span class="line">    + init          Generate <span class="keyword">a</span> Podfile <span class="keyword">for</span> <span class="keyword">the</span> current <span class="built_in">directory</span></span><br><span class="line">    + install       Install project dependencies according <span class="built_in">to</span> versions <span class="built_in">from</span> <span class="keyword">a</span></span><br><span class="line">                    Podfile.lock</span><br><span class="line">    + ipc           Inter-<span class="built_in">process</span> communication</span><br><span class="line">    + lib           Develop pods</span><br><span class="line">    + list          List pods</span><br><span class="line">    + outdated      Show outdated project dependencies</span><br><span class="line">    + plugins       Show available CocoaPods plugins</span><br><span class="line">    + repo          Manage spec-repositories</span><br><span class="line">    + search        Search <span class="keyword">for</span> pods</span><br><span class="line">    + setup         Setup <span class="keyword">the</span> CocoaPods environment</span><br><span class="line">    + spec          Manage pod specs</span><br><span class="line">    + trunk         Interact <span class="keyword">with</span> <span class="keyword">the</span> CocoaPods API (e.g. publishing <span class="built_in">new</span> specs)</span><br><span class="line">    + <span class="keyword">try</span>           Try <span class="keyword">a</span> Pod!</span><br><span class="line">    + update        Update outdated project dependencies <span class="keyword">and</span> <span class="built_in">create</span> <span class="built_in">new</span></span><br><span class="line">                    Podfile.lock</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line"></span><br><span class="line">    <span class="comment">--silent        Show nothing</span></span><br><span class="line">    <span class="comment">--version       Show the version of the tool</span></span><br><span class="line">    <span class="comment">--verbose       Show more debugging information</span></span><br><span class="line">    <span class="comment">--no-ansi       Show output without ANSI codes</span></span><br><span class="line">    <span class="comment">--help          Show help banner of specified command</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="CocoaPods版本"><a href="#CocoaPods版本" class="headerlink" title="CocoaPods版本"></a>CocoaPods版本</h2><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">pod <span class="comment">--version</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>资料</category>
      </categories>
      <tags>
        <tag>资料</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker安装</title>
    <url>/2019/08/21/Docker%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Hexo NexT 代码块复制功能</title>
    <url>/2019/05/26/Hexo%20NexT%20%E4%BB%A3%E7%A0%81%E5%9D%97%E5%A4%8D%E5%88%B6%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>为了提高博客代码块的用户体验，仅仅代码高亮还不行，最好还能一键复制代码。故此文将讲述Hexo NexT主题博客的代码块复制功能配置。</p>
<h1 id="下载clipboard-js"><a href="#下载clipboard-js" class="headerlink" title="下载clipboard.js"></a>下载clipboard.js</h1><p>三方插件 clipboardjs ，相关介绍和兼容性我就不赘述了，去它<a href="https://clipboardjs.com/">主页</a>或<a href="https://github.com/zenorocha/clipboard.js">github</a>上看。</p>
<p>下载地址：</p>
<ul>
<li><a href="https://raw.githubusercontent.com/zenorocha/clipboard.js/master/dist/clipboard.js">clipboard.js</a></li>
<li><a href="https://raw.githubusercontent.com/zenorocha/clipboard.js/master/dist/clipboard.min.js">clipboard.min.js</a><br>保存文件<code>clipboard.js</code>、<code>clipboard.min.js </code>，到目录<code>\themes\next\source\js\src</code>下</li>
</ul>
<h1 id="clipboardjs-使用"><a href="#clipboardjs-使用" class="headerlink" title="clipboardjs 使用"></a>clipboardjs 使用</h1><p>在<code>\themes\next\source\js\src</code>目录下，创建<code>clipboard-use.js</code>文件，文件内容如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*页面载入完成后，创建复制按钮*/</span></span><br><span class="line">!<span class="function"><span class="keyword">function</span> (<span class="params">e, t, a</span>) </span>&#123; </span><br><span class="line">  <span class="comment">/* code */</span></span><br><span class="line">  <span class="keyword">var</span> initCopyCode = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> copyHtml = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    copyHtml += <span class="string">&#x27;&lt;button class=&quot;btn-copy&quot; data-clipboard-snippet=&quot;&quot;&gt;&#x27;</span>;</span><br><span class="line">    copyHtml += <span class="string">&#x27;  &lt;i class=&quot;fa fa-globe&quot;&gt;&lt;/i&gt;&lt;span&gt;copy&lt;/span&gt;&#x27;</span>;</span><br><span class="line">    copyHtml += <span class="string">&#x27;&lt;/button&gt;&#x27;</span>;</span><br><span class="line">    $(<span class="string">&quot;.highlight .code pre&quot;</span>).before(copyHtml);</span><br><span class="line">    <span class="keyword">new</span> ClipboardJS(<span class="string">&#x27;.btn-copy&#x27;</span>, &#123;</span><br><span class="line">        target: <span class="function"><span class="keyword">function</span>(<span class="params">trigger</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> trigger.nextElementSibling;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  initCopyCode();</span><br><span class="line">&#125;(<span class="built_in">window</span>, <span class="built_in">document</span>);</span><br></pre></td></tr></table></figure>
<p>在<code>.\themes\next\source\css\_custom\custom.styl</code>文件中添加下面代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">//代码块复制按钮</span><br><span class="line"><span class="selector-class">.highlight</span>&#123;</span><br><span class="line">  //方便copy代码按钮（btn-copy）的定位</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.btn-copy</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#eee</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(<span class="number">#fcfcfc</span>,<span class="number">#eee</span>);</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#d5d5d5</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">    -webkit-user-select: none;</span><br><span class="line">    -moz-user-select: none;</span><br><span class="line">    -ms-user-select: none;</span><br><span class="line">    user-select: none;</span><br><span class="line">    -webkit-appearance: none;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">13px</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">    -webkit-<span class="attribute">transition</span>: opacity .<span class="number">3s</span> ease-in-out;</span><br><span class="line">    -o-<span class="attribute">transition</span>: opacity .<span class="number">3s</span> ease-in-out;</span><br><span class="line">    <span class="attribute">transition</span>: opacity .<span class="number">3s</span> ease-in-out;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">2px</span> <span class="number">6px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.btn-copy</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.highlight</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.btn-copy</span>&#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p>在<code>.\themes\next\layout\_layout.swig</code>文件中，添加引用（注：在 swig 末尾或 body 结束标签（）之前添加）：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 代码块复制功能 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/js/clipboard.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/js/clipboard-use.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>![添加位置示例](Hexo NexT 代码块复制功能/15588460292199.jpg)</p>
]]></content>
      <categories>
        <category>Hexo Next</category>
      </categories>
      <tags>
        <tag>Hexo Next</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Next 主题中添加本地搜索功能</title>
    <url>/2019/05/22/Hexo%20Next%20%E4%B8%BB%E9%A2%98%E4%B8%AD%E6%B7%BB%E5%8A%A0%E6%9C%AC%E5%9C%B0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<h1 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h1><p>随着时间的推移，个人站点的博客文章会越来越多，那怎么样才能快速找到你印象中的文章呢？增加一个站点内的搜索功能是非常有必要和方便的。</p>
<h1 id="安装本地搜索插件-hexo-generator-search"><a href="#安装本地搜索插件-hexo-generator-search" class="headerlink" title="安装本地搜索插件 hexo-generator-search"></a>安装本地搜索插件 hexo-generator-search</h1><p>在博客根目录下执行下列命令</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-<span class="keyword">search</span> <span class="comment">--save</span></span><br></pre></td></tr></table></figure>
<p>安装之后，会在站点目录的 public 文件夹下创建一个 search.xml 文件。</p>
<h1 id="修改全局配置文件-config-yml（博客根目录）"><a href="#修改全局配置文件-config-yml（博客根目录）" class="headerlink" title="修改全局配置文件_config.yml（博客根目录）"></a>修改全局配置文件_config.yml（博客根目录）</h1><p>在站点配置文件 _config.yml 中添加如下内容：</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="meta"># Search </span></span><br><span class="line"><span class="symbol">search:</span></span><br><span class="line"><span class="symbol">  path:</span> .<span class="meta-keyword">/public/</span>search.xml</span><br><span class="line"><span class="symbol">  field:</span> post</span><br><span class="line"><span class="symbol">  format:</span> html</span><br><span class="line"><span class="symbol">  limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure>
<p>path：索引文件的路径，相对于站点根目录<br>field：搜索范围，默认是 post，还可以选择 page、all，设置成 all 表示搜索所有页面<br>limit：限制搜索的条目数</p>
<h1 id="hexo主题配置文件（-themes-next-config-yml）"><a href="#hexo主题配置文件（-themes-next-config-yml）" class="headerlink" title="hexo主题配置文件（/themes/next/_config.yml）"></a>hexo主题配置文件（/themes/next/_config.yml）</h1><p>在主题配置文件 _config.yml 中找到如下内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>修改<code>local_search</code>的<code>enable</code>为<code>true</code></p>
<p><code>top_n_per_article </code>字段表示在每篇文章中显示的搜索结果数量，设成 -1 会显示每篇文章的所有搜索结果数量。</p>
<h1 id="重新部署"><a href="#重新部署" class="headerlink" title="重新部署"></a>重新部署</h1><p>然后执行以下命令，重新部署网站即可愉快的使用本地搜索功能了</p>
<figure class="highlight sas"><table><tr><td class="code"><pre><span class="line">hexo clean <span class="variable">&amp;&amp;</span> hexo g <span class="variable">&amp;&amp;</span> hexo d</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Hexo Next</category>
      </categories>
      <tags>
        <tag>Hexo Next</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo之添加萌萌哒</title>
    <url>/2019/05/26/Hexo%E4%B9%8B%E6%B7%BB%E5%8A%A0%E8%90%8C%E8%90%8C%E5%93%92/</url>
    <content><![CDATA[<h1 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h1><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">npm install <span class="comment">--save hexo-helper-live2d</span></span><br></pre></td></tr></table></figure>

<h1 id="复制你喜欢的模型名字：hijiki"><a href="#复制你喜欢的模型名字：hijiki" class="headerlink" title="复制你喜欢的模型名字：hijiki"></a>复制你喜欢的模型名字：hijiki</h1><p><img src="/.kim//Epsilon2.1.gif" alt="Epsilon2.1"></p>
<center>Epsilon2.1</center>
![Gantzert_Felixande](Hexo之添加萌萌哒/Gantzert_Felixander.gif)
<center>Gantzert_Felixande</center>
![haru](Hexo之添加萌萌哒/haru.gif)
<center>haru</center>
![haruto](Hexo之添加萌萌哒/haruto.gif)
<center>haruto</center>
![hibiki](Hexo之添加萌萌哒/hibiki.gif)
<center>hibiki</center>
![hijiki](Hexo之添加萌萌哒/hijiki.gif)
<center>hijiki</center>
![koharu](Hexo之添加萌萌哒/koharu.gif)
<center>koharu</center>
![miku](Hexo之添加萌萌哒/miku.gif)
<center>miku</center>
![ni-j](Hexo之添加萌萌哒/ni-j.gif)
<center>ni-j</center>
![nico](Hexo之添加萌萌哒/nico.gif)
<center>nico</center>
![nietzche](Hexo之添加萌萌哒/nietzche.gif)
<center>nietzche</center>
![nipsilon](Hexo之添加萌萌哒/nipsilon.gif)
<center>nipsilon</center>
![nito](Hexo之添加萌萌哒/nito.gif)
<center>nito</center>
![shizuku](Hexo之添加萌萌哒/shizuku.gif)
<center>shizuku</center>
![tororo](Hexo之添加萌萌哒/tororo.gif)
<center>tororo</center>
![tsumiki](Hexo之添加萌萌哒/tsumiki.gif)
<center>tsumiki</center>
![Unitychan](Hexo之添加萌萌哒/Unitychan.gif)
<center>Unitychan</center>
![wanko](Hexo之添加萌萌哒/wanko.gif)
<center>wanko</center>
![z16](Hexo之添加萌萌哒/z16.gif)
<center>z16</center>

<h1 id="将以下代码添加到主题配置文件-config-yml，修改-lt-你喜欢的模型名字-gt-："><a href="#将以下代码添加到主题配置文件-config-yml，修改-lt-你喜欢的模型名字-gt-：" class="headerlink" title="将以下代码添加到主题配置文件_config.yml，修改&lt;你喜欢的模型名字&gt;："></a>将以下代码添加到主题配置文件_config.yml，修改&lt;你喜欢的模型名字&gt;：</h1><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">live2d:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">scriptFrom:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">pluginRootPath:</span> <span class="string">live2dw/</span></span><br><span class="line">  <span class="attr">pluginJsPath:</span> <span class="string">lib/</span></span><br><span class="line">  <span class="attr">pluginModelPath:</span> <span class="string">assets/</span></span><br><span class="line">  <span class="attr">tagMode:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">log:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">model:</span></span><br><span class="line">    <span class="attr">use:</span> <span class="string">live2d-widget-model-&lt;你喜欢的模型名字&gt;</span></span><br><span class="line">  <span class="attr">display:</span></span><br><span class="line">    <span class="attr">position:</span> <span class="string">right</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">150</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">300</span></span><br><span class="line">  <span class="attr">mobile:</span></span><br><span class="line">    <span class="attr">show:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h1 id="建配置文件"><a href="#建配置文件" class="headerlink" title="建配置文件"></a>建配置文件</h1><ul>
<li>在站点目录下建文件夹live2d_models，</li>
<li>再在live2d_models下建文件夹&lt;你喜欢的模型名字&gt;,</li>
<li>再在&lt;你喜欢的模型名字&gt;下建json文件：&lt;你喜欢的模型名字&gt;.model.json</li>
</ul>
<h1 id="安装模型。在命令行（即Git-Bash）运行以下命令即可："><a href="#安装模型。在命令行（即Git-Bash）运行以下命令即可：" class="headerlink" title="安装模型。在命令行（即Git Bash）运行以下命令即可："></a>安装模型。在命令行（即Git Bash）运行以下命令即可：</h1><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">npm</span> install –save live<span class="number">2</span>d-widget-model-&lt;你喜欢的模型名字&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Hexo Next</category>
      </categories>
      <tags>
        <tag>Hexo Next</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客建立标签云及效果展示</title>
    <url>/2019/05/23/Hexo%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%8B%E6%A0%87%E7%AD%BE%E4%BA%91%E5%8F%8A%E6%95%88%E6%9E%9C%E5%B1%95%E7%A4%BA/</url>
    <content><![CDATA[<h1 id="hexo-tag-cloud插件介绍"><a href="#hexo-tag-cloud插件介绍" class="headerlink" title="hexo-tag-cloud插件介绍"></a>hexo-tag-cloud插件介绍</h1><p>hexo-tag-cloud插件是作者写的一个Hexo博客的标签云插件，旨在直观的展示标签的种类，美观大方且非常优雅。</p>
<ul>
<li><p>插件地址：<br><a href="https://github.com/MikeCoder/hexo-tag-cloud">插件的GitHub地址</a></p>
</li>
<li><p>插件说明：<br><a href="https://github.com/MikeCoder/hexo-tag-cloud/blob/master/README.ZH.md">说明地址</a></p>
</li>
<li><p>标签云效果展示：<br><a href="https://vic.kim/">我的博客主页</a><br><a href="https://mikecoder.github.io/archives/">插件作者提供的效果预览</a></p>
</li>
</ul>
<h1 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h1><p>进入到 hexo 的根目录，然后在 <code>package.json</code> 中添加依赖: <code>&quot;hexo-tag-cloud&quot;: &quot;2.1.*&quot;</code></p>
<h2 id="使用命令行进行安装"><a href="#使用命令行进行安装" class="headerlink" title="使用命令行进行安装"></a>使用命令行进行安装</h2><p><code>npm install</code></p>
<h2 id="Git-clone-下载"><a href="#Git-clone-下载" class="headerlink" title="Git clone 下载"></a>Git clone 下载</h2><p>使用命令行安装插件包的过程中可能会出现问题，安装失败，安装不完全。可以直接克隆插件到博客的插件文件夹blog/node_modules里。或者克隆到桌面，复制到博客的插件文件夹blog/node_modules里。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/MikeCoder/</span>hexo-tag-cloud</span><br></pre></td></tr></table></figure>

<h1 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h1><p>插件的配置需要对应的环境，可以在主题文件夹里找一下，有没有对应的渲染文件，然后根据渲染文件的类型，选择对应的插件配置方法。</p>
<p>##swig 用户 (Next主题为例)<br>在主题文件夹找到文件 theme/next/layout/_macro/sidebar.swig, 然后添加如下代码：</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> site.tags.length &gt; 1 %&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/js/tagcloud.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/js/tagcanvas.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;widget-wrap&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;widget-title&quot;</span>&gt;</span>Tag Cloud<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;myCanvasContainer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;widget tagcloud&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">width</span>=<span class="string">&quot;250&quot;</span> <span class="attr">height</span>=<span class="string">&quot;250&quot;</span> <span class="attr">id</span>=<span class="string">&quot;resCanvas&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width=100%&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            </span><span class="template-variable">&#123;&#123; list_tags() &#125;&#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br></pre></td></tr></table></figure>
<p>代码添加到后面即可，添加示意图如下:<br><img src="/.kim//WechatIMG135.png"></p>
<h2 id="对于ejs的用户-默认主题landscape为例"><a href="#对于ejs的用户-默认主题landscape为例" class="headerlink" title="对于ejs的用户 (默认主题landscape为例)"></a>对于ejs的用户 (默认主题landscape为例)</h2><p>在主题文件夹找到文件hexo/themes/landscape/layout/_widget/tagcloud.ejs,将这个文件修改如下：</p>
<figure class="highlight erb"><table><tr><td class="code"><pre><span class="line"><span class="xml">&lt;%</span><span class="ruby"> <span class="keyword">if</span> (site.tags.length) &#123; </span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> <span class="attr">src</span>=<span class="string">&quot;&lt;%-</span></span></span><span class="ruby"> url_for(<span class="string">&#x27;/js/tagcloud.js&#x27;</span>) </span><span class="xml"><span class="tag"><span class="string">%&gt;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> <span class="attr">src</span>=<span class="string">&quot;&lt;%-</span></span></span><span class="ruby"> url_for(<span class="string">&#x27;/js/tagcanvas.js&#x27;</span>) </span><span class="xml"><span class="tag"><span class="string">%&gt;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;widget-wrap&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;widget-title&quot;</span>&gt;</span>&lt;%=</span><span class="ruby"> __(<span class="string">&#x27;tagcloud&#x27;</span>) </span><span class="xml">%&gt;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;myCanvasContainer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;widget tagcloud&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">width</span>=<span class="string">&quot;250&quot;</span> <span class="attr">height</span>=<span class="string">&quot;250&quot;</span> <span class="attr">id</span>=<span class="string">&quot;resCanvas&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width=100%&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        &lt;%-</span><span class="ruby"> tagcloud() </span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">&lt;%</span><span class="ruby"> &#125; </span><span class="xml">%&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="对于jade用户-Apollo主题为例"><a href="#对于jade用户-Apollo主题为例" class="headerlink" title="对于jade用户 (Apollo主题为例)"></a>对于jade用户 (Apollo主题为例)</h2><p>找到 apollo/layout/archive.jade 文件，并且把 container 代码块修改为如下内容:</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">block container</span><br><span class="line">    include mixins/post</span><br><span class="line">    .archive</span><br><span class="line">        h2(<span class="attribute">class</span>=<span class="string">&#x27;archive-year&#x27;</span>)= <span class="string">&#x27;Tag Cloud&#x27;</span></span><br><span class="line">        script(<span class="attribute">type</span>=<span class="string">&#x27;text/javascript&#x27;</span>, <span class="attribute">charset</span>=<span class="string">&#x27;utf-8&#x27;</span>, <span class="attribute">src</span>=url_for(&quot;/js/tagcloud.js&quot;))</span><br><span class="line">        script(<span class="attribute">type</span>=<span class="string">&#x27;text/javascript&#x27;</span>, <span class="attribute">charset</span>=<span class="string">&#x27;utf-8&#x27;</span>, <span class="attribute">src</span>=url_for(&quot;/js/tagcanvas.js&quot;))</span><br><span class="line"></span><br><span class="line">        #myCanvasContainer.widget.tagcloud(<span class="attribute">align</span>=<span class="string">&#x27;center&#x27;</span>)</span><br><span class="line">            canvas#resCanvas(<span class="attribute">width</span>=<span class="string">&#x27;500&#x27;</span>, <span class="attribute">height</span>=<span class="string">&#x27;500&#x27;</span>, <span class="attribute">style</span>=<span class="string">&#x27;width=100%&#x27;</span>)</span><br><span class="line">                !=tagcloud()</span><br><span class="line">            !=tagcloud()</span><br><span class="line">    +postList()</span><br></pre></td></tr></table></figure>

<h1 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h1><p>在博客根目录，找到 _config.yml配置文件然后在最后添加如下的配置项，可以自定义标签云的字体和颜色，还有突出高亮:</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hexo-tag-cloud</span></span><br><span class="line"><span class="attribute">tag_cloud</span>:</span><br><span class="line">    <span class="attribute">textFont</span>: Trebuchet MS, Helvetica</span><br><span class="line">    <span class="attribute">textColor</span>: &#x27;#<span class="number">333</span>&#x27;</span><br><span class="line">    <span class="attribute">textHeight</span>: <span class="number">25</span></span><br><span class="line">    <span class="attribute">outlineColor</span>: &#x27;#E<span class="number">2</span>E<span class="number">1</span>D<span class="number">1</span>&#x27;</span><br><span class="line">    <span class="attribute">maxSpeed</span>: <span class="number">0</span>.<span class="number">1</span></span><br></pre></td></tr></table></figure>

<h1 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h1><p>本地预览<br><code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code><br>推荐使用 &amp;&amp; 作为组合命令的串联符号</p>
<p>构建<br><code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code></p>
<p>参考文章：<a href="https://github.com/MikeCoder/hexo-tag-cloud/blob/master/README.ZH.md">Hexo Tag Cloud</a></p>
]]></content>
      <categories>
        <category>Hexo Next</category>
      </categories>
      <tags>
        <tag>Hexo Next</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo文章加密</title>
    <url>/2019/05/27/Hexo%E6%96%87%E7%AB%A0%E5%8A%A0%E5%AF%86/</url>
    <content><![CDATA[<p>hexo-blog-encrypt插件<a href="https://github.com/MikeCoder/hexo-blog-encrypt/blob/master/ReadMe.zh.md">GitHub</a>官网</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>博客根目录下运行以下命令</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">npm install <span class="comment">--save hexo-blog-encrypt</span></span><br></pre></td></tr></table></figure>

<h1 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h1><h2 id="首先在-站点配置文件-中启用该插件"><a href="#首先在-站点配置文件-中启用该插件" class="headerlink" title="首先在 站点配置文件 中启用该插件:"></a>首先在 站点配置文件 中启用该插件:</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">encrypt:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>##然后在你的文章的头部添加上对应的字段，如 password, abstract, message</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">文章加密</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2019-01-04T22:20:13.000Z</span></span><br><span class="line"><span class="attr">category:</span> <span class="string">教程</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">博客</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Hexo</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">博客文章密码</span></span><br><span class="line"><span class="attr">password:</span> <span class="string">TloveY</span></span><br><span class="line"><span class="attr">abstract:</span> <span class="string">密码：TloveY</span></span><br><span class="line"><span class="attr">message:</span>  <span class="string">输入密码，查看文章</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>
<ul>
<li>password: 是该博客加密使用的密码</li>
<li>abstract: 是该博客的摘要，会显示在博客的列表页</li>
<li>message: 这个是博客查看时，密码输入框上面的描述性文字</li>
</ul>
<h2 id="如果你想对-TOC-也进行加密，则在-article-ejs-中将-TOC-的生成代码修改成如下："><a href="#如果你想对-TOC-也进行加密，则在-article-ejs-中将-TOC-的生成代码修改成如下：" class="headerlink" title="如果你想对 TOC 也进行加密，则在 article.ejs 中将 TOC 的生成代码修改成如下："></a>如果你想对 TOC 也进行加密，则在 article.ejs 中将 TOC 的生成代码修改成如下：</h2><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="params">&lt;% if(post.toc == true)&#123; %&gt;</span></span><br><span class="line">        <span class="params">&lt;div id=&quot;toc-div&quot; class=&quot;toc-article&quot; &lt;% if (post.encrypt == true) &#123; %&gt;</span>style=<span class="string">&quot;display:none&quot;</span> <span class="params">&lt;% &#125; %&gt;</span>&gt;</span><br><span class="line">            <span class="params">&lt;strong class=&quot;toc-title&quot;&gt;</span>Index<span class="params">&lt;/strong&gt;</span></span><br><span class="line">            <span class="params">&lt;% if (post.encrypt == true) &#123; %&gt;</span></span><br><span class="line">                <span class="params">&lt;%- toc(post.origin) %&gt;</span></span><br><span class="line">            <span class="params">&lt;% &#125; else &#123; %&gt;</span></span><br><span class="line">                <span class="params">&lt;%- toc(post.content) %&gt;</span></span><br><span class="line">            <span class="params">&lt;% &#125; %&gt;</span></span><br><span class="line">        <span class="params">&lt;/div&gt;</span></span><br><span class="line">    <span class="params">&lt;% &#125; %&gt;</span></span><br><span class="line">    <span class="params">&lt;%- post.content %&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a>自定义</h1><h2 id="如果你对默认的主题不满意，或者希望修改默认的提示和摘要内容，你可以添加如下配置在-站点配置文件-中。"><a href="#如果你对默认的主题不满意，或者希望修改默认的提示和摘要内容，你可以添加如下配置在-站点配置文件-中。" class="headerlink" title="如果你对默认的主题不满意，或者希望修改默认的提示和摘要内容，你可以添加如下配置在 站点配置文件 中。"></a>如果你对默认的主题不满意，或者希望修改默认的提示和摘要内容，你可以添加如下配置在 站点配置文件 中。</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">encrypt:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">default_abstract:</span> <span class="string">这是一篇加密文章，内容可能是个人情感宣泄或者收费技术。如果你确实想看，请与我联系。</span></span><br><span class="line">  <span class="attr">default_message:</span> <span class="string">输入密码，查看文章。</span></span><br></pre></td></tr></table></figure>
<p>这样，对于每一篇需要加密的文章就不必都在在头部添加 abstract 和 message 字段了，脚本会自动添加默认的内容填充。</p>
<h2 id="如果你希望对某一篇特定的文章做特殊处理（如本文的-abstract-，可以在对应文章的头部添加"><a href="#如果你希望对某一篇特定的文章做特殊处理（如本文的-abstract-，可以在对应文章的头部添加" class="headerlink" title="如果你希望对某一篇特定的文章做特殊处理（如本文的 abstract ，可以在对应文章的头部添加"></a>如果你希望对某一篇特定的文章做特殊处理（如本文的 abstract ，可以在对应文章的头部添加</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">文章加密</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2019-01-04T22:20:13.000Z</span></span><br><span class="line"><span class="attr">category:</span> <span class="string">教程</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">博客</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Hexo</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">博客文章密码</span></span><br><span class="line"><span class="attr">password:</span> <span class="string">TloveY</span></span><br><span class="line"><span class="attr">abstract:</span> <span class="string">密码：TloveY</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>
<p>此时，博客头部的 abstract 会覆盖 站点配置文件 的 default_abstract 实现自定义。</p>
<h1 id="存在问题"><a href="#存在问题" class="headerlink" title="存在问题"></a>存在问题</h1><ul>
<li>如果你开启了 字数统计功能 的话，那么本文的字数会显得比实际值大。</li>
<li>加密文章内部分脚本会失效，已知 代码复制 失效。</li>
</ul>
]]></content>
      <categories>
        <category>Hexo Next</category>
      </categories>
      <tags>
        <tag>Hexo Next</tag>
      </tags>
  </entry>
  <entry>
    <title>Homebrew</title>
    <url>/2019/05/20/Homebrew/</url>
    <content><![CDATA[<h1 id="什么是Homebrew？"><a href="#什么是Homebrew？" class="headerlink" title="什么是Homebrew？"></a>什么是Homebrew？</h1><p>Homebrew是一款Mac OS平台下的软件包管理工具，拥有安装、卸载、更新、查看、搜索等很多实用的功能。简单的一条指令，就可以实现包管理，而不用你关心各种依赖和文件路径的情况，十分方便快捷。</p>
<p><a href="https://brew.sh/index_zh-cn.html">官方网站</a>：又提示缺少套件啦？别担心，Homebrew 随时守候。Homebrew —— OS X 不可或缺的套件管理器。</p>
<h1 id="安装Homebrew"><a href="#安装Homebrew" class="headerlink" title="安装Homebrew"></a>安装Homebrew</h1><figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta">#安装</span></span><br><span class="line">/usr/bin/ruby -e <span class="string">&quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span>`</span><br><span class="line"></span><br><span class="line"><span class="meta">#验证是否安装成功</span></span><br><span class="line">brew doctor</span><br><span class="line"></span><br><span class="line"><span class="meta">#查看brew版本</span></span><br><span class="line">brew -v</span><br><span class="line"></span><br><span class="line"><span class="meta">#查看brew帮助文档</span></span><br><span class="line">brew –help</span><br><span class="line"></span><br><span class="line"><span class="meta">#更新Homebrew</span></span><br><span class="line">brew update</span><br></pre></td></tr></table></figure>
<h1 id="使用Homebrew"><a href="#使用Homebrew" class="headerlink" title="使用Homebrew"></a>使用Homebrew</h1><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装包</span></span><br><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>&lt;packageName&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#卸载软件</span></span><br><span class="line"><span class="keyword">brew </span>uninstall &lt;packageName&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#搜索软件</span></span><br><span class="line"><span class="keyword">brew </span>search &lt;packageName&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看已安装软件列表</span></span><br><span class="line"><span class="keyword">brew </span>list</span><br><span class="line"></span><br><span class="line"><span class="comment">#更新包</span></span><br><span class="line"><span class="keyword">brew </span>upgrade             <span class="comment"># 更新全部包</span></span><br><span class="line"><span class="keyword">brew </span>upgrade $FORMULA    <span class="comment"># 更新指定包</span></span><br><span class="line"><span class="keyword">brew </span>outdated            <span class="comment"># 查看可更新的包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#清理旧版本和缓存文件</span></span><br><span class="line"><span class="keyword">brew </span>cleanup             <span class="comment"># 清理所有包的旧版本</span></span><br><span class="line"><span class="keyword">brew </span>cleanup $FORMULA    <span class="comment"># 清理指定包的旧版本</span></span><br><span class="line"><span class="keyword">brew </span>cleanup -n          <span class="comment"># 查看可清理的旧版本包，不执行实际操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看包信息</span></span><br><span class="line"><span class="keyword">brew </span>info &lt;packageName&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>资料</category>
      </categories>
      <tags>
        <tag>资料</tag>
      </tags>
  </entry>
  <entry>
    <title>JMeter(一)_Mac下安装部署</title>
    <url>/2020/02/25/JMeter-%E4%B8%80-Mac%E4%B8%8B%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<p><a href="https://jmeter.apache.org/download_jmeter.cgi">JMeter官网下载</a><br><img src="/.kim//1651582602156_.pic_hd.jpg" alt="Jmeter版本"></p>
<h1 id="运行方法一，直接运行"><a href="#运行方法一，直接运行" class="headerlink" title="运行方法一，直接运行"></a>运行方法一，直接运行</h1><p>解压后<br>命令行进入/Users/vic/apache-jmeter-5.1.1/bin目录下，输入sh jmeter即可启动</p>
<h1 id="运行方法二，配置环境变量"><a href="#运行方法二，配置环境变量" class="headerlink" title="运行方法二，配置环境变量"></a>运行方法二，配置环境变量</h1><p>配置环境变量<br><code>vim ~/.bash_profile</code></p>
<p>内容输入举例：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">JMETER_HOME</span>=/Users/vic/apache-jmeter-5.1.1</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="variable">$PATH</span>:$JMETER_HOME/bin</span><br></pre></td></tr></table></figure>
<p>使环境变量生效<br><code>source ~/.bash_profile</code></p>
<p>修改jmeter为中文：<br>编辑/Users/vic/apache-jmeter-5.1.1/bin目录下的jmeter.properties文件<br>修改第37行左右如下：<br><img src="/.kim//1671582611252_.pic.jpg" alt="Jmeter版本"></p>
<p>打开终端输入：<code>jmeter</code> 启动JMeter</p>
]]></content>
      <categories>
        <category>JMeter</category>
      </categories>
      <tags>
        <tag>JMeter</tag>
      </tags>
  </entry>
  <entry>
    <title>JMeter(七)_关联之正则表达式提取器</title>
    <url>/2020/02/27/JMeter-%E4%B8%83-%E5%85%B3%E8%81%94%E4%B9%8B%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%8F%90%E5%8F%96%E5%99%A8/</url>
    <content><![CDATA[<h2 id="应用场景："><a href="#应用场景：" class="headerlink" title="应用场景："></a>应用场景：</h2><p>在一个线程组中，从前一个请求的响应结果中，提取到某些需要的内容，可以作为下一个接口需要的入参从而实现关联<br>添加路径：HTTP请求-&gt;添加-&gt;后置处理器-&gt;正则表达式提取器<br><img src="/.kim//%E6%B7%BB%E5%8A%A0%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%8F%90%E5%8F%96%E5%99%A8.png" alt="添加正则表达式提取器"></p>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>下面是JMeter-正则表达式提取器的界面<br><img src="/.kim//%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%8F%90%E5%8F%96%E5%99%A8.png" alt="正则表达式提取器"></p>
<ul>
<li><p><strong>后置处理器：</strong>在请求结束或者返回响应结果时发挥作用</p>
</li>
<li><p><strong>正则表达式提取器：</strong>允许用户从服务器的响应中通过使用perl的正则表达式提取值。该元素会作用在指定范围取样器，用正则表达式提取所需值，生成模板字符串，并将结果存储到给定的变量名中。</p>
</li>
<li><p>**APPly to:**作用范围（返回内容的断言范围）</p>
<ul>
<li>Main sample and sub-samples:作用于父节点的取样器及对应子节点的取样器</li>
<li>Main sample only：仅作用于父节点的取样器</li>
<li>Sub-samples only:仅作用于子节点的取样器</li>
<li>JMeter Variable:作用于jmeter变量(输入框内可输入jmeter的变量名称)</li>
</ul>
</li>
<li><p><strong>要检查的响应字段：</strong>需要检查的响应报文的范围</p>
<ul>
<li> 主体：Response Body，响应数据主体</li>
<li> Body(unescaped): 主体，响应的主体内容且替换了所有的html转义符，注意html转义符处理时不考虑上下文，因此可能有不正确的转换，不太建议使用 </li>
<li> Body as a Document：从不同类型的文件中提取文本，注意这个选项比较影响性能 </li>
<li> Response Headers：响应信息头</li>
<li> Request Headers: 请求信息头</li>
<li> URL：统一资源定位符，即Internet上用来描述信息资源的字符串</li>
<li> Response Code: 响应状态码，比如：200、404等</li>
<li> Response Message: 响应信息，比如：OK </li>
</ul>
</li>
<li><p><strong>引用名称（Reference Name）：</strong>Jmeter变量的名称，存储提取的结果；即下个请求需要引用的值、字段、变量名（例子中我提取的是SOCIAL_NO）</p>
</li>
<li><p><strong>引用方法：</strong>${xxx}</p>
</li>
<li><p><strong>正则表达式（Regular Expression）：</strong>使用正则表达式解析响应结果，“（）”表示提取字符串中的部分值<br><img src="/.kim//%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.png" alt="正则表达式"></p>
</li>
<li><p><strong>模板（Template）：</strong> 用$$引用起来，如果在正则表达式字段中，文本框写了多个正则表达式，则可以是$2$$3$等等，表示提取到的第几个值给引用名称。如：$1$表示匹配到的第1个值赋给引用名称。</p>
</li>
<li><p><strong>匹配数字（Match No）：</strong>正则表达式匹配数据的结果可以看做一个数组，表示如何取值：0代表随机取值，正数n则表示取第n个值（比如1代表取第一个值），负数则表示提取所有符合条件的值。</p>
</li>
<li><p><strong>缺省值：</strong>匹配失败时候的默认值；通常用于后续的逻辑判断，一般通常为特定含义的英文大写组合，比如：ERROR</p>
</li>
</ul>
<h2 id="正则表达式的举例说明："><a href="#正则表达式的举例说明：" class="headerlink" title="正则表达式的举例说明："></a>正则表达式的举例说明：</h2><h4 id="1、提取单个字符串："><a href="#1、提取单个字符串：" class="headerlink" title="1、提取单个字符串："></a>1、提取单个字符串：</h4><blockquote>
<p>假设我们想要匹配Web页面的如下部分：name = “file” value = “readme.txt”&gt;并要提取readme.txt。一个合适的正则表达式是：name = “file” value = “(.+?)”&gt;。我们可以这么写：</p>
</blockquote>
<blockquote>
<p>引用名称：file<br>正则表达式：name = “file” value = “(.+?)”&gt;<br>模板：$1$<br>readme.txt在需要引用的地方可以通过：${file}进行使用。</p>
</blockquote>
<h4 id="2、提取多个字符串："><a href="#2、提取多个字符串：" class="headerlink" title="2、提取多个字符串："></a>2、提取多个字符串：</h4><blockquote>
<p>假设我们想要匹配Web页面的如下部分：name = “file.name” value = “readme.txt”&gt;并要提取file.name和readme.txt。一个合适的正则表达式是：name = “(.+?)” value = “(.+?)”。这样就会创建2个组，分别用于$1$和$2$。我们可以这么写：</p>
</blockquote>
<blockquote>
<p>引用名称：file<br>正则表达式：name = “(.+?)” value = “(.+?)”<br>模板：$1$$2$<br>如下变量的值将会被设定为：<br>file ： file.namereadme.txt<br>file_g0 ： name = “file.name” value = “readme.txt”<br>file_g1 ： file.name<br>file_g2 ： readme.txt</p>
</blockquote>
<blockquote>
<p>在需要引用的地方可以通过：${file}, ${file_g0},{file_g1},{file_g2}进行使用。</p>
</blockquote>
<h4 id="3、正则表达式中有转义符（例如：-），需要进行转义："><a href="#3、正则表达式中有转义符（例如：-），需要进行转义：" class="headerlink" title="3、正则表达式中有转义符（例如： \  ?），需要进行转义："></a>3、正则表达式中有转义符（例如： \  ?），需要进行转义：</h4><blockquote>
<p>例如：id?test&quot;:”1234” ，我们想要匹配出1234。</p>
</blockquote>
<blockquote>
<p>一个合适的正则表达式是： id?test\“:”(.+?)”</p>
</blockquote>
<h4 id="4、从消息头（header）提取token"><a href="#4、从消息头（header）提取token" class="headerlink" title="4、从消息头（header）提取token:"></a>4、从消息头（header）提取token:</h4><p><img src="/.kim//%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%8F%90%E5%8F%96%E5%99%A8.png" alt="正则表达式提取器"></p>
]]></content>
      <categories>
        <category>JMeter</category>
      </categories>
      <tags>
        <tag>JMeter</tag>
      </tags>
  </entry>
  <entry>
    <title>JMeter(三)_脚本录制之基于HTTP代理服务器</title>
    <url>/2020/02/25/JMeter-%E4%B8%89-%E8%84%9A%E6%9C%AC%E5%BD%95%E5%88%B6%E4%B9%8B%E5%9F%BA%E4%BA%8EHTTP%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<h1 id="一、添加录制控制器"><a href="#一、添加录制控制器" class="headerlink" title="一、添加录制控制器"></a>一、添加录制控制器</h1><p>启动jmeter：在测试计划中添加线程组，线程组中添加逻辑控制器→录制控制器</p>
<h1 id="二、添加HTTP代理服务器"><a href="#二、添加HTTP代理服务器" class="headerlink" title="二、添加HTTP代理服务器"></a>二、添加HTTP代理服务器</h1><p>工作台：添加非测试元件→HTTP代理服务器</p>
<h1 id="三、配置代理服务器"><a href="#三、配置代理服务器" class="headerlink" title="三、配置代理服务器"></a>三、配置代理服务器</h1><p>服务器的配置，可以根据下面的代理服务器详细说明，根据需要配置不同代理模式。<br><img src="/.kim//WX20200225-165933@2x.png" alt="HTTP代理服务器"></p>
<h2 id="代理服务器说明"><a href="#代理服务器说明" class="headerlink" title="代理服务器说明"></a>代理服务器说明</h2><p>1）名称：代理服务器名称，可以自定义<br>2）注释：对此代理服务器的说明，可自定义，默认为空<br>3）Global Settings</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">端口：JMeter代理服务器端口，需要检查端口是否被占用</span><br><span class="line">HTTPS Domains：https协议要监听的域名，如访问：https:<span class="regexp">//</span>api.xiaoyuzhoufm.com/</span><br></pre></td></tr></table></figure>
<p>4）Test plan content</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">目标控制器：下拉选项，表明在哪个模块下面保存录制的请求</span><br><span class="line">分组：下拉框；对录制的请求按照一定方式进行进行分组，一般默认使用【不对样本分组】即可</span><br><span class="line">记录http信息头、添加断言、Regex matching：勾选框；记录每个请求的request <span class="selector-tag">header</span>、断言、正则表达式匹配等，录制一般使用默认勾选就行</span><br></pre></td></tr></table></figure>
<p>5）HTTP Sampler settings</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">A）<span class="keyword">Type</span>：http采样器的<span class="keyword">type</span>类型，默认为空</span><br><span class="line"> B）Prefix：对每个录制的http请求的前缀命名，默认为空，则录制的请求会按照数字递增的方式进行命名，如：<span class="number">0</span>，<span class="number">1</span>，<span class="number">2</span>......</span><br><span class="line">C）自动重定向：勾选框；表示请求是否自动重定向</span><br><span class="line">D）跟随重定向：勾选框；表示请求是否跟随重定向</span><br><span class="line">E）<span class="keyword">User</span> <span class="title">KeepAlive</span>：勾选框；表示此http请求的TCP链接是否保持不中断</span><br><span class="line">F）从HTML文件获取所有内涵的资源：勾选框，表示是否获取html文件中的资源信息，录制时一般默认不勾选</span><br></pre></td></tr></table></figure>
<p>6）Content-Type filter</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">A</span>）Include：<span class="attribute">Content</span>-Type的白名单，表示那些<span class="attribute">Content</span>-Type可以通过</span><br><span class="line"><span class="selector-tag">B</span>）Exclude：<span class="attribute">Content</span>-Type黑名单，表示那些<span class="attribute">Content</span>-Type被拒绝</span><br></pre></td></tr></table></figure>
<p>7）包含模式：表示哪些请求信息会被录制，如：*.html<br>8）排除模式：表示那些请求信息不会被录制，可点击Add suggested Excludes使用默认排除方式，<br>包含模式&amp;排除模式 就是我们需要的和我们不需要的。一般情况下，我们只需要排除我们不需要的。<br>格式：</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"> .*\<span class="string">.css</span> 排除css文件，<span class="string">&quot; .* &quot;</span> 匹配任意字符的意思 <span class="string">&quot; \ &quot;</span>是转义的意思</span><br><span class="line"></span><br><span class="line"> .*\<span class="string">.js</span> 排除js文件</span><br><span class="line"></span><br><span class="line">.*\<span class="string">.png</span> 排除png文件</span><br></pre></td></tr></table></figure>
<p>9）Notify Child Listeners of filtered samplers：是否唤起过滤取样器的后台监听，默认勾选即可</p>
<h1 id="四、本地设置代理"><a href="#四、本地设置代理" class="headerlink" title="四、本地设置代理"></a>四、本地设置代理</h1><p>浏览器或手机设置为电脑代理</p>
<h1 id="五、SSL问题"><a href="#五、SSL问题" class="headerlink" title="五、SSL问题"></a>五、SSL问题</h1><p>如果在录制过程中提示：SSL问题 ，那就需要安装SSL安全证书。<br><img src="/.kim//WX20200225-171508@2x.png" alt="SSL"><br>1）生成证书，在点击HTTP代理服务器的“启动”按钮后，弹出提示框：提示我们，CA证书已经创建，在jmeter的bin目录下<br> 2）安装证书（jmeter） 选择菜单栏“选项—SSL管理器”，再打开的对话框中选择bin目录下的证书<br>3）手机需要安装<code>apache-jmeter-5.1.1/bin</code>目录下<code>ApacheJMeterTemporaryRootCA.crt</code>证书</p>
<h1 id="六、脚本录制"><a href="#六、脚本录制" class="headerlink" title="六、脚本录制"></a>六、脚本录制</h1><p>代理服务器配置后之后，点击启动，代理服务器就会开始记录所接受的http请求</p>
]]></content>
      <categories>
        <category>JMeter</category>
      </categories>
      <tags>
        <tag>JMeter</tag>
      </tags>
  </entry>
  <entry>
    <title>JMeter(九)_定时器</title>
    <url>/2020/03/10/JMeter-%E4%B9%9D-%E5%AE%9A%E6%97%B6%E5%99%A8/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在默认情况下，jmeter 发送每个请求之间是没有延时的，如果采用默认方式，如果线程数足够大，瞬间就会将服务器压死。再则在实际的业务过程中，请求之间是有一定时间的停顿的所以在请求之间设置合理的延时是必须的，也是更接近用户真实业务情况。在 jmeter 中，定时器组件提供了系列不同类型的延时控制。合理使用定时器组件，能让你的性能测试更接近真实，更能挖掘出系统的瓶颈和评估系统的性能指标。</p>
<h2 id="定时器类型"><a href="#定时器类型" class="headerlink" title="定时器类型"></a>定时器类型</h2><p><img src="/.kim//%E5%AE%9A%E6%97%B6%E5%99%A8%E7%B1%BB%E5%9E%8B.png" alt="定时器类型"></p>
<h2 id="1、固定定时器（Constant-Timer）"><a href="#1、固定定时器（Constant-Timer）" class="headerlink" title="1、固定定时器（Constant Timer）"></a>1、固定定时器（Constant Timer）</h2><p>这是最简单的一种定时器，也是新手最常用的一种方式。下面我们看下其具体设置：<br><img src="/.kim//%E5%9B%BA%E5%AE%9A%E5%AE%9A%E6%97%B6%E5%99%A8.png" alt="固定定时器"><br>作用：通过ThreadDelay设定每个线程请求之前的等待时间（单位为毫秒）。注意：固定定时是有作用域的，放到线程组下其作用域是所有请求都会延迟固定器设置的时间，如果放到请求内，作用域是单个请求延迟时间（常用）。</p>
<h2 id="2、高斯随机定时器（Gaussian-Random-Timer）"><a href="#2、高斯随机定时器（Gaussian-Random-Timer）" class="headerlink" title="2、高斯随机定时器（Gaussian Random Timer）"></a>2、高斯随机定时器（Gaussian Random Timer）</h2><p>高斯随机定时器，又可以称作正态分布随机定时器，该定时器可以设置在两个请求间随机延时时长。且总的延时是高斯分布(正态分布)的总和（均值：0.0、标准差 1.0）。在使用时须指定偏差延时值和偏移值。。下面我们看下其具体设置：<br><img src="/.kim//%E9%AB%98%E6%96%AF%E9%9A%8F%E6%9C%BA%E5%AE%9A%E6%97%B6%E5%99%A8.png" alt="高斯随机定时器"></p>
<p>例如在访问百度首页，然后输入关键词进行搜索，受网络、人等各种因素影响，有的人打开首页后 3s 后则进行了搜索，有时则是 10s或更多时间，在正常情况下，打开百度然后进行搜索，假设用户间隔在 3s-10s 之间，从统计学来看，这个间隔时间可能是一个正态分布或接近正态分布。而不是一个固定的常量。从笔者在日常实践中，也更推荐使用该定时器。能更接近模拟用户实际情况。</p>
<h2 id="3、同步定时器（Synchronizing-Timer）"><a href="#3、同步定时器（Synchronizing-Timer）" class="headerlink" title="3、同步定时器（Synchronizing Timer）"></a>3、同步定时器（Synchronizing Timer）</h2><p><img src="/.kim//%E5%90%8C%E6%AD%A5%E5%AE%9A%E6%97%B6%E5%99%A8.png" alt="同步定时器"></p>
<p>用来设置集合点，其作用是：阻塞线程，直到指定的线程数量到达后，再一起释放，可以瞬间产生很大的压力<br>（1）Number of Simulated Users to Group by：模拟用户的数量，即指定同时释放的线程数数量，若设置为0，等于设置为线程组中的线程数量；<br>（2）Timeout in milliseconds：超时时间，即超时多少毫秒后同时释放指定的线程数；如果设置为0，该定时器将会等待线程数达到了设置的线程数才释放，</p>
<p>若没有达到设置的线程数会一直死等。如果大于0，那么如果超过Timeout inmilliseconds中设置的最大等待时间后还没达到设置的线程数，Timer将不再等待，释放已到达的线程。默认为0<br>同步定时器（Synchronizing Timer）的超时时间设置要求：超时时间 &gt; 请求集合数量 * 1000 / (线程数 / 线程加载时间)</p>
<p>场景应用：0点秒杀</p>
<h2 id="4、统一随机定时器（Uniform-Random-Timer）"><a href="#4、统一随机定时器（Uniform-Random-Timer）" class="headerlink" title="4、统一随机定时器（Uniform Random Timer）"></a>4、统一随机定时器（Uniform Random Timer）</h2><p>该定时器可以在请求之间设置一个随机延时，每个随机延时有相同的发生概率。<br>总延迟时间=指定范围内的随机时间+固定延迟时间<br><img src="/.kim//%E7%BB%9F%E4%B8%80%E9%9A%8F%E6%9C%BA%E5%AE%9A%E6%97%B6%E5%99%A8.png" alt="统一随机定时器"></p>
<h2 id="5、泊松随机定时器（Poisson-Random-Timer）"><a href="#5、泊松随机定时器（Poisson-Random-Timer）" class="headerlink" title="5、泊松随机定时器（Poisson Random Timer）"></a>5、泊松随机定时器（Poisson Random Timer）</h2><p>类似高斯随机定时器，只是其随机延时值发生在一个特定的值。总的延时值呈现泊松分布。<br><img src="/.kim//%E6%B3%8A%E6%9D%BE%E9%9A%8F%E6%9C%BA%E5%AE%9A%E6%97%B6%E5%99%A8.png" alt="泊松随机定时器"></p>
<p>作用：这个定时器在每个线程请求之前按随机的时间停顿，总的延迟就是泊松分布值和偏移值之和。<br>上面表示暂停时间会分布在100到400毫秒之间：<br>（1）Lambda(in milliseconds):兰布达值<br>（2）Constant Delay Offset(in milliseconds):暂停的毫秒数减去随机延迟的毫秒数</p>
<h2 id="6、常数吞吐量定时器（Constant-Throughput-Timer）"><a href="#6、常数吞吐量定时器（Constant-Throughput-Timer）" class="headerlink" title="6、常数吞吐量定时器（Constant Throughput Timer）"></a>6、常数吞吐量定时器（Constant Throughput Timer）</h2><p>通过控制每分钟请求数（即控制吞吐的方式）来控制是否进行延时暂停。<br>例如，当我们需要使服务端长期处于一定的压力下时，可以通过该定时器来控制吞吐。<br>注意：吞吐值可以是常量，也可以使用函数来动态生成，已达成更灵活的使用，满足不同的压力场景。<br><img src="/.kim//%E5%B8%B8%E6%95%B0%E5%90%9E%E5%90%90%E9%87%8F%E5%AE%9A%E6%97%B6%E5%99%A8.png" alt="常数吞吐量定时器"></p>
<p>作用: 按指定的吞吐量执行，以每分钟为单位。计算吞吐量依据是最后一次线程的执行时延。</p>
<p><strong>Target throughput（in samples per minute）：</strong>目标吞吐量。注意这里是每分钟发送的请求数，可以选择作用的线程：当前线程、当前线程组、所有线程组等，具体含义如下：<br>**this thread only: *<em>设置每个线程的吞吐量。总的吞吐量=线程数</em>该值。<br><strong>all active threads in current thread group：</strong>吞吐量被分摊到当前线程组所有的活动线程上。每个线程将根据上次运行时间延迟。<br><strong>all active threads：</strong>吞吐量被分配到所有线程组的所有活动线程的总吞吐量。每个线程将根据上次运行时间延迟。在这种情况下，每个线程组需要一个具有相同设置的固定吞吐量定时器。（不常用）<br><strong>all active threads in current thread group (shared)：</strong>同上，但是每个线程是根据组中的线程的上一次运行时间来延迟。相当于线程组组内排队。（不常用）<br><strong>all active threads (shared)：</strong>同上，但每个线程是根据线程的上次运行时间来延迟。相当于让所有线程组整体排队。（不常用）</p>
<h2 id="7、准确的吞吐量定时器（Precise-Throughput-Timer）"><a href="#7、准确的吞吐量定时器（Precise-Throughput-Timer）" class="headerlink" title="7、准确的吞吐量定时器（Precise Throughput Timer）"></a>7、准确的吞吐量定时器（Precise Throughput Timer）</h2><p><img src="/.kim//%E5%87%86%E7%A1%AE%E7%9A%84%E5%90%9E%E5%90%90%E9%87%8F%E5%AE%9A%E6%97%B6%E5%99%A8.png" alt="准确的吞吐量定时器"></p>
<p>Target Throught：目标吞吐量<br>Throught Period：表示在多长时间内发送Target Throught指定的请求数(以秒为单位)<br>Test Druation：指定测试运行时间(以秒为单位)<br>Number of threads in the bath：用来设置集合点，等到指定个数的请求后并发执行其它参数默认即可</p>
<h2 id="8、JSr-R223-Timer-和-BeanShell-Timer"><a href="#8、JSr-R223-Timer-和-BeanShell-Timer" class="headerlink" title="8、JSr R223 Timer   和  BeanShell Timer"></a>8、JSr R223 Timer   和  BeanShell Timer</h2><p>这两种定时器就不细说了，简单的说就是提供了脚本方式来进行控制，是更为灵活的方式。一般情况下，大家是不会用的。当然有兴趣的，可以去研究下，增强理解。</p>
<p>总结<br>本文就各种定时器进行了介绍，并大致介绍了其可能的应用场景。不管是哪种定时器，都需要深入理解业务的情况下，统筹规划使用。以更深入的发挥其作用，模拟好真实应用场景，更好的挖掘性能瓶颈和评估目标服务的性能情况。</p>
]]></content>
      <categories>
        <category>JMeter</category>
      </categories>
      <tags>
        <tag>JMeter</tag>
      </tags>
  </entry>
  <entry>
    <title>JMeter(五)_元件的作用域与执行顺序</title>
    <url>/2020/02/27/JMeter-%E4%BA%94-%E5%85%83%E4%BB%B6%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%8E%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/</url>
    <content><![CDATA[<p>JMeter可以通过鼠标拖拽来随意改变元件之间的顺序以及元件的父子关系，那么随着它们的顺序和所在的域不同，它们在执行的时候，也会有很多不同。</p>
<p>JMeter的test plan通过图形化的方式表达脚本，域代码方式的脚本不同，图形方式表达的脚本中无法使用变量和函数等描述元件的作用域，因此jmeter主要依靠test plan中元件的相对位置、父子关系以及元件本身的类型来决定test plan中各元件的执行顺序；原件在test plan中的位置不同，可能导致该元件的行为有很大差异。</p>
<h2 id="元件的作用域"><a href="#元件的作用域" class="headerlink" title="元件的作用域"></a>元件的作用域</h2><p>jmeter中共有8类可被执行的元件（test plan和thread group不属于元件），其中，sampler（取样器）是不与其他元件发生交互的作用的元件，Logic Controller（逻辑控制器）只对其子节点的sampler有效，而其他元件需要与sampler等元件交互。</p>
<ul>
<li>Config Elements（配置元件）：影响其范围内的所有元件</li>
<li>Pre-porcessors（前置处理器）：在其作用范围内的每一个sampler元件之前执行</li>
<li>Timer（定时器）：对其作用范围内的每一个sampler有效</li>
<li>Post-porcessors（后置处理器）：在其作用范围内的每一个sampler元件之后执行</li>
<li>Assirtions（断言）：对其作用范围内的每一个sampler元件执行后的结果执行校验</li>
<li>Listener（监听器）：收集其作用范围内的每一个sampler元件的信息并且呈现出来</li>
</ul>
<p>在jmeter中，元件的作用域是靠test plan的树形结构中元件的父子关系来确定的，其原则如下：</p>
<ul>
<li>sampler不与其他元件相互作用，因此不存在作用域问题</li>
<li>Logic Controller只对其子节点中的sampler和Logic Controller作用</li>
<li>除sampler和Logic Controller外的其他元件，如果是某个sampler的子节点，则该元件仅对其父节点作用</li>
<li>除sampler和Logic Controller外的其他元件，如果其父节点不是sampler，则其作用域是该元件父节点下的其他所有后带节点（包括子节点，子节点的子节点等）</li>
</ul>
<h2 id="元件的执行顺序"><a href="#元件的执行顺序" class="headerlink" title="元件的执行顺序"></a>元件的执行顺序</h2><p>在同一作用域范围内，test plan中的元件按照以下顺序执行：</p>
<ul>
<li><p>Config Elements（配置元件）</p>
</li>
<li><p>Pre-porcessors（前置处理器）</p>
</li>
<li><p>Timer（定时器）</p>
</li>
<li><p>Sampler（取样器）</p>
</li>
<li><p>Post-porcessors（后置处理器）（除非Sampler得到的返回结果为空）</p>
</li>
<li><p>Assirtions（断言）（除非Sampler得到的返回结果为空）</p>
</li>
<li><p>Listener（监听器）（除非Sampler得到的返回结果为空）</p>
<p>  注意:Pre-porcessors、Post-porcessors和Assirtions等元件仅对Sampler作用，如在它们作用域内没有任何Sampler，则不会被执行；<br>  如果在同一作用域范围内有多个同一类型的元件，则这些元件按照它们在test plan中的上下顺序依次执行。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>JMeter</category>
      </categories>
      <tags>
        <tag>JMeter</tag>
      </tags>
  </entry>
  <entry>
    <title>JMeter(二)_基础介绍</title>
    <url>/2020/02/25/JMeter-%E4%BA%8C-%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h2 id="测试计划（test-plan）"><a href="#测试计划（test-plan）" class="headerlink" title="测试计划（test plan）"></a>测试计划（test plan）</h2><p>描述一个性能测试，包含本次测试所有相关功能<br><img src="/.kim//WX20200225-155506@2x.png" alt="测试计划"></p>
<h2 id="threads（users）线程"><a href="#threads（users）线程" class="headerlink" title="threads（users）线程"></a>threads（users）线程</h2><p><img src="/.kim//WX20200225-155944@2x.png" alt="线程组"><br>Setup thread group：<br>一种特殊类型的线程，可用于执行预测试操作。即执行测试前进行定期线程组的执行</p>
<p>Teardown thread group：<br>一种特殊类型的线程，可用于执行测试后动作。即执行测试结束后执行定期的线程组</p>
<p>Thread group：<br>通常添加使用的线程，一般一个线程组可看做一个虚拟用户组，其中每个线程为一个虚拟用户</p>
<h2 id="测试片段（test-fragment）"><a href="#测试片段（test-fragment）" class="headerlink" title="测试片段（test fragment）"></a>测试片段（test fragment）</h2><p>应用在控制器上的一个特殊线程组，与线程组处于同一层级，必须与Include Controller或模块控制器一起使用才被执行。<br>应用场景：<br>1、当jmeter脚本非常复杂的时候，可以通过测试片段分模块管理用例<br>2、当jmeter脚本由多个测试人员共同完成，通过测试片段分人分模块管理用例</p>
<h2 id="取样器（Sampler）"><a href="#取样器（Sampler）" class="headerlink" title="取样器（Sampler）"></a>取样器（Sampler）</h2><p><img src="/.kim//WX20200225-160607@2x.png" alt="取样器"><br>是性能测试中向服务器发送请求，记录响应信息，记录响应时间的最小单元，JMeter 原生支持多种不同的sampler<br>如 HTTP Request Sampler 、 FTP  Request Sampler 、TCP  Request Sampler 、JDBC Request Sampler 等<br>每一种不同类型的 sampler 可以根据设置的参数向服务器发出不同类型的请求。<br>Java Request Sampler 和 Beanshell Request Sampler 是两种特殊的可定制的 Sampler （暂不讨论）</p>
<h2 id="逻辑控制器（Logic-Controller）"><a href="#逻辑控制器（Logic-Controller）" class="headerlink" title="逻辑控制器（Logic Controller）"></a>逻辑控制器（Logic Controller）</h2><p><img src="/.kim//WX20200225-160636@2x.png" alt="逻辑控制器"><br>包含两类原件：<br>一类是控制Test Plan中Sampler节点发送请求的逻辑顺序控制器，常用的有：If Controller、Swith Controller、Loop Controller、Random Controller等<br>另一类是用来组织和控制Sampler节点的，如Transaction Controller、Throughput Controller等</p>
<h2 id="监听器（Listener）"><a href="#监听器（Listener）" class="headerlink" title="监听器（Listener）"></a>监听器（Listener）</h2><p><img src="/.kim//WX20200225-160723@2x.png" alt="监听器"><br>对测试结果进行处理和可视化展示的一系列组件，常用的有图形结果、查看结果树、聚合报告等<br>以上的五类原件就可以构成一个简单的性能测试脚本</p>
<p>聚合报告<br><strong>Label：</strong>每个 JMeter 的 element（例如 HTTP Request）都有一个 Name 属性，这里显示的就是 Name 属性的值<br><strong>Samples：</strong>表示你这次测试中一共发出了多少个请求，如果模拟10个用户，每个用户迭代10次，那么这里显示100<br><strong>Average：</strong>平均响应时间——默认情况下是单个 Request 的平均响应时间，当使用了 Transaction Controller 时，也可以以Transaction 为单位显示平均响应时间<br><strong>Median：</strong>中位数，也就是 50％ 用户的响应时间<br><strong>90% Line：</strong>90％ 用户的响应时间<br><strong>Min：</strong>最小响应时间<br><strong>Max：</strong>最大响应时间<br><strong>Error%：</strong>本次测试中出现错误的请求的数量/请求的总数<br><strong>Throughput：</strong>吞吐量——默认情况下表示每秒完成的请求数（Request per Second），当使用了 Transaction Controller 时，也可以表示类似 LoadRunner 的 Transaction per Second 数<br><strong>KB/Sec：</strong>每秒从服务器端接收到的数据量</p>
<h2 id="配置元件（Config-Element）"><a href="#配置元件（Config-Element）" class="headerlink" title="配置元件（Config Element）"></a>配置元件（Config Element）</h2><p><img src="/.kim//WX20200225-160737@2x.png" alt="配置元件"><br>用于提供对静态数据配置的支持。CSV Date Set Config可以将本地数据文件形成数据池（Date Pool），而对应于HTTP Request Configuration和TCP Request Sample等类型的Configuration元件则可以修改这些Sample的默认数据等</p>
<h2 id="定时器（Time）"><a href="#定时器（Time）" class="headerlink" title="定时器（Time）"></a>定时器（Time）</h2><p><img src="/.kim//WX20200225-160849@2x.png" alt="定时器"><br>用于操作之间设置等待时间，等待时间使性能测试中常用的控制客户端QPS的手段，jmeter定义了Constant Times、</p>
<p>Constant Throughput Times、Guass Ramdon Times等不同类型的Times</p>
<h2 id="断言（Assertions）"><a href="#断言（Assertions）" class="headerlink" title="断言（Assertions）"></a>断言（Assertions）</h2><p><img src="/.kim//WX20200225-161013@2x.png" alt="断言"><br>用于检查测试中得到的响应数据等是否符合预期，Assertions一般用来设置检查点，用以保证性能测试过程中的数据交互与预期一致</p>
<h2 id="前置处理器（Pre-Processors）"><a href="#前置处理器（Pre-Processors）" class="headerlink" title="前置处理器（Pre Processors）"></a>前置处理器（Pre Processors）</h2><p><img src="/.kim//WX20200225-160912@2x.png" alt="前置处理器"><br>用于在实际请求发出之前对即将发出的请求进行特殊处理。<br>例如：当URL中有sessionID一类的session信息时，可以通过该处理器填充发出请求实际的sessionID。</p>
<h2 id="后置处理器（Pre-Processors）"><a href="#后置处理器（Pre-Processors）" class="headerlink" title="后置处理器（Pre Processors）"></a>后置处理器（Pre Processors）</h2><p><img src="/.kim//WX20200225-160927@2x.png" alt="后置处理器"><br>用于对Sampler发出请求后得到的服务器响应进行处理。一般用来提取响应中的特定数据<br>例如：正则表达式，用于提取响应数据中匹配某正则表达式的数据段，</p>
]]></content>
      <categories>
        <category>JMeter</category>
      </categories>
      <tags>
        <tag>JMeter</tag>
      </tags>
  </entry>
  <entry>
    <title>JMeter(八)_函数助手大全</title>
    <url>/2020/02/28/JMeter-%E5%85%AB-%E5%87%BD%E6%95%B0%E5%8A%A9%E6%89%8B%E5%A4%A7%E5%85%A8/</url>
    <content><![CDATA[<p><a href="https://jmeter.apache.org/usermanual/functions.html">官方文档</a></p>
<h1 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h1><h2 id="BeanShell"><a href="#BeanShell" class="headerlink" title="__BeanShell"></a>__BeanShell</h2><ul>
<li><p>入参：BeanShell语法的程序语句或者Bean Shell脚本文件</p>
</li>
<li><p>示例：</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">&#123;__BeanShell(123*456,)&#125;：返回56088；</span></span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;__BeanShell(<span class="built_in">source</span>(<span class="string">&quot;function.bsh&quot;</span>,))&#125;：执行在function.bsh中的脚本；</span></span><br></pre></td></tr></table></figure>
<p><img src="/.kim//BeanShell.png" alt="BeanShell"></p>
</li>
</ul>
<h2 id="Random"><a href="#Random" class="headerlink" title="__Random"></a>__Random</h2><ul>
<li>作用：生成指定范围内的随机数</li>
<li>入参：左右范围；变量名</li>
<li>示例：</li>
</ul>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="variable">$&#123;__Random(1,20,random_num)&#125;</span></span><br></pre></td></tr></table></figure>
<p><img src="/.kim//Random.png" alt="__Random"></p>
<h2 id="RandomDate"><a href="#RandomDate" class="headerlink" title="__RandomDate"></a>__RandomDate</h2><ul>
<li>作用：生成指定范围内的日期</li>
<li>入参：日期格式；左右范围；语言；变量名</li>
<li>示例：</li>
</ul>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line">$&#123;__RandomDate(,,<span class="number">2050</span>-<span class="number">07</span>-<span class="number">08</span>,,)&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/.kim//RandomDate.png" alt="__RandomDate"></p>
<h2 id="RandomFromMultipleVars"><a href="#RandomFromMultipleVars" class="headerlink" title="__RandomFromMultipleVars"></a>__RandomFromMultipleVars</h2><p>首先要创建用户定义的变量name1,name2,areaCode</p>
<ul>
<li>作用：在设定的几个值中随机使用其一，如下在name1、nema2、areaCode中随机使用</li>
<li>入参：多个值，使用|分隔；变量名</li>
<li>示例：</li>
</ul>
<figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">$&#123;__RandomFromMultipleVars(name1|<span class="type">name2</span>|<span class="type">areaCode</span>,name)&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/.kim//RandomFromMultipleVars.png" alt="__RandomFromMultipleVars"></p>
<h2 id="RandomString"><a href="#RandomString" class="headerlink" title="__RandomString"></a>__RandomString</h2><ul>
<li>作用：生成指定长度的字符串</li>
<li>入参：字符串长度；可选字符串；变量名</li>
<li>示例：</li>
</ul>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="variable">$&#123;__RandomString(2,我爱你祖国,random_char)&#125;</span></span><br></pre></td></tr></table></figure>
<p><img src="/.kim//RandomString.png" alt="__RandomString"></p>
<h2 id="UUID"><a href="#UUID" class="headerlink" title="__UUID"></a>__UUID</h2><ul>
<li>作用：获取UUID</li>
<li>入参：无</li>
<li>示例：</li>
</ul>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="variable">$&#123;__UUID&#125;</span></span><br></pre></td></tr></table></figure>
<p><img src="/.kim//UUID.png" alt="__UUID"></p>
<h2 id="time"><a href="#time" class="headerlink" title="__time"></a>__time</h2><ul>
<li>作用：返回当前时间，可指定返回格式，由SimpleDateFormat类处理函数格式<ul>
<li>年：yyyy</li>
<li>月：MM</li>
<li>日：dd</li>
<li>时：hh</li>
<li>分：mm</li>
<li>秒：ss</li>
</ul>
</li>
<li>入参：返回格式；变量名</li>
<li>示例：</li>
</ul>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">$&#123;__time(yyyy-MM-<span class="built_in">dd</span> hh:mm:<span class="built_in">ss</span>,)&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/.kim//time.png" alt="__time"></p>
<h2 id="timeShift"><a href="#timeShift" class="headerlink" title="__timeShift"></a>__timeShift</h2><ul>
<li>作用：</li>
<li>入参：<ul>
<li>格式：创建日期的格式。如果该值未被传递，则以毫秒为单位创建日期。</li>
<li>日期：日期值</li>
<li>移位：从日期参数的值中添加或减去多少天，几小时或几分钟<ul>
<li>“PT20.345S”解析为“20.345秒”</li>
<li>“PT15M”解析为“15分钟”</li>
<li>“PT10H”解析为“10小时”</li>
<li>“P2D”解析为“2天”</li>
<li>“P2DT3H4M”解析为“2天，3小时和4分钟”</li>
<li>“P-6H3M”解析为“-6小时+3分钟”</li>
<li>“-P6H3M”解析为“-6小时-3分钟”</li>
<li>“-P-6H + 3M”解析为“+6小时和-3分钟”</li>
</ul>
</li>
<li>区域设置：设置创建日期的显示语言</li>
<li>变量名</li>
</ul>
</li>
<li>示例：</li>
</ul>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line"><span class="title">$&#123;__timeShift(yyyy-MM-dd HH:mm:</span>ss,,P2D,,c)&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/.kim//timeShift.png" alt="__timeShift"></p>
<p>##__counter</p>
<ul>
<li>作用：作为一个计数器使用，支持多线程（多用户）</li>
<li>入参：计数变量i，是否为线程计数器True/False</li>
<li>示例</li>
</ul>
<figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line">$&#123;<span class="variable">__counter</span>(<span class="literal">FALSE</span>,<span class="built_in">count</span>)&#125;; 全局计数器</span><br><span class="line">$&#123;<span class="variable">__counter</span>(<span class="literal">TRUE</span>,<span class="built_in">count</span>)&#125;; 每个用户有自己的计数器</span><br></pre></td></tr></table></figure>
<p><img src="/.kim//counter.png" alt="__counter"></p>
<h2 id="intSum"><a href="#intSum" class="headerlink" title="__intSum"></a>__intSum</h2><ul>
<li>作用：整数求和，多个数字之间用逗号分隔</li>
<li>入参：第一个整数；第二个及之后的整数；变量名</li>
<li>示例：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">&#123;__intSum(1,2,<span class="built_in">test</span>)&#125;</span></span><br></pre></td></tr></table></figure>
<p><img src="/.kim//intSum.png" alt="__intSum"></p>
<h2 id="longSum"><a href="#longSum" class="headerlink" title="__longSum"></a>__longSum</h2><ul>
<li>作用：计算长整型的和</li>
<li>入参：整数</li>
<li>示例</li>
</ul>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="symbol">$</span>&#123;__longSum(<span class="number">1</span>,<span class="number">2</span>],<span class="keyword">sum</span>)&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/.kim//longSum.png" alt="__longSum"></p>
<h2 id="CSVRead"><a href="#CSVRead" class="headerlink" title="__CSVRead"></a>__CSVRead</h2><ul>
<li>作用：从文件读取指定列的值（读取固定值/读取动态值/使用文件别名）</li>
<li>入参：文件路径；读取方式；</li>
<li>示例</li>
</ul>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">$&#123;__CSVRead(<span class="regexp">/Users/</span>vic<span class="regexp">/Downloads/</span>Jmeter ALY/phone_numbers.csv,<span class="number">0</span>)&#125;;读取第一列的值</span><br><span class="line">$&#123;__CSVRead(<span class="regexp">/Users/</span>vic<span class="regexp">/Downloads/</span>Jmeter ALY/phone_numbers.csv,<span class="keyword">next</span>())&#125;; 每次读取下一次的值，配合第一条使用，否则不知道从哪里开始</span><br><span class="line"></span><br><span class="line">$&#123;__CSVRead(<span class="regexp">/Users/</span>vic<span class="regexp">/Downloads/</span>Jmeter ALY/phone_numbers.csv,*user_info)&#125;;使用别名，然后通过以下方法获取数据</span><br><span class="line">$&#123;__CSVRead(*user_info, <span class="number">1</span>)&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/.kim//CSVRead.png" alt="__CSVRead"></p>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1>]]></content>
      <categories>
        <category>JMeter</category>
      </categories>
      <tags>
        <tag>JMeter</tag>
      </tags>
  </entry>
  <entry>
    <title>JMeter(六)_参数化</title>
    <url>/2020/02/27/JMeter-%E5%85%AD-%E5%8F%82%E6%95%B0%E5%8C%96/</url>
    <content><![CDATA[<h1 id="一、JMeter参数化简介"><a href="#一、JMeter参数化简介" class="headerlink" title="一、JMeter参数化简介"></a>一、JMeter参数化简介</h1><h2 id="JMeter参数化的概念"><a href="#JMeter参数化的概念" class="headerlink" title="JMeter参数化的概念"></a>JMeter参数化的概念</h2><p>当使用JMeter进行测试时，测试数据的准备是一项重要的工作。若要求每次迭代的数据不一样时，则需进行参数化，然后从参数化的文件中来读取测试数据。</p>
<blockquote>
<p>参数化：是自动化测试脚本的一种常用技巧，可将脚本中的某些输入使用参数来代替，如登录时利用GET/POST请求方式传递参数的场景，在脚本运行时指定参数的取值范围和规则。<br>脚本在运行时，根据需要选取不同的参数值作为输入，该方式称为数据驱动测试（Data Driven Test），而参数的取值范围被称为数据池（Data Pool）。</p>
</blockquote>
<h2 id="JMeter参数化方式之使用场景对比"><a href="#JMeter参数化方式之使用场景对比" class="headerlink" title="JMeter参数化方式之使用场景对比"></a>JMeter参数化方式之使用场景对比</h2><table>
<thead>
<tr>
<th></th>
<th>参数化方式</th>
<th><span class="Apple-tab-span" style="white-space:pre"></span>使用场景</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>User Parameters</td>
<td>适用于参数取值范围很小的时候使用</td>
</tr>
<tr>
<td>2</td>
<td>CSV Data Set Config</td>
<td>适用于参数取值范围较大的时候使用，该方法具有更大的灵活性</td>
</tr>
<tr>
<td>3</td>
<td>User Defined Variables</td>
<td>一般用于Test Plan中不需要随请求迭代的参数设置，如：Host、Port Number</td>
</tr>
<tr>
<td>4</td>
<td>函数助手：_CSVRead</td>
<td>可作为其他参数化方式的补充项，如：随机数生成的函数${__Random(,,)}</td>
</tr>
</tbody></table>
<h1 id="二、JMeter参数化的4种主要方式-操作演练"><a href="#二、JMeter参数化的4种主要方式-操作演练" class="headerlink" title="二、JMeter参数化的4种主要方式-操作演练"></a>二、JMeter参数化的4种主要方式-操作演练</h1><h2 id="User-Parameters（用户参数）"><a href="#User-Parameters（用户参数）" class="headerlink" title="User Parameters（用户参数）"></a>User Parameters（用户参数）</h2><p>操作路径：HTTP请求–&gt;添加–&gt;前置处理器–&gt;用户参数<br>1）添加User Parameters功能模块<br><img src="/.kim//%E6%B7%BB%E5%8A%A0%E7%94%A8%E6%88%B7%E5%8F%82%E6%95%B0.png" alt="添加用户参数"><br>2）设置参数项、参数值<br><img src="/.kim//%E7%94%A8%E6%88%B7%E5%8F%82%E6%95%B0.png" alt="用户参数"><br>3）配置HTTP取样器界面的请求参数：${xxx}<br><img src="/.kim//HTTP%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE.png" alt="HTTP请求参数配置"><br>4）配置Thread Group<br>设置线程数=2，即2个虚拟用户数，对应User Parameters中设置的2个用户<br><img src="/.kim//%E7%BA%BF%E7%A8%8B%E6%95%B0.png" alt="线程数"></p>
<h2 id="CSV-Data-Set-Config（CSV数据配置）"><a href="#CSV-Data-Set-Config（CSV数据配置）" class="headerlink" title="CSV Data Set Config（CSV数据配置）"></a>CSV Data Set Config（CSV数据配置）</h2><p>操作路径：线程组–&gt;添加–&gt;配置元件–&gt;CSV Data Set Config<br>1）添加CSV Data Set Config模块<br><img src="/.kim//%E6%B7%BB%E5%8A%A0CSV%E6%95%B0%E6%8D%AE%E9%85%8D%E7%BD%AE.png" alt="添加CSV数据配置"><br>2）预先准备好要参数化的所有参数值（txt、csv文件）<br><img src="/.kim//%E5%8F%82%E6%95%B0%E6%96%87%E4%BB%B6.png" alt="参数文件"><br>3）配置CSV Data来源<br><img src="/.kim//CSV%E6%95%B0%E6%8D%AE%E9%85%8D%E7%BD%AE.png" alt="CSV数据配置"><br>4）设置HTTP取样器的请求参数：${xxx}<br><img src="/.kim//HTTP%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE.png" alt="HTTP请求参数配置"></p>
<h2 id="User-Defined-Variables（用户自定义变量）"><a href="#User-Defined-Variables（用户自定义变量）" class="headerlink" title="User Defined Variables（用户自定义变量）"></a>User Defined Variables（用户自定义变量）</h2><p>操作路径：线程组–&gt;添加–&gt;配置元件–&gt;用户自定义变量<br>1）添加User Defined Variables模块<br><img src="/.kim//%E6%B7%BB%E5%8A%A0%E7%94%A8%E6%88%B7%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8F%98%E9%87%8F.png" alt="添加用户自定义变量"><br>2）配置User Defined Variables界面中的参数及其值<br><img src="/.kim//%E7%94%A8%E6%88%B7%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8F%98%E9%87%8F.png" alt="用户自定义变量"><br>3）配置HTTP取样器中的请求参数<br><img src="/.kim//HTTP%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE2.png" alt="HTTP请求参数配置"></p>
<h2 id="函数助手"><a href="#函数助手" class="headerlink" title="函数助手"></a>函数助手</h2><p>操作路径：Tools–&gt;函数助手对话框<br>1）选择参数化所需的函数，配置函数<br><img src="/.kim//%E6%89%93%E5%BC%80%E5%87%BD%E6%95%B0%E5%AF%B9%E8%AF%9D%E5%8A%A9%E6%89%8B.png" alt="打开函数对话助手"><br><img src="/.kim//%E9%85%8D%E7%BD%AE%E5%87%BD%E6%95%B0.png" alt="配置函数"><br>2）配置HTTP取样器的请求参数<br><img src="/.kim//HTTP%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE3.png" alt="HTTP请求参数配置"></p>
]]></content>
      <categories>
        <category>JMeter</category>
      </categories>
      <tags>
        <tag>JMeter</tag>
      </tags>
  </entry>
  <entry>
    <title>JMeter(十)_断言</title>
    <url>/2020/03/10/JMeter-%E5%8D%81-%E6%96%AD%E8%A8%80/</url>
    <content><![CDATA[<p>用于检查测试中得到的响应数据等是否符合预期，用以保证性能测试过程中的数据交互与预期一致。</p>
<p>使用断言的方法：</p>
<p>△在选择的Sampler下添加对应的断言（因为不同类型的断言检查的内容不同）；配置好响应的检查内容（根据断言情况而定，有的断言控制面板不需要添加任何内容，如XML Assertion）。<br>△添加一个断言结果的监听器（从监听器中添加），通过“断言结果”可以看到是否通过断言；对于一次请求，如果通过的话，断言结果中只会打印一行请求的名称；<br>如果失败，则除了请求的名称外，还会有一行失败的原因（不同类型的断言，结果不同）。</p>
<p>PS：一个Sampler可以添加多个断言，根据你的检查需求来添加相应的断言，当Sampler下所有的断言都通过了，那么才算request成功。</p>
<h2 id="响应断言"><a href="#响应断言" class="headerlink" title="响应断言"></a>响应断言</h2><p>判断返回内容中的内容<br><strong>作用对象：</strong>响应报文中的所有对象<br><img src="/.kim//%E5%93%8D%E5%BA%94%E6%96%AD%E8%A8%80.png" alt="响应断言"><br><strong>APPly to:适用范围</strong><br>         Main sample and sub-samples:作用于父节点取样器及对应子节点取样器<br>         Main sample only：仅作用于父节点取样器<br>         Sub-samples only:仅作用于子节点取样器<br>         JMeter Variable:作用于jmeter变量(输入框内可输入jmeter的变量名称)</p>
<p><strong>要测试的响应字段：要检查的项</strong><br>    * 响应文本：服务器响应文本，一般情况下，我们都是勾选改选项，用于验证服务器返回值。<br>    * 响应代码：即http响应代码，例如200，404等等，需要注意： 由于jmeter默认情况下认为4xx，5xx时该请求失败，所以在断言这类响应代码时，需要同时勾选Ingore Status，才能正常去做断言。<br>    * 响应信息：即响应代码对应的信息，例如OK， Not Found等等这类的。<br>    * Response Headers:响应头部<br>    * 求情头<br>    * URL样本<br>    *  Documeng(text)：测试文件<br>    * Ignore status：忽略返回的响应报文状态码<br>    * 请求数据</p>
<p><strong>模式匹配规则：</strong><br>    * 包括：返回结果包括你指定的内容<br>    * 匹配：（好像跟Equals查不多，弄不明白有什么区别）<br>    * Equals：返回结果与你指定结果一致<br>    * Substring：返回结果是指定结果的字串<br>    * 否：不进行匹配<br>    * 或者</p>
<p>要测试的模式:即填写你指定的结果（可填写多个）,按钮【添加】、【删除】是进行指定内容的管理</p>
<h2 id="断言持续时"><a href="#断言持续时" class="headerlink" title="断言持续时"></a>断言持续时</h2>]]></content>
      <categories>
        <category>JMeter</category>
      </categories>
      <tags>
        <tag>JMeter</tag>
      </tags>
  </entry>
  <entry>
    <title>JMeter(四)_HTTP请求</title>
    <url>/2020/02/25/JMeter-%E5%9B%9B-HTTP%E8%AF%B7%E6%B1%82/</url>
    <content><![CDATA[<p>启动JMeter——&gt;测试计划——&gt;添加线程组</p>
<h2 id="配置元件→添加http信息头管理器"><a href="#配置元件→添加http信息头管理器" class="headerlink" title="配置元件→添加http信息头管理器"></a>配置元件→添加http信息头管理器</h2><ul>
<li><p>HTTP Header Manager（信息头管理器）<br>  用于定制Sampler发出的HTTP请求的请求头的内容。</p>
</li>
<li><p>HTTP Request Defaults（请求默认值）<br>  用于设置其作用范围内的所有HTTP的默认值，可被设置的内容包括HTTP请求的host、端口、协议等</p>
</li>
<li><p>HTTP Cache Manager（缓存管理器）<br>  用于模拟浏览器的Cache行为。为Test Plan增加该属性管理器后，Test Plan运行过程中会使用Last-Modified、ETag和Expired等决定是否从Cache中获取相应的元素</p>
</li>
<li><p>HTTP Cookie Manager（Cookie管理器）<br>  用于管理Test Plan运行时的所有Cookie。HTTP Cookie Manager可以自动储存服务器发送给客户端的所有Cookie，并在发送请求时附加上合适的Cookie</p>
</li>
</ul>
<p>HTTP信息头管理器添加好之后，需要填入信息头的名称以及对应的值，如下<br><img src="/.kim//HTTP%E4%BF%A1%E6%81%AF%E5%A4%B4%E7%AE%A1%E7%90%86%E5%99%A8.png" alt="HTTP信息头管理器"></p>
<h2 id="Sampler（取样器）→HTTP请求"><a href="#Sampler（取样器）→HTTP请求" class="headerlink" title="Sampler（取样器）→HTTP请求"></a>Sampler（取样器）→HTTP请求</h2><p><img src="/.kim//HTTP%E8%AF%B7%E6%B1%82.png" alt="HTTP请求"><br>填入测试的服务器地址、端口、所用的户协议、方法，这里方法我用的是POST，然后填入路径，选择Body Data</p>
<p>关于http请求的的属性参数说明：</p>
<ul>
<li>名称：用于标识一个sample。建议使用一个有意义的名称</li>
<li>注释：对于测试没任何影响，仅用来记录用户可读的注释信息</li>
<li>协议：向目标服务器发送http请求时的协议，http/https，大小写不敏感，默认http</li>
<li>服务器名称或IP：http请求发送的目标服务器名称或者IP地址，比如:<a href="http://www.baidu.com/">www.baidu.com</a></li>
<li>端口号：目标服务器的端口号，默认值为443，可不填</li>
<li>方法：发送http请求的方法，比如POST</li>
<li>路径：目标的URL路径（不包括服务器地址和端口）</li>
<li>Content encoding：内容的编码方式（Content-Type=application/json;charset=utf-8）</li>
<li>自动重定向：如果选中该项，发出的http请求得到响应是301/302，jmeter会重定向到新的界面</li>
<li>Use keep Alive：jmeter 和目标服务器之间使用 Keep-Alive方式进行HTTP通信（默认选中）</li>
<li>Use multipart/from-data for HTTP POST ：当发送HTTP POST 请求时，使用</li>
<li>Parameters、Body Data以及Files Upload的区别：<ol>
<li>parameter是指函数定义中参数，而argument指的是函数调用时的实际参数</li>
<li>简略描述为：parameter=形参(formal parameter)， argument=实参(actual parameter)</li>
<li>在不很严格的情况下，现在二者可以混用，一般用argument，而parameter则比较少用</li>
<li>Body Data指的是实体数据，就是请求报文里面主体实体的内容，一般我们向服务器发送请求，携带的实体主体参数，可以写入这里</li>
<li>Files Upload指的是：从HTML文件获取所有有内含的资源：被选中时，发出HTTP请求并获得响应的HTML文件内容后还对该HTML<br> 进行Parse 并获取HTML中包含的所有资源（图片、flash等）：（默认不选中）<br> 如果用户只希望获取特定资源，可以在下方的Embedded URLs must match 文本框中填入需要下载的特定资源表达式，只有能匹配指定正则表达式的URL指向资源会被下载</li>
</ol>
</li>
</ul>
<h2 id="监听器-→察看结果树"><a href="#监听器-→察看结果树" class="headerlink" title="监听器 →察看结果树"></a>监听器 →察看结果树</h2><p>添加好监视器，点击运行，开始测试<br>测试结束后，如果我们的请求成功，那么结果树里面的模拟请求会显示为绿色，可以通过取样器结果里面的响应状态码信息来判断<br><img src="/.kim//%E7%BB%93%E6%9E%9C%E6%A0%91.png" alt="结果树"></p>
<p>也可以点击请求模块，查看我们发送的请求<br>里面有我们发送的请求的方法、协议、地址以及实体主体数据，以及数据类型，大小，发送时间等信息<br><img src="/.kim//%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE.png" alt="请求数据"></p>
<p>响应数据：里面包含服务器返回给我们的响应数据实体，如下图<br><img src="/.kim//%E5%93%8D%E5%BA%94%E6%95%B0%E6%8D%AE.png" alt="响应数据"></p>
]]></content>
      <categories>
        <category>JMeter</category>
      </categories>
      <tags>
        <tag>JMeter</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux常用命令总结</title>
    <url>/2019/05/20/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="系统信息"><a href="#系统信息" class="headerlink" title="系统信息"></a>系统信息</h1><figure class="highlight tcl"><table><tr><td class="code"><pre><span class="line">arch 显示机器的处理器架构(<span class="number">1</span>) </span><br><span class="line">uname -m 显示机器的处理器架构(<span class="number">2</span>) </span><br><span class="line">uname -r 显示正在使用的内核版本 </span><br><span class="line">dmidecode -q 显示硬件系统部件 - (SMBIOS / DMI) </span><br><span class="line">hdparm -i /dev/hda 罗列一个磁盘的架构特性 </span><br><span class="line">hdparm -tT /dev/sda 在磁盘上执行测试性读取操作 </span><br><span class="line">cat /<span class="keyword">proc</span>/cpuinfo 显示CPU<span class="title"> info的信息</span> </span><br><span class="line">cat /<span class="keyword">proc</span>/interrupts 显示中断 </span><br><span class="line">cat /<span class="keyword">proc</span>/meminfo 校验内存使用 </span><br><span class="line">cat /<span class="keyword">proc</span>/swaps 显示哪些swap被使用 </span><br><span class="line">cat /<span class="keyword">proc</span>/version 显示内核的版本 </span><br><span class="line">cat /<span class="keyword">proc</span>/net/dev 显示网络适配器及统计 </span><br><span class="line">cat /<span class="keyword">proc</span>/mounts 显示已加载的文件系统 </span><br><span class="line">lspci -tv 罗列<span class="title"> PCI</span> 设备 </span><br><span class="line">lsusb -tv 显示<span class="title"> USB</span> 设备 </span><br><span class="line">date 显示系统日期 </span><br><span class="line">cal 2007 显示2007年的日历表 </span><br><span class="line">date 041217002007.00 设置日期和时间 - 月日时分年.秒 </span><br><span class="line">clock -w 将时间修改保存到<span class="title"> BIOS</span> </span><br></pre></td></tr></table></figure>
<h1 id="关机-系统的关机、重启以及登出"><a href="#关机-系统的关机、重启以及登出" class="headerlink" title="关机 (系统的关机、重启以及登出 )"></a>关机 (系统的关机、重启以及登出 )</h1><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">shutdown</span> -h now 关闭系统(<span class="number">1</span>) </span><br><span class="line"><span class="attribute">init</span> <span class="number">0</span> 关闭系统(<span class="number">2</span>) </span><br><span class="line"><span class="attribute">telinit</span> <span class="number">0</span> 关闭系统(<span class="number">3</span>) </span><br><span class="line"><span class="attribute">shutdown</span> -h hours:minutes &amp; 按预定时间关闭系统 </span><br><span class="line"><span class="attribute">shutdown</span> -c 取消按预定时间关闭系统 </span><br><span class="line"><span class="attribute">shutdown</span> -r now 重启(<span class="number">1</span>) </span><br><span class="line"><span class="attribute">reboot</span> 重启(<span class="number">2</span>) </span><br><span class="line"><span class="attribute">logout</span> 注销 </span><br></pre></td></tr></table></figure>
<h1 id="文件和目录"><a href="#文件和目录" class="headerlink" title="文件和目录"></a>文件和目录</h1><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">cd</span> /home 进入 &#x27;/ home&#x27; 目录</span><br><span class="line"><span class="attribute">cd</span> .. 返回上一级目录 </span><br><span class="line"><span class="attribute">cd</span> ../.. 返回上两级目录 </span><br><span class="line"><span class="attribute">cd</span> 进入个人的主目录 </span><br><span class="line"><span class="attribute">cd</span> ~user<span class="number">1</span> 进入个人的主目录 </span><br><span class="line"><span class="attribute">cd</span> - 返回上次所在的目录 </span><br><span class="line"><span class="attribute">pwd</span> 显示工作路径 </span><br><span class="line"><span class="attribute">ls</span> 查看目录中的文件 </span><br><span class="line"><span class="attribute">ls</span> -F 查看目录中的文件 </span><br><span class="line"><span class="attribute">ls</span> -l 显示文件和目录的详细资料 </span><br><span class="line"><span class="attribute">ls</span> -a 显示隐藏文件 </span><br><span class="line"><span class="attribute">ls</span> *[<span class="number">0</span>-<span class="number">9</span>]* 显示包含数字的文件名和目录名 </span><br><span class="line"><span class="attribute">tree</span> 显示文件和目录由根目录开始的树形结构(<span class="number">1</span>) </span><br><span class="line"><span class="attribute">lstree</span> 显示文件和目录由根目录开始的树形结构(<span class="number">2</span>) </span><br><span class="line"><span class="attribute">mkdir</span> dir<span class="number">1</span> 创建一个叫做 &#x27;dir<span class="number">1</span>&#x27; 的目录</span><br><span class="line"><span class="attribute">mkdir</span> dir<span class="number">1</span> dir<span class="number">2</span> 同时创建两个目录 </span><br><span class="line"><span class="attribute">mkdir</span> -p /tmp/dir<span class="number">1</span>/dir<span class="number">2</span> 创建一个目录树 </span><br><span class="line"><span class="attribute">rm</span> -f file<span class="number">1</span> 删除一个叫做 &#x27;file<span class="number">1</span>&#x27; 的文件</span><br><span class="line"><span class="attribute">rmdir</span> dir<span class="number">1</span> 删除一个叫做 &#x27;dir<span class="number">1</span>&#x27; 的目录</span><br><span class="line"><span class="attribute">rm</span> -rf dir<span class="number">1</span> 删除一个叫做 &#x27;dir<span class="number">1</span>&#x27; 的目录并同时删除其内容 </span><br><span class="line"><span class="attribute">rm</span> -rf dir<span class="number">1</span> dir<span class="number">2</span> 同时删除两个目录及它们的内容 </span><br><span class="line"><span class="attribute">mv</span> dir<span class="number">1</span> new_dir 重命名/移动 一个目录 </span><br><span class="line"><span class="attribute">cp</span> file<span class="number">1</span> file<span class="number">2</span> 复制一个文件 </span><br><span class="line"><span class="attribute">cp</span> dir/ * . 复制一个目录下的所有文件到当前工作目录 </span><br><span class="line"><span class="attribute">cp</span> -a /tmp/dir<span class="number">1</span> . 复制一个目录到当前工作目录 </span><br><span class="line"><span class="attribute">cp</span> -a dir<span class="number">1</span> dir<span class="number">2</span> 复制一个目录 </span><br><span class="line"><span class="attribute">ln</span> -s file<span class="number">1</span> lnk<span class="number">1</span> 创建一个指向文件或目录的软链接 </span><br><span class="line"><span class="attribute">ln</span> file<span class="number">1</span> lnk<span class="number">1</span> 创建一个指向文件或目录的物理链接 </span><br><span class="line"><span class="attribute">touch</span> -t <span class="number">0712250000</span> file<span class="number">1</span> 修改一个文件或目录的时间戳 - (YYMMDDhhmm) </span><br></pre></td></tr></table></figure>
<h1 id="文件搜索"><a href="#文件搜索" class="headerlink" title="文件搜索"></a>文件搜索</h1><figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line"><span class="built_in">find</span> / -<span class="built_in">name</span> file1 从 <span class="string">&#x27;/&#x27;</span> 开始进入根文件系统搜索文件和目录 </span><br><span class="line"><span class="built_in">find</span> / -user user1 搜索属于用户 <span class="string">&#x27;user1&#x27;</span> 的文件和目录 </span><br><span class="line"><span class="built_in">find</span> /home/user1 -<span class="built_in">name</span> \*.bin 在目录 <span class="string">&#x27;/ home/user1&#x27;</span> 中搜索带有<span class="string">&#x27;.bin&#x27;</span> 结尾的文件 </span><br><span class="line"><span class="built_in">find</span> /usr/bin -<span class="built_in">type</span> f -atime +<span class="number">100</span> 搜索在过去<span class="number">100</span>天内未被使用过的执行文件 </span><br><span class="line"><span class="built_in">find</span> /usr/bin -<span class="built_in">type</span> f -mtime -<span class="number">10</span> 搜索在<span class="number">10</span>天内被创建或者修改过的文件 </span><br><span class="line"><span class="built_in">find</span> / -<span class="built_in">name</span> \*.rpm -<span class="built_in">exec</span> chmod <span class="number">755</span> <span class="string">&#x27;&#123;&#125;&#x27;</span> \; 搜索以 <span class="string">&#x27;.rpm&#x27;</span> 结尾的文件并定义其权限 </span><br><span class="line"><span class="built_in">find</span> / -xdev -<span class="built_in">name</span> \*.rpm 搜索以 <span class="string">&#x27;.rpm&#x27;</span> 结尾的文件，忽略光驱、捷盘等可移动设备 </span><br><span class="line">locate \*.ps 寻找以 <span class="string">&#x27;.ps&#x27;</span> 结尾的文件 - 先运行 <span class="string">&#x27;updatedb&#x27;</span> 命令 </span><br><span class="line">whereis <span class="built_in">halt</span> 显示一个二进制文件、源码或man的位置 </span><br><span class="line">which <span class="built_in">halt</span> 显示一个二进制文件或可执行文件的完整路径 </span><br></pre></td></tr></table></figure>
<h1 id="文件的权限-使用-“-”-设置权限，使用-“-“-用于取消"><a href="#文件的权限-使用-“-”-设置权限，使用-“-“-用于取消" class="headerlink" title="文件的权限 - 使用 “+” 设置权限，使用 “-“ 用于取消"></a>文件的权限 - 使用 “+” 设置权限，使用 “-“ 用于取消</h1><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">ls -lh 显示权限 </span><br><span class="line">ls /tmp | pr -T5 -W$COLUMNS 将终端划分成<span class="number">5</span>栏显示 </span><br><span class="line">chmod ugo+rwx directory1 设置目录的所有人(u)、群组(g)以及其他人(o)以读（r ）、写(w)和执行(x)的权限 </span><br><span class="line">chmod go-rwx directory1 删除群组(g)与其他人(o)对目录的读写执行权限 </span><br><span class="line">chown user1 file1 改变一个文件的所有人属性 </span><br><span class="line">chown -R user1 directory1 改变一个目录的所有人属性并同时改变改目录下所有文件的属性 </span><br><span class="line">chgrp group1 file1 改变文件的群组 </span><br><span class="line">chown user1:group1 file1 改变一个文件的所有人和群组属性 </span><br><span class="line"><span class="keyword">find</span> / -perm -u+s 罗列一个系统中所有使用了SUID控制的文件 </span><br><span class="line">chmod u+s <span class="regexp">/bin/</span>file1 设置一个二进制文件的 SUID 位 - 运行该文件的用户也被赋予和所有者同样的权限 </span><br><span class="line">chmod u-s <span class="regexp">/bin/</span>file1 禁用一个二进制文件的 SUID位 </span><br><span class="line">chmod g+s <span class="regexp">/home/</span><span class="keyword">public</span> 设置一个目录的SGID 位 - 类似SUID ，不过这是针对目录的 </span><br><span class="line">chmod g-s <span class="regexp">/home/</span><span class="keyword">public</span> 禁用一个目录的 SGID 位 </span><br><span class="line">chmod o+t <span class="regexp">/home/</span><span class="keyword">public</span> 设置一个文件的 STIKY 位 - 只允许合法所有人删除文件 </span><br><span class="line">chmod o-t <span class="regexp">/home/</span><span class="keyword">public</span> 禁用一个目录的 STIKY 位 </span><br></pre></td></tr></table></figure>
<h1 id="打包和压缩文件"><a href="#打包和压缩文件" class="headerlink" title="打包和压缩文件"></a>打包和压缩文件</h1><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">bunzip2</span> file<span class="number">1</span>.bz<span class="number">2</span> 解压一个叫做 &#x27;file<span class="number">1</span>.bz<span class="number">2</span>&#x27;的文件 </span><br><span class="line"><span class="attribute">bzip2</span> file<span class="number">1</span> 压缩一个叫做 &#x27;file<span class="number">1</span>&#x27; 的文件 </span><br><span class="line"><span class="attribute">gunzip</span> file<span class="number">1</span>.gz 解压一个叫做 &#x27;file<span class="number">1</span>.gz&#x27;的文件 </span><br><span class="line"><span class="attribute">gzip</span> file<span class="number">1</span> 压缩一个叫做 &#x27;file<span class="number">1</span>&#x27;的文件 </span><br><span class="line"><span class="attribute">gzip</span> -<span class="number">9</span> file<span class="number">1</span> 最大程度压缩 </span><br><span class="line"><span class="attribute">rar</span> a file<span class="number">1</span>.rar test_file 创建一个叫做 &#x27;file<span class="number">1</span>.rar&#x27; 的包 </span><br><span class="line"><span class="attribute">rar</span> a file<span class="number">1</span>.rar file<span class="number">1</span> file<span class="number">2</span> dir<span class="number">1</span> 同时压缩 &#x27;file<span class="number">1</span>&#x27;, &#x27;file<span class="number">2</span>&#x27; 以及目录 &#x27;dir<span class="number">1</span>&#x27; </span><br><span class="line"><span class="attribute">rar</span> x file<span class="number">1</span>.rar 解压rar包 </span><br><span class="line"><span class="attribute">unrar</span> x file<span class="number">1</span>.rar 解压rar包 </span><br><span class="line"><span class="attribute">tar</span> -cvf archive.tar file<span class="number">1</span> 创建一个非压缩的 tarball </span><br><span class="line"><span class="attribute">tar</span> -cvf archive.tar file<span class="number">1</span> file<span class="number">2</span> dir<span class="number">1</span> 创建一个包含了 &#x27;file<span class="number">1</span>&#x27;, &#x27;file<span class="number">2</span>&#x27; 以及 &#x27;dir<span class="number">1</span>&#x27;的档案文件 </span><br><span class="line"><span class="attribute">tar</span> -tf archive.tar 显示一个包中的内容 </span><br><span class="line"><span class="attribute">tar</span> -xvf archive.tar 释放一个包 </span><br><span class="line"><span class="attribute">tar</span> -xvf archive.tar -C /tmp 将压缩包释放到 /tmp目录下 </span><br><span class="line"><span class="attribute">tar</span> -cvfj archive.tar.bz<span class="number">2</span> dir<span class="number">1</span> 创建一个bzip<span class="number">2</span>格式的压缩包 </span><br><span class="line"><span class="attribute">tar</span> -xvfj archive.tar.bz<span class="number">2</span> 解压一个bzip<span class="number">2</span>格式的压缩包 </span><br><span class="line"><span class="attribute">tar</span> -cvfz archive.tar.gz dir<span class="number">1</span> 创建一个gzip格式的压缩包 </span><br><span class="line"><span class="attribute">tar</span> -xvfz archive.tar.gz 解压一个gzip格式的压缩包 </span><br><span class="line"><span class="attribute">zip</span> file<span class="number">1</span>.zip file<span class="number">1</span> 创建一个zip格式的压缩包 </span><br><span class="line"><span class="attribute">zip</span> -r file<span class="number">1</span>.zip file<span class="number">1</span> file<span class="number">2</span> dir<span class="number">1</span> 将几个文件和目录同时压缩成一个zip格式的压缩包 </span><br><span class="line"><span class="attribute">unzip</span> file<span class="number">1</span>.zip 解压一个zip格式压缩包 </span><br></pre></td></tr></table></figure>
<h1 id="APT-软件工具-Debian-Ubuntu-以及类似系统"><a href="#APT-软件工具-Debian-Ubuntu-以及类似系统" class="headerlink" title="APT 软件工具 (Debian, Ubuntu 以及类似系统)"></a>APT 软件工具 (Debian, Ubuntu 以及类似系统)</h1><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">apt-<span class="builtin-name">get</span> install package_name 安装/更新一个 deb 包 </span><br><span class="line">apt-cdrom install package_name 从光盘安装/更新一个 deb 包 </span><br><span class="line">apt-<span class="builtin-name">get</span> update 升级列表中的软件包 </span><br><span class="line">apt-<span class="builtin-name">get</span><span class="built_in"> upgrade </span>升级所有已安装的软件 </span><br><span class="line">apt-<span class="builtin-name">get</span> <span class="builtin-name">remove</span> package_name 从系统删除一个deb包 </span><br><span class="line">apt-<span class="builtin-name">get</span> check 确认依赖的软件仓库正确 </span><br><span class="line">apt-<span class="builtin-name">get</span> clean 从下载的软件包中清理缓存 </span><br><span class="line">apt-cache search searched-package 返回包含所要搜索字符串的软件包名称 </span><br></pre></td></tr></table></figure>
<h1 id="查看文件内容"><a href="#查看文件内容" class="headerlink" title="查看文件内容"></a>查看文件内容</h1><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">cat</span> file<span class="number">1</span> 从第一个字节开始正向查看文件的内容 </span><br><span class="line"><span class="attribute">tac</span> file<span class="number">1</span> 从最后一行开始反向查看一个文件的内容 </span><br><span class="line"><span class="attribute">more</span> file<span class="number">1</span> 查看一个长文件的内容 </span><br><span class="line"><span class="attribute">less</span> file<span class="number">1</span> 类似于 &#x27;more&#x27; 命令，但是它允许在文件中和正向操作一样的反向操作 </span><br><span class="line"><span class="attribute">head</span> -<span class="number">2</span> file<span class="number">1</span> 查看一个文件的前两行 </span><br><span class="line"><span class="attribute">tail</span> -<span class="number">2</span> file<span class="number">1</span> 查看一个文件的最后两行 </span><br><span class="line"><span class="attribute">tail</span> -f /var/log/messages 实时查看被添加到一个文件中的内容 </span><br></pre></td></tr></table></figure>
<h1 id="网络配置管理"><a href="#网络配置管理" class="headerlink" title="网络配置管理"></a>网络配置管理</h1><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">ifconfig ‐a <span class="regexp">//</span>查ip信息 </span><br><span class="line">ping ‐C <span class="number">4</span> <span class="number">192.168</span>.xxx.xxx <span class="regexp">//</span>ping4次</span><br><span class="line">setup <span class="regexp">//</span>配置ip、防火墙、服务等，需要root用户执行</span><br><span class="line">ifconfig eth0 <span class="number">192.168</span>.<span class="number">1.100</span> netmask <span class="number">255.255</span>.<span class="number">255.0</span> <span class="regexp">//</span>临时设置ip </span><br><span class="line">vi <span class="regexp">/etc/</span>sysconfig<span class="regexp">/network‐scrippts/i</span>fcfg‐eth0 <span class="regexp">//</span>永久设置ip </span><br><span class="line">dhclient eth0 <span class="regexp">//</span>启用dhcp模式</span><br><span class="line">service network restart <span class="regexp">//</span>重启网络服务[stop、start]</span><br><span class="line">service iptables stop <span class="regexp">//</span>关闭防火墙，[start]开启，[status]查看状态</span><br><span class="line">hostname  <span class="regexp">//</span>查看主机名</span><br><span class="line">netstat ‐an <span class="regexp">//</span>查看所有端口</span><br><span class="line">lsof ‐i :<span class="number">8080</span> <span class="regexp">//</span>查看具体端口号运行的程序<span class="number">12</span>. </span><br><span class="line">nmap <span class="number">10.1</span>.<span class="number">252.121</span>    <span class="regexp">//</span>扫描端口</span><br></pre></td></tr></table></figure>
<h1 id="VI底行模式"><a href="#VI底行模式" class="headerlink" title="VI底行模式"></a>VI底行模式</h1><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">:<span class="keyword">set</span> nu    //显示行号</span><br><span class="line">:<span class="keyword">set</span> <span class="comment">nonu</span>    //不显示行号 </span><br><span class="line">:n    //跳转到指的第<span class="comment">n</span>行</span><br><span class="line">:w <span class="comment">file</span>    //另存为</span><br><span class="line">:n1,n2 <span class="comment">s</span>/string1/<span class="comment">string2</span>/g    <span class="comment">//从n1行到n2行将string1替换为string2</span></span><br><span class="line">:%s/<span class="comment">string1</span>/string2/<span class="comment">g</span>       //将所有行<span class="comment">string1</span>替换为<span class="comment">string2</span>，<span class="comment">%</span>代表所有行，<span class="comment">g</span>表示所有<span class="comment">string1</span>字</span><br><span class="line">:%s+/usr/local/bin+/usr/bin+g    <span class="comment">//替换的字符中含有“/”时，用+来代替/</span></span><br><span class="line">:wq    <span class="comment">//保存并退出</span></span><br><span class="line">:q!    <span class="comment">//强制退出，不保存</span></span><br></pre></td></tr></table></figure>
<h1 id="VI命令模式"><a href="#VI命令模式" class="headerlink" title="VI命令模式"></a>VI命令模式</h1><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">G      <span class="regexp">//</span>到末行</span><br><span class="line">gg     <span class="regexp">//</span>到首行</span><br><span class="line">dd     <span class="regexp">//</span>删除行</span><br><span class="line">u      <span class="regexp">//</span>撤销</span><br><span class="line">yy     <span class="regexp">//</span>复制一行</span><br><span class="line">nyy    <span class="regexp">//</span>复制n行 </span><br><span class="line">p      <span class="regexp">//</span>粘贴</span><br></pre></td></tr></table></figure>
<h1 id="nmon性能测试监控工具"><a href="#nmon性能测试监控工具" class="headerlink" title="nmon性能测试监控工具"></a>nmon性能测试监控工具</h1><figure class="highlight haml"><table><tr><td class="code"><pre><span class="line">1、./ nmon -f -t -s 30 -c 180</span><br><span class="line">      -<span class="ruby">f：按标准格式输出文件：&lt;hostname&gt;_YYYYMMDD_HHMM.nmon；</span></span><br><span class="line"><span class="ruby">      -t：输出中包括占用率较高的进程；</span></span><br><span class="line"><span class="ruby">      -s <span class="number">30</span>：每<span class="number">30</span>秒进行一次数据采集</span></span><br><span class="line"><span class="ruby">      -c <span class="number">180</span>：一共采集<span class="number">180</span>次</span></span><br><span class="line"><span class="ruby"><span class="number">2</span>、sort -A test.nmon &gt; test.csv  /<span class="regexp">/通过sort命令可以将nmon结果文件转换为csv文件</span></span></span><br></pre></td></tr></table></figure>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">ctrl+u   <span class="regexp">//</span>从光标处向前批量删除命令串  </span><br><span class="line">ctrl+k  <span class="regexp">//</span>从光标处向后批量删除命令串  </span><br><span class="line">ctrl+a  <span class="regexp">//</span>将光标移动到最前</span><br><span class="line">ctrl+e  <span class="regexp">//</span>将光标移动到最后</span><br><span class="line">rz  <span class="regexp">//</span>运行该命令会弹出一个文件选择窗口，从本地选择文件上传到服务器</span><br><span class="line">sz file <span class="regexp">//</span>将选定的文件file发送到本地机器</span><br><span class="line">vifm、ranger  <span class="regexp">//</span>图形的文件管理操作</span><br><span class="line">dos2unix file  <span class="regexp">//</span>将DOS格式的文本文件转换成UNIX格式</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>资料</category>
      </categories>
      <tags>
        <tag>资料</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac OS环境搭建STF</title>
    <url>/2019/08/21/Mac%20OS%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BASTF/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>STF（Smartphone Test Farm）是一个Web应用程序，用于从浏览器中远程调试智能手机，智能手表和其他小工具。<br><a href="https://github.com/openstf/stf">openstf GitHub开源地址</a></p>
<p>功能：</p>
<ol>
<li>支持的系统：Android<ul>
<li><pre><code>版本限制：2.3.3 (SDK 版本 10) to 9.0 (SDK 版本 28)
</code></pre>
</li>
<li><pre><code>Android Wear 5.1（由于权限问题不支持5.0）
</code></pre>
</li>
<li><pre><code>Fire OS, CyanogenMod，基于Android的发行版
</code></pre>
</li>
<li><pre><code>当前任何功能都不需要root
</code></pre>
</li>
</ul>
</li>
<li>从浏览器远程控制任何设备</li>
<li>管理所有挂机设备</li>
</ol>
<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><h2 id="需要使用到的工具或环境"><a href="#需要使用到的工具或环境" class="headerlink" title="需要使用到的工具或环境"></a>需要使用到的工具或环境</h2><ul>
<li>Node.js &gt;= 6.9 (首选最新稳定版)</li>
<li>ADB </li>
<li>RethinkDB &gt;= 2.2</li>
<li>GraphicsMagick (用来调整屏幕截图的大小)</li>
<li>ZeroMQ 自带安装，无需另行安装</li>
<li>Protocol Buffers 自带安装，无需另行安装</li>
<li>yasm 自带安装，无需另行安装 (为了编译 libjpeg-turbo)</li>
<li>pkg-config 安装后Node.js就可以找到自带库</li>
</ul>
<h2 id="通过brew安装依赖"><a href="#通过brew安装依赖" class="headerlink" title="通过brew安装依赖"></a>通过brew安装依赖</h2><p>在终端使用输入命令安装所需的依赖：</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>rethinkdb graphicsmagick zeromq protobuf yasm pkg-<span class="built_in">config</span></span><br></pre></td></tr></table></figure>
<p>若提示找不到brew，则需要先安装brew，参照：<br><a href="https://vic.kim/2019/05/20/Homebrew/">Homebrew</a></p>
<h2 id="Node-js安装"><a href="#Node-js安装" class="headerlink" title="Node.js安装"></a>Node.js安装</h2><p>Node.js版本强烈建议选择8.X 版本,如果是安装了最新10.X及以上版本后续安装stf过程中可能会出现报错，参考<a href="https://vic.kim/2019/08/21/Mac%E7%BB%88%E7%AB%AF%E5%AE%89%E8%A3%85%E6%8C%87%E5%AE%9A%E7%89%88%E6%9C%ACnode/#more">Mac终端安装指定版本node</a></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">node</span> -v</span><br><span class="line">    <span class="attribute">v8</span>.<span class="number">16</span>.<span class="number">0</span></span><br><span class="line"><span class="attribute">npm</span> -v</span><br><span class="line">    <span class="attribute">6</span>.<span class="number">4</span>.<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>由于网络限制，为了保障后续安装顺利，这里我们建议增加 npm淘宝镜像。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https:<span class="regexp">//</span>registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<h2 id="adb安装"><a href="#adb安装" class="headerlink" title="adb安装"></a>adb安装</h2><p>使用brew安装，命令如下:</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">brew </span>cask <span class="keyword">install </span><span class="keyword">android-platform-tools</span></span><br></pre></td></tr></table></figure>
<p>安装完成后，连上Android 设备(开启usb-debug)输入命令adb –version查看是否安装成功。</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">adb</span> --version</span><br><span class="line">    <span class="attribute">Android</span> Debug Bridge version <span class="number">1</span>.<span class="number">0</span>.<span class="number">41</span></span><br><span class="line">    <span class="attribute">Version</span> <span class="number">29</span>.<span class="number">0</span>.<span class="number">1</span>-<span class="number">5644136</span></span><br><span class="line">    <span class="attribute">Installed</span> as /usr/local/bin/adb</span><br></pre></td></tr></table></figure>

<h2 id="stf安装"><a href="#stf安装" class="headerlink" title="stf安装"></a>stf安装</h2><p>这里我们使用上面安装的cnpm来安装</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> -g stf</span><br></pre></td></tr></table></figure>
<p>安装完成后使用命令stf doctor检查相关依赖是否安装正常。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">stfs<span class="literal">-Mac</span><span class="literal">-mini</span>:~ stf<span class="variable">$</span> stf doctor</span><br><span class="line"><span class="number">2019</span><span class="literal">-08</span><span class="literal">-01T05</span>:<span class="number">17</span>:<span class="number">19.556</span>Z INF/<span class="built_in">cli</span>:doctor <span class="number">58578</span> [*] OS Arch: x64</span><br><span class="line"><span class="number">2019</span><span class="literal">-08</span><span class="literal">-01T05</span>:<span class="number">17</span>:<span class="number">19.558</span>Z INF/<span class="built_in">cli</span>:doctor <span class="number">58578</span> [*] OS Platform: darwin</span><br><span class="line"><span class="number">2019</span><span class="literal">-08</span><span class="literal">-01T05</span>:<span class="number">17</span>:<span class="number">19.558</span>Z INF/<span class="built_in">cli</span>:doctor <span class="number">58578</span> [*] OS Platform: <span class="number">18.0</span>.<span class="number">0</span></span><br><span class="line"><span class="number">2019</span><span class="literal">-08</span><span class="literal">-01T05</span>:<span class="number">17</span>:<span class="number">19.558</span>Z INF/<span class="built_in">cli</span>:doctor <span class="number">58578</span> [*] <span class="keyword">Using</span> Node 8.16.0</span><br><span class="line"><span class="number">2019</span><span class="literal">-08</span><span class="literal">-01T05</span>:<span class="number">17</span>:<span class="number">19.572</span>Z INF/<span class="built_in">cli</span>:doctor <span class="number">58578</span> [*] <span class="keyword">Using</span> ZeroMQ 4.3.2</span><br><span class="line"><span class="number">2019</span><span class="literal">-08</span><span class="literal">-01T05</span>:<span class="number">17</span>:<span class="number">19.581</span>Z INF/<span class="built_in">cli</span>:doctor <span class="number">58578</span> [*] <span class="keyword">Using</span> GraphicsMagick 1.3.33</span><br><span class="line"><span class="number">2019</span><span class="literal">-08</span><span class="literal">-01T05</span>:<span class="number">17</span>:<span class="number">19.582</span>Z INF/<span class="built_in">cli</span>:doctor <span class="number">58578</span> [*] <span class="keyword">Using</span> ADB 1.0.41</span><br><span class="line"><span class="number">2019</span><span class="literal">-08</span><span class="literal">-01T05</span>:<span class="number">17</span>:<span class="number">19.587</span>Z INF/<span class="built_in">cli</span>:doctor <span class="number">58578</span> [*] <span class="keyword">Using</span> RethinkDB 2.3.6</span><br><span class="line"><span class="number">2019</span><span class="literal">-08</span><span class="literal">-01T05</span>:<span class="number">17</span>:<span class="number">19.589</span>Z INF/<span class="built_in">cli</span>:doctor <span class="number">58578</span> [*] <span class="keyword">Using</span> ProtoBuf 3.7.1</span><br></pre></td></tr></table></figure>
<p>如果安装过程中出现如下错误，说明Node版本不兼容。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">make: *** [Release<span class="regexp">/obj.target/</span>bufferutil<span class="regexp">/src/</span>bufferutil.o] Error <span class="number">1</span></span><br><span class="line">gyp ERR! build error </span><br><span class="line">gyp ERR! stack Error: `make` failed with <span class="keyword">exit</span> code: <span class="number">2</span></span><br><span class="line">gyp ERR! stack     at ChildProcess.onExit (<span class="regexp">/usr/</span>local<span class="regexp">/lib/</span>node_modules<span class="regexp">/cnpm/</span>node_modules<span class="regexp">/node-gyp/</span>lib/build.js:<span class="number">262</span>:<span class="number">23</span>)</span><br><span class="line">gyp ERR! stack     at ChildProcess.emit (events.js:<span class="number">198</span>:<span class="number">13</span>)</span><br><span class="line">gyp ERR! stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:<span class="number">248</span>:<span class="number">12</span>)</span><br><span class="line">gyp ERR! System Darwin <span class="number">18.0</span>.<span class="number">0</span></span><br><span class="line">gyp ERR! command <span class="string">&quot;/usr/local/bin/node&quot;</span> <span class="string">&quot;/usr/local/lib/node_modules/cnpm/node_modules/npminstall/node-gyp-bin/node-gyp.js&quot;</span> <span class="string">&quot;rebuild&quot;</span></span><br><span class="line">gyp ERR! cwd <span class="regexp">/usr/</span>local<span class="regexp">/lib/</span>node_modules<span class="regexp">/stf/</span>node_modules/_bufferutil@<span class="number">1.3</span>.<span class="number">0</span>@bufferutil</span><br><span class="line">gyp ERR! node -v v10.<span class="number">16.1</span></span><br><span class="line">gyp ERR! node-gyp -v v3.<span class="number">8.0</span></span><br><span class="line">gyp ERR! not ok </span><br><span class="line">[npminstall:runscript:error] bufferutil@^<span class="number">1.2</span>.<span class="number">1</span> has binding.gyp file, run <span class="string">&quot;node-gyp rebuild&quot;</span> error: RunScriptError: Run <span class="string">&quot;sh -c node-gyp rebuild&quot;</span> error, <span class="keyword">exit</span> code <span class="number">1</span></span><br><span class="line">Install fail! RunScriptError: Run <span class="string">&quot;sh -c node-gyp rebuild&quot;</span> error, <span class="keyword">exit</span> code <span class="number">1</span></span><br><span class="line">RunScriptError: Run <span class="string">&quot;sh -c node-gyp rebuild&quot;</span> error, <span class="keyword">exit</span> code <span class="number">1</span></span><br><span class="line">    at ChildProcess.proc.on.code (<span class="regexp">/usr/</span>local<span class="regexp">/lib/</span>node_modules<span class="regexp">/cnpm/</span>node_modules<span class="regexp">/runscript/i</span>ndex.js:<span class="number">96</span>:<span class="number">21</span>)</span><br><span class="line">    at ChildProcess.emit (events.js:<span class="number">198</span>:<span class="number">13</span>)</span><br><span class="line">    at maybeClose (internal/child_process.js:<span class="number">982</span>:<span class="number">16</span>)</span><br><span class="line">    at Process.ChildProcess._handle.onexit (internal/child_process.js:<span class="number">259</span>:<span class="number">5</span>)</span><br><span class="line">npminstall version: <span class="number">3.22</span>.<span class="number">1</span></span><br><span class="line">npminstall args: <span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>node <span class="regexp">/usr/</span>local<span class="regexp">/lib/</span>node_modules<span class="regexp">/cnpm/</span>node_modules<span class="regexp">/npminstall/</span>bin<span class="regexp">/install.js --fix-bug-versions --china --userconfig=/</span>Users<span class="regexp">/stf/</span>.cnpmrc --disturl=https:<span class="regexp">//</span>npm.taobao.org<span class="regexp">/mirrors/</span>node --registry=https:<span class="regexp">//</span>r.npm.taobao.org -g stf --unsafe-perm</span><br></pre></td></tr></table></figure>
<p>解决方案:使用如下命令卸载Node，然后安装8.X版本的Node。</p>
<h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><h3 id="启动rethinkdb"><a href="#启动rethinkdb" class="headerlink" title="启动rethinkdb"></a>启动rethinkdb</h3><p>stf使用的是RethinkDB数据库，所以在启动stf前需要先启动RethinkDB，启动RethinkDB很简单，只需要执行以下命令：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">rethinkdb</span></span><br></pre></td></tr></table></figure>
<p>因为默认端口是8080，我已经有其他服务被占用，所以另开一个端口</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">rethinkdb</span> --bind <span class="literal">all</span> --cache-size <span class="number">8192</span> --http-port <span class="number">9090</span></span><br></pre></td></tr></table></figure>
<p>–cache-size指定缓存大小<br>–http-port 指定端口</p>
<h3 id="启动stf"><a href="#启动stf" class="headerlink" title="启动stf"></a>启动stf</h3><p>另开一个终端，执行</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">stf <span class="keyword">local</span></span><br></pre></td></tr></table></figure>
<p>如果想让其他机器连接到stf需要加上 –public-ip</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">stf local --<span class="meta">public</span>-<span class="built_in">ip</span> &lt;本机的<span class="built_in">IP</span>地址&gt;</span><br></pre></td></tr></table></figure>
<p>最后输入<a href="http://localhost:7100/">http://localhost:7100</a>或者 http://&lt;ip地址&gt;:7100即可访问stf地址，界面如下:<br>![stf-login](Mac OS环境搭建STF/stf-login.png)</p>
<p>输入用户名和邮箱即可登录，用户名和邮箱可以随便填写。<br>USB链接Android设备，开发者模式打开USB调试，就可以看到设备了</p>
]]></content>
      <categories>
        <category>App自动化测试</category>
      </categories>
      <tags>
        <tag>设备管理</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac Jenkins搭建</title>
    <url>/2019/05/21/Mac%E4%B8%8BJenkins%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="Mac-Jenkins搭建"><a href="#Mac-Jenkins搭建" class="headerlink" title="Mac Jenkins搭建"></a>Mac Jenkins搭建</h1><p>这里有两种方法可以用。第一种操作方便，可以直接下载安装包，但是安装包会有一些莫名的问题。第二种操作繁琐一点，需要操作命令行，直接命令行安装：</p>
<h2 id="直接登录官网下载安装：（不推荐）"><a href="#直接登录官网下载安装：（不推荐）" class="headerlink" title="直接登录官网下载安装：（不推荐）"></a>直接登录官网下载安装：（不推荐）</h2><p>jenkins的官网下载地址：<a href="https://jenkins.io/download/">https://jenkins.io/download/</a><br>因为这里是Mac下面所以需要选择MacOS的版本：(左边是稳定版本，右边是测试版本，所以一般都是选择左边的)<br><img src="/.kim//15578018638193.jpg" alt="Jenkins官网"><br>下载完成以后直接点击安装就可以了。之后在浏览器输入链接：<a href="http://localhost:8080/">http://localhost:8080</a> 就行</p>
<h2 id="brew下载安装-推荐使用-："><a href="#brew下载安装-推荐使用-：" class="headerlink" title="brew下载安装(推荐使用)："></a>brew下载安装(推荐使用)：</h2><ul>
<li><p>安装安装brew（如果已安装跳过）</p>
  <figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>bin<span class="regexp">/ruby -e &quot;$(curl -fsSL https:/</span><span class="regexp">/raw.githubusercontent.com/</span>Homebrew<span class="regexp">/install/m</span>aster/install)”</span><br></pre></td></tr></table></figure></li>
<li><p>安装Jenkins</p>
  <figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span><span class="keyword">jenkins</span></span><br></pre></td></tr></table></figure></li>
<li><p>查找jenkins war地址</p>
  <figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">#在安装后有可能找不到war包地址,可以用mdfind命令本地查询下</span><br><span class="line"></span><br><span class="line">mdfind -name jenkins.war</span><br><span class="line">#<span class="regexp">/usr/</span>local<span class="regexp">/Cellar/</span>jenkins<span class="regexp">/2.174/</span>libexec/jenkins.war</span><br></pre></td></tr></table></figure></li>
<li><p>启动</p>
  <figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">java -jar <span class="regexp">/usr/</span>local<span class="regexp">/Cellar/</span>jenkins<span class="regexp">/2.116/</span>libexec/jenkins.war --httpPort=<span class="number">8080</span></span><br></pre></td></tr></table></figure></li>
<li><p>后台启动</p>
  <figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">后台启动的意思是放到后台运行,即使窗口被干掉,jenkins的进程也会存在.</span><br><span class="line"></span><br><span class="line">简单用shell脚本nohup命令放到后台</span><br><span class="line"></span><br><span class="line">启动脚本命令:sh startjenkins.sh</span><br><span class="line"></span><br><span class="line">#!<span class="regexp">/bin/</span>bash</span><br><span class="line">echo start jenkins</span><br><span class="line"></span><br><span class="line">nohup java -jar <span class="regexp">/usr/</span>local<span class="regexp">/Cellar/</span>jenkins<span class="regexp">/2.116/</span>libexec/jenkins.war --httpPort=<span class="number">8080</span> &amp;</span><br><span class="line"></span><br><span class="line">echo start end</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="Jenkins的环境配置"><a href="#Jenkins的环境配置" class="headerlink" title="Jenkins的环境配置"></a>Jenkins的环境配置</h1><h2 id="启动进入"><a href="#启动进入" class="headerlink" title="启动进入"></a>启动进入</h2><p>启动成功就可以在浏览器输入<a href="http://localhost:8080后">http://localhost:8080后</a><br><img src="/.kim//15578025178751.jpg" alt="Jenkins官网"><br>可以通过红色路径找到文件打开查看密码，Mac下面路径这个</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/Users/</span>你的Mac用户名<span class="regexp">/.jenkins/</span>secrets/initialAdminPassword</span><br></pre></td></tr></table></figure>
<p>密码：<br><img src="/.kim//15578027381238.jpg" alt="Jenkins官网"></p>
<h2 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h2><p>输入密码进入插件安装的页面，分别是“安装建议的插件”和“选择插件进行安装”，这里我选择左侧的选项（“安装建议的插件”），然后等待自动安装完成<br>如果提示install failure，右下角有个retry，重试一下就好了</p>
<h2 id="创建第一个管理员账户"><a href="#创建第一个管理员账户" class="headerlink" title="创建第一个管理员账户"></a>创建第一个管理员账户</h2><p><img src="/.kim//15578050696004.jpg" alt="Jenkins官网"><br>填写完表格，点击save and finish，jenkins的初始配置就完成啦<br>然后要重启一下，填入刚才输入的admin账号密码才能登录进去</p>
<h1 id="jenkins常用操作"><a href="#jenkins常用操作" class="headerlink" title="jenkins常用操作"></a>jenkins常用操作</h1><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">访问:http:<span class="regexp">//</span>localhost:<span class="number">8080</span>/login?from=%<span class="number">2</span>F</span><br><span class="line"></span><br><span class="line">退出:http:<span class="regexp">//</span>localhost:<span class="number">8080</span>/<span class="keyword">exit</span> </span><br><span class="line"></span><br><span class="line">重启:http:<span class="regexp">//</span>localhost:<span class="number">8080</span>/restart </span><br><span class="line"></span><br><span class="line">重新加载:http:<span class="regexp">//</span>localhost:<span class="number">8080</span>/reload</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果你不想/不需要后台服务，你可以运行:</span></span><br><span class="line">brew services start jenkins</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac下使用Hexo+Github搭建个人博客</title>
    <url>/2019/05/25/Mac%E4%B8%8B%E4%BD%BF%E7%94%A8Hexo-Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Hexo是一个快速、简洁且高效的博客框架，最近有搭建个人博客的想法，便动手尝试了。<br>官方的<a href="https://hexo.io/zh-cn/docs/">文档</a></p>
<h1 id="hexo博客系统搭建"><a href="#hexo博客系统搭建" class="headerlink" title="hexo博客系统搭建"></a>hexo博客系统搭建</h1><h2 id="Github账号注册及仓库创建"><a href="#Github账号注册及仓库创建" class="headerlink" title="Github账号注册及仓库创建"></a>Github账号注册及仓库创建</h2><ul>
<li>进入<a href="https://github.com/">Github</a>官网，注册账号</li>
<li>注册成功点击new仓库<br>  <img src="/.kim//15587527012655.jpg" alt="-w1309"></li>
<li>创建仓库的名字必须为username.github.io，我的用户名为Vicxiaoyezi，因此我创建的仓库就是Vicxiaoyezi.github.io，这是很关键的一点，很重要。输入名字后，直接点最下面绿色的按钮“Create repository”，创建新仓库。这一部分基本完成了，接下去需要在终端操作。<br>  <img src="/.kim//15587526607215.jpg" alt="-w746"></li>
</ul>
<h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><ul>
<li>首先检查是否安装了node.js  <figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">node</span> <span class="title">-v</span> <span class="comment"># 是否出现安装版本信息，出现说明已经安装了</span></span><br></pre></td></tr></table></figure></li>
<li>如果未安装，去<a href="https://nodejs.org/en/">Node.js</a>官网下载相应的安装包，一路安装即可。  <figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装完成之后打开终端，分别输入一下命令，如果出现版本信息，就说明安装成功。</span></span><br><span class="line"><span class="keyword">node</span><span class="title">-v</span>   </span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p>Mac下安装Xcode就自带Git。</p>
<ul>
<li><p>首先检查是否安装了Git</p>
  <figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">git --<span class="keyword">version</span> <span class="comment"># 是否出现安装版本信息，出现说明已经安装了</span></span><br></pre></td></tr></table></figure></li>
<li><p>未安装通过Homebrew安装git（<a href="https://vic.kim/2019/05/20/Homebrew/">Homebrew的安装参考</a>），终端命令输入</p>
  <figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>git</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="配置SSH-Key"><a href="#配置SSH-Key" class="headerlink" title="配置SSH Key"></a>配置SSH Key</h2><p>这一步不是必须的，配置SSH Key的话之后每次更新博客就不用都输入用户名和密码，可以方便一些。<br>配置参考<a href="https://vic.kim/2019/05/21/Mac%E7%94%B5%E8%84%91%E7%94%A8%E7%BB%88%E7%AB%AF%E7%94%9F%E6%88%90SSH%20key%20%E8%AE%BF%E9%97%AE%E8%87%AA%E5%B7%B1%E7%9A%84Github/">Mac下配置SSH key</a></p>
<h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><ul>
<li>安装hexo<br>  如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装。  <figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-<span class="keyword">cli</span></span><br></pre></td></tr></table></figure></li>
<li>创建博客目录<br>  在任意位置创建一个文件夹，如MyBlog，cd到该路径下  <figure class="highlight pf"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在你选择的目录下创建一个MyBlog文件夹</span></span><br><span class="line">mkdir MyB<span class="keyword">log</span></span><br><span class="line"><span class="comment"># 进入目录</span></span><br><span class="line">cd MyB<span class="keyword">log</span></span><br></pre></td></tr></table></figure></li>
<li>初始化目录，在MyBlog目录下  <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">hexo <span class="keyword">init</span></span><br></pre></td></tr></table></figure></li>
<li>启动本地服务  <figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hexo</span> s <span class="comment"># 也可是 hexo server</span></span><br></pre></td></tr></table></figure>
  如果出现以下信息说明成功，浏览器输入<a href="http://localhost:4000/">http://localhost:4000/ </a>就可以访问了。<br>  当然这个博客是本地的，别人是无法访问的，之后我们需要部署到GitHub上。<br>  ``  <figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INFO</span>  <span class="keyword">Start</span> processing</span><br><span class="line"><span class="keyword">INFO</span>  Hexo <span class="keyword">is</span> running at http://localhost:<span class="number">4000</span> . Press Ctrl+C <span class="keyword">to</span> stop.</span><br></pre></td></tr></table></figure>
  <img src="/.kim//15587552575382.jpg" alt="到这里说明你的环境以及没有问题了，成功了搭建起了博客框架"></li>
</ul>
<h1 id="博客关联到Github仓库"><a href="#博客关联到Github仓库" class="headerlink" title="博客关联到Github仓库"></a>博客关联到Github仓库</h1><p>博客文件夹<code>MyBlog</code>中的<code>_config.yml</code>文件，这是博客的主要配置文件。</p>
<ul>
<li>编辑博客配置文件<code>_config.yml</code>中的<code>deploy</code>节点。记得将username（Vicxiaoyezi）换成自己的username  <figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">deploy:</span></span><br><span class="line"><span class="symbol">  type:</span> git</span><br><span class="line"><span class="symbol">  repo:</span> git@github.com:Vicxiaoyezi/Vicxiaoyezi.github.io.git</span><br><span class="line"><span class="symbol">  branch:</span> master</span><br></pre></td></tr></table></figure>
  注意：repo为这种形式的是配置了SSH Key之后的，如果没有配置则使用Https形式的地址。</li>
<li>为了能够使Hexo部署到GitHub上，需要安装一个插件，在博客目录下运行以下命令  <figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git <span class="comment">--save</span></span><br></pre></td></tr></table></figure></li>
<li>然后在博客目录中执行  <figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta">#清除缓存</span></span><br><span class="line">hexo clean</span><br><span class="line"><span class="meta"># 产生静态网页</span></span><br><span class="line">hexo g</span><br><span class="line"><span class="meta"># 部署到GitHub page上</span></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>
  在浏览器输入<code>username.github.io</code>就可以访问你的博客了(例如：<code>Vicxiaoyezi.github.io</code>)。</li>
</ul>
<h1 id="博客的基本使用"><a href="#博客的基本使用" class="headerlink" title="博客的基本使用"></a>博客的基本使用</h1><ul>
<li>创建新文章，博客目录下执行以下命令  <figure class="highlight vala"><table><tr><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="string">&#x27;文章标题&#x27;</span></span><br><span class="line"><span class="meta">#例如：hexo new Mac下使用Hexo-Github搭建个人博客</span></span><br></pre></td></tr></table></figure>
  这样会在本地博客的source-&gt;_posts路径下看到新建的文章，是md格式的，找一个markdown文本编辑器进行编辑即可。</li>
<li>编辑完成之后本地地址预览，在博客目录下运行以下命令  <figure class="highlight sas"><table><tr><td class="code"><pre><span class="line">hexo clean <span class="variable">&amp;&amp;</span> hexo g <span class="variable">&amp;&amp;</span> hexo s</span><br></pre></td></tr></table></figure></li>
<li>编辑完成之后上传Github，在博客目录下运行以下命令  <figure class="highlight sas"><table><tr><td class="code"><pre><span class="line">hexo clean <span class="variable">&amp;&amp;</span> hexo g <span class="variable">&amp;&amp;</span> hexo d</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="Hexo博客美化及功能增添"><a href="#Hexo博客美化及功能增添" class="headerlink" title="Hexo博客美化及功能增添"></a>Hexo博客美化及功能增添</h1><p><a href="https://hexo.io/themes/">Hexo官网主题</a><br>Hexo主题在Github上有很多，如</p>
<p><a href="https://github.com/theme-next/hexo-theme-next">https://github.com/theme-next/hexo-theme-next</a><br><a href="https://github.com/litten/hexo-theme-yilia">https://github.com/litten/hexo-theme-yilia</a><br><a href="https://github.com/viosey/hexo-theme-material">https://github.com/viosey/hexo-theme-material</a><br><a href="https://github.com/LouisBarranqueiro/hexo-theme-tranquilpeak">https://github.com/LouisBarranqueiro/hexo-theme-tranquilpeak</a><br><a href="https://github.com/pinggod/hexo-theme-apollo">https://github.com/pinggod/hexo-theme-apollo</a><br><a href="https://github.com/ppoffice/hexo-theme-icarus">https://github.com/ppoffice/hexo-theme-icarus</a></p>
<p>挑选自己喜欢的一款。当然自己能够DIY，但是路很长慢慢来。</p>
<h1 id="绑定个人域名"><a href="#绑定个人域名" class="headerlink" title="绑定个人域名"></a>绑定个人域名</h1><p>如果你想拥有一个炫酷的域名，那就往下看吧</p>
<h2 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a>购买域名</h2><p>可以去<a href="https://wanwang.aliyun.com/">万网</a>买，也可以去其它地方。具体购买过程就不多讲了。</p>
<h2 id="配置DNS地址"><a href="#配置DNS地址" class="headerlink" title="配置DNS地址"></a>配置DNS地址</h2><p>进入万网-控制台-域名-具体域名管理-DNS修改<br>修改DNS为DNSPod的免费DNS地址：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">f1g1ns1<span class="selector-class">.dnspod</span><span class="selector-class">.net</span> </span><br><span class="line">f1g1ns2<span class="selector-class">.dnspod</span>.net</span><br></pre></td></tr></table></figure>
<p><img src="/.kim//15587591564790.jpg" alt="-w887"></p>
<h2 id="获取自己-github-的二级域名的-IP地址"><a href="#获取自己-github-的二级域名的-IP地址" class="headerlink" title="获取自己 github 的二级域名的 IP地址"></a>获取自己 github 的二级域名的 IP地址</h2><p>直接在终端输入以下命令(username换成自己的)</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line">ping username.github.io</span><br><span class="line"><span class="meta">#例如：ping Vicxiaoyezi.github.io </span></span><br><span class="line">```   </span><br><span class="line"><span class="meta">## 域名解析</span></span><br><span class="line">注册一个[DNSPod](https:<span class="comment">//www.dnspod.cn/)账号，登录之后把我们新注册的域名加进去，在域名解析界面添加3条记录</span></span><br><span class="line">   </span><br></pre></td></tr></table></figure>
<p>@          A             192.30.252.153<br>@          A             vic.kim.</p>
<p>```<br>如图所示。<br><img src="/.kim//15587594887957.jpg" alt="-w782"></p>
<h2 id="设置CNAME"><a href="#设置CNAME" class="headerlink" title="设置CNAME"></a>设置CNAME</h2><p>在 hexo 项目下，source 文件夹下面创建 CNAME 文件（没有后缀名的），在里面写上购买的域名。比如：<br><img src="/.kim//15587599409015.jpg" alt="-w375"></p>
<p>在github上面，打开<code>username.github.io</code>项目的（Settings）设置，然后在 GitHub Pages的 Custom domain设置里填上购买的域名。比如：<br><img src="/.kim//15587601040293.jpg" alt="-w770"></p>
<p>到这里就绑定域名成功了。</p>
<p>最后晒上我的博客地址：<a href="https://vic.kim/">vic.kim</a><br>祝大家也早日拥有自己的博客~</p>
]]></content>
      <categories>
        <category>Hexo Next</category>
      </categories>
      <tags>
        <tag>Hexo Next</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac电脑用终端生成SSH key 访问自己的Github</title>
    <url>/2019/05/21/Mac%E7%94%B5%E8%84%91%E7%94%A8%E7%BB%88%E7%AB%AF%E7%94%9F%E6%88%90SSH%20key%20%E8%AE%BF%E9%97%AE%E8%87%AA%E5%B7%B1%E7%9A%84Github/</url>
    <content><![CDATA[<h1 id="首先检测自己电脑是否存在-SSH-key"><a href="#首先检测自己电脑是否存在-SSH-key" class="headerlink" title="首先检测自己电脑是否存在 SSH key"></a>首先检测自己电脑是否存在 SSH key</h1><p>在生成SSH密钥之前，您可以检查是否有任何现有的SSH密钥。</p>
<ol>
<li><p>打开终端</p>
</li>
<li><p>输入ls -al ~/.ssh以查看是否存在现有SSH密钥：</p>
 <figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ls</span> -al ~<span class="string">/.ssh</span></span><br><span class="line"><span class="comment"># 列出.ssh目录中的文件(如果存在的话)</span></span><br></pre></td></tr></table></figure></li>
<li><p>检查目录列表以查看您是否已拥有公共SSH密钥。</p>
<ul>
<li>如果你本地没有生成的话<br>  终端上面会显示：No such   file or directory</li>
<li>如果已经存在的话，<br>  则会显示 id_rsa 和 id_rsa.pub</li>
</ul>
</li>
</ol>
<h1 id="如果本地没有的话，我们要自己生成新的SSH秘钥"><a href="#如果本地没有的话，我们要自己生成新的SSH秘钥" class="headerlink" title="如果本地没有的话，我们要自己生成新的SSH秘钥"></a>如果本地没有的话，我们要自己生成新的SSH秘钥</h1><ol>
<li><p>开放式终端。</p>
</li>
<li><p>输入下面的命令，记得替换您的GitHub电子邮件地址。</p>
 <figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ssh</span>-keygen -t rsa -b <span class="number">4096</span> -C <span class="string">&quot;your_email@example.com&quot;</span></span><br><span class="line"><span class="comment">#&quot;your_email@example.com&quot;为示例邮箱，此处应填写为你在github上面注册的邮箱。</span></span><br></pre></td></tr></table></figure>

<p> 这将使用提供的电子邮件作为标签创建一个新的ssh密钥。</p>
<blockquote>
<p>Generating public/private rsa key pair.</p>
</blockquote>
</li>
<li><p>当系统提示您“输入要保存密钥的文件”时，按Enter键使用默认文件位置。</p>
<blockquote>
<p>Enter a file in which to save the key (/Users/you/.ssh/id_rsa): [Press enter]</p>
</blockquote>
</li>
<li><p>在提示符下，键入安全密码。可以连续Enter，不设置密码。</p>
<blockquote>
<p>Enter passphrase (empty for no passphrase): [Type a passphrase]<br>Enter same passphrase again: [Type passphrase again]</p>
</blockquote>
</li>
</ol>
<p>成功后，终端显示</p>
<blockquote>
<p>Your identitification has been saved in /Users/xxx/.ssh/id_rsa.<br>Your public key has been saved in /user/xxx/id_rsa.pub.<br>the key fingerprint is xxxxxxxxxx…….xxxxxxxx <a href="mailto:&#x79;&#x6f;&#x75;&#x72;&#x5f;&#101;&#x6d;&#97;&#105;&#x6c;&#x40;&#101;&#120;&#x61;&#109;&#112;&#x6c;&#x65;&#x2e;&#x63;&#111;&#109;">&#x79;&#x6f;&#x75;&#x72;&#x5f;&#101;&#x6d;&#97;&#105;&#x6c;&#x40;&#101;&#120;&#x61;&#109;&#112;&#x6c;&#x65;&#x2e;&#x63;&#111;&#109;</a><br>The key’s randomart image is:<br>![-w465](Mac电脑用终端生成SSH key 访问自己的Github/15577192525730.jpg)</p>
</blockquote>
<h1 id="将SSH密钥添加到ssh-agent"><a href="#将SSH密钥添加到ssh-agent" class="headerlink" title="将SSH密钥添加到ssh-agent"></a>将SSH密钥添加到ssh-agent</h1><ol>
<li><p>在后台启动ssh-agent</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(ssh-agent -s)</span>&quot;</span></span><br><span class="line">&gt; Agent pid 59566</span><br></pre></td></tr></table></figure></li>
<li><p>终端输入命令：<br> <code>ssh-add -K ~/.ssh/id_rsa</code><br> 如果设置密码，此时会要求输入passphrase（输入步骤 二 中的 passphrase就好 ）</p>
</li>
</ol>
<p>成功后，中选显示：</p>
<blockquote>
<p> Identity added: /Users/xxx/.ssh/id_rsa (<a href="mailto:&#121;&#111;&#117;&#114;&#95;&#101;&#x6d;&#97;&#x69;&#x6c;&#64;&#x65;&#120;&#x61;&#109;&#112;&#x6c;&#101;&#x2e;&#x63;&#x6f;&#109;">&#121;&#111;&#117;&#114;&#95;&#101;&#x6d;&#97;&#x69;&#x6c;&#64;&#x65;&#120;&#x61;&#109;&#112;&#x6c;&#101;&#x2e;&#x63;&#x6f;&#109;</a>)</p>
</blockquote>
<h1 id="添加SSH-key-到Github-上"><a href="#添加SSH-key-到Github-上" class="headerlink" title="添加SSH key 到Github 上"></a>添加SSH key 到Github 上</h1><ol>
<li><p>将SSH密钥复制到剪贴板。</p>
 <figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">pbcopy &lt; ~<span class="regexp">/.ssh/i</span>d_rsa.pub</span><br><span class="line"><span class="comment"># 复制id_rsa.pub的内容到剪贴板</span></span><br></pre></td></tr></table></figure>
<blockquote>
<pre><code>提示：如果pbcopy不起作用，您可以找到隐藏.ssh文件夹，在文本编辑器中打开id_rsa.pub文件，然后将文件内容复制到剪贴板。
</code></pre>
</blockquote>
</li>
</ol>
<ol start="2">
<li><p>在任意页面的右上角，单击您的个人资料照片，然后单击“Settings”。<br> ![](Mac电脑用终端生成SSH key 访问自己的Github/15577199319629.jpg)</p>
</li>
<li><p>在用户设置侧栏中，单击“SSH and GPG keys”。<br>![](Mac电脑用终端生成SSH key 访问自己的Github/15577200089972.jpg)</p>
</li>
<li><p>单击“ New SSH key”<br>![](Mac电脑用终端生成SSH key 访问自己的Github/15577201145279.jpg)</p>
</li>
<li><p>在“Title”字段中添加描述性标签，Key字段中粘贴您复制的id_rsa.pub内容。最后点击“Add SSH key”<br>![](Mac电脑用终端生成SSH key 访问自己的Github/15577202167548.jpg)</p>
</li>
<li><p>最后请确认您的GitHub密码。<br>![](Mac电脑用终端生成SSH key 访问自己的Github/15577204012764.jpg)</p>
</li>
</ol>
<h1 id="如何检测SSH-key"><a href="#如何检测SSH-key" class="headerlink" title="如何检测SSH key"></a>如何检测SSH key</h1><ol>
<li><p>终端输入命令：<code>ssh git@github.com</code></p>
</li>
<li><p>验证SSH key是否有权限访问 你的 github，输入“yes”</p>
<blockquote>
<p>The authenticity of host ‘github.com (13.250.177.223)’ can’t be established.<br>RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.<br>Are you sure you want to continue connecting (yes/no)? yes</p>
</blockquote>
</li>
<li><p>成功会显示为</p>
<blockquote>
<p> Hi you name! You’ve successfully authenticated, but GitHub does not provide shell access.</p>
</blockquote>
</li>
</ol>
]]></content>
      <categories>
        <category>资料</category>
      </categories>
      <tags>
        <tag>资料</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac安装Ruby版本管理器RVM</title>
    <url>/2019/05/21/Mac%E5%AE%89%E8%A3%85Ruby%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%99%A8RVM/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>RVM是一个命令行工具，它允许您轻松地安装，管理和使用从解释器到多组宝石的多个ruby环境。</p>
<h1 id="安装Ruby原因"><a href="#安装Ruby原因" class="headerlink" title="安装Ruby原因"></a>安装Ruby原因</h1><p>虽然 macOS 自带了一个 ruby 环境，但是是系统自己使用的，所以权限很小，只有 system。而/Library 目录是 root 权限,所以很多会提示无权限。</p>
<h1 id="安装RVM"><a href="#安装RVM" class="headerlink" title="安装RVM"></a>安装RVM</h1><ol>
<li><p>安装mpapis公钥。但是，正如安装页面所记录的，您可能需要gpg。Mac OS X不附带gpg，因此在安装公钥之前，您需要安装gpg。</p>
<p> Homebrew安装gpg ：</p>
 <figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>gnupg </span><br></pre></td></tr></table></figure></li>
<li><p>安装完gpg之后，你可以安装mpapis公钥：</p>
 <figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">gpg2</span> --recv-keys <span class="number">409</span>B<span class="number">6</span>B<span class="number">1796</span>C<span class="number">275462</span>A<span class="number">1703113804</span>BB<span class="number">82</span>D<span class="number">39</span>DC<span class="number">0</span>E<span class="number">3</span> <span class="number">7</span>D<span class="number">2</span>BAF<span class="number">1</span>CF<span class="number">37</span>B<span class="number">13</span>E<span class="number">2069</span>D<span class="number">6956105</span>BD<span class="number">0</span>E<span class="number">739499</span>BDB</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装最新版本的Ruby的RVM</p>
 <figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">\curl -sSL https:<span class="regexp">//g</span>et.rvm.io | bash -s stable</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装完载入 RVM 环境：</p>
 <figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">source</span> ~<span class="regexp">/.rvm/</span>scripts/rvm</span><br></pre></td></tr></table></figure></li>
<li><p>检查版本</p>
 <figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">rvm -v</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>（如果想卸载RVM，执行以下命令）</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">rvm implode</span></span><br></pre></td></tr></table></figure>

<h1 id="使用RVM-amp-Ruby"><a href="#使用RVM-amp-Ruby" class="headerlink" title="使用RVM&amp;Ruby"></a>使用RVM&amp;Ruby</h1><h2 id="ruby-rvm-常用指令"><a href="#ruby-rvm-常用指令" class="headerlink" title="ruby rvm 常用指令"></a>ruby rvm 常用指令</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">ruby -v <span class="comment"># 查看ruby 版本</span></span><br><span class="line">rvm list known <span class="comment"># 列出已知的 ruby 版本</span></span><br><span class="line">rvm install <span class="number">2.3</span>.<span class="number">0</span> <span class="comment"># 选择指定 ruby 版本进行更新</span></span><br><span class="line">rvm get stable <span class="comment"># 更新 rvm</span></span><br><span class="line">rvm use <span class="number">2.2</span>.<span class="number">2</span> <span class="comment"># 切换到指定 ruby 版本</span></span><br><span class="line">rvm use <span class="number">2.2</span>.<span class="number">2</span> --default <span class="comment"># 设置指定 ruby 版本为默认版本</span></span><br><span class="line">rvm list <span class="comment"># 查询已安装的 ruby 版本</span></span><br><span class="line">rvm remove <span class="number">1.9</span>.<span class="number">2</span> <span class="comment"># 卸载移除 指定 ruby 版本</span></span><br><span class="line">rvm uninstall <span class="number">2.0</span>.<span class="number">0</span></span><br><span class="line">rvm system <span class="comment">#使用系统ruby(就像没有rvm一样)</span></span><br><span class="line"></span><br><span class="line">curl -L https:<span class="regexp">//g</span>et.rvm.io | bash -s stable <span class="comment"># 安装 rvm 环境</span></span><br><span class="line">curl -sSL https:<span class="regexp">//g</span>et.rvm.io | bash -s stable --ruby <span class="comment"># 默认安装 rvm 最新版本</span></span><br><span class="line">curl -sSL https:<span class="regexp">//g</span>et.rvm.io | bash -s stable --ruby=<span class="number">2.3</span>.<span class="number">0</span> <span class="comment"># 安装 rvm 指定版本</span></span><br><span class="line">source ~<span class="regexp">/.rvm/</span>scripts/rvm <span class="comment"># 载入 rvm</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Gem常用指令"><a href="#Gem常用指令" class="headerlink" title="Gem常用指令"></a>Gem常用指令</h2><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">gem -v <span class="comment"># 查看 gem 版本</span></span><br><span class="line">gem source <span class="comment"># 查看 gem 配置源</span></span><br><span class="line">gem source -l <span class="comment"># 查看 gem 配置源目录</span></span><br><span class="line">gem sources -a url <span class="comment"># 添加 gem 配置源（url 需换成网址）</span></span><br><span class="line">gem sources <span class="params">--add</span> url <span class="comment"># 添加 gem 配置源（url 需换成网址）</span></span><br><span class="line">gem sources -r url <span class="comment"># 删除 gem 配置源（url 需换成网址）</span></span><br><span class="line">gem sources <span class="params">--remove</span> url <span class="comment"># 删除 gem 配置源（url 需换成网址）</span></span><br><span class="line">gem update <span class="comment"># 更新 所有包</span></span><br><span class="line">gem update <span class="params">--system</span> <span class="comment"># 更新 Ruby Gems 软件</span></span><br><span class="line"></span><br><span class="line">gem install rake <span class="comment"># 安装 rake，从本地或远程服务器</span></span><br><span class="line">gem install rake <span class="params">--remote</span> <span class="comment"># 安装 rake，从远程服务器</span></span><br><span class="line">gem install watir -v 1.6.2 <span class="comment"># 安装 指定版本的 watir</span></span><br><span class="line">gem install watir <span class="params">--version</span> 1.6.2 <span class="comment"># 安装 指定版本的 watir</span></span><br><span class="line">gem uninstall rake <span class="comment"># 卸载 rake 包</span></span><br><span class="line">gem list d <span class="comment"># 列出 本地以 d 打头的包</span></span><br><span class="line">gem query -n &#x27;&#x27;[0-9]&#x27;&#x27; <span class="params">--local</span> <span class="comment"># 查找 本地含有数字的包</span></span><br><span class="line">gem search log <span class="params">--both</span> <span class="comment"># 查找 从本地和远程服务器上查找含有 log 字符串的包</span></span><br><span class="line">gem search log <span class="params">--remoter</span> <span class="comment"># 查找 只从远程服务器上查找含有 log 字符串的包</span></span><br><span class="line">gem search -r log <span class="comment"># 查找 只从远程服务器上查找含有log字符串的包</span></span><br><span class="line"></span><br><span class="line">gem <span class="keyword">help</span> <span class="comment"># 提醒式的帮助</span></span><br><span class="line">gem <span class="keyword">help</span> install <span class="comment"># 列出 install 命令 帮助</span></span><br><span class="line">gem <span class="keyword">help</span> examples <span class="comment"># 列出 gem 命令使用一些例子</span></span><br><span class="line">gem build rake.gemspec <span class="comment"># 把 rake.gemspec 编译成 rake.gem</span></span><br><span class="line">gem check -v pkg/rake-0.4.0.gem <span class="comment"># 检测 rake 是否有效</span></span><br><span class="line">gem cleanup <span class="comment"># 清除 所有包旧版本，保留最新版本</span></span><br><span class="line">gem contents rake <span class="comment"># 显示 rake 包中所包含的文件</span></span><br><span class="line">gem dependency rails -v 0.10.1 <span class="comment"># 列出 与 rails 相互依赖的包</span></span><br><span class="line">gem environment <span class="comment"># 查看 gem 的环境</span></span><br><span class="line"></span><br><span class="line">sudo gem -v <span class="comment"># 查看 gem 版本（以管理员权限）</span></span><br><span class="line">sudo gem install cocoa pods <span class="comment"># 安装 CocoaPods（以管理员权限）</span></span><br><span class="line">sudo gem install cocoapods <span class="comment"># 安装 CocoaPods（以管理员权限）</span></span><br><span class="line">sudo gem install cocoapods <span class="params">--pre</span> <span class="comment"># 安装 CocoaPods 至预览版（以管理员权限）</span></span><br><span class="line">sudo gem install cocoapods -v 0.39.0 <span class="comment"># 安装 CocoaPods 指定版本（以管理员权限）</span></span><br><span class="line">sudo gem update cocoapods <span class="comment"># 更新 CocoaPods 至最新版（以管理员权限）</span></span><br><span class="line">sudo gem update cocoapods <span class="params">--pre</span> <span class="comment"># 更新 CocoaPods 至预览版（以管理员权限）</span></span><br><span class="line">sudo gem uninstall cocoapods -v 0.39.0 <span class="comment"># 移除 CocoaPods 指定版本（以管理员权限）</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="pod常用指令"><a href="#pod常用指令" class="headerlink" title="pod常用指令"></a>pod常用指令</h2><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">pod setup <span class="comment"># CocoaPods 将信息下载到~/.cocoapods/repos 目录下。如果安装 CocoaPods 时不执行此命令，在初次执行 pod intall 命令时，系统也会自动执行该指令</span></span><br><span class="line">pod --version <span class="comment"># 检查 CocoaPods 是否安装成功及其版本号</span></span><br><span class="line">pod <span class="keyword">install</span> <span class="comment"># 安装 CocoaPods 的配置文件 Podfile</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>资料</category>
      </categories>
      <tags>
        <tag>资料</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac终端安装指定版本node</title>
    <url>/2019/08/21/Mac%E7%BB%88%E7%AB%AF%E5%AE%89%E8%A3%85%E6%8C%87%E5%AE%9A%E7%89%88%E6%9C%ACnode/</url>
    <content><![CDATA[<h1 id="安装brew"><a href="#安装brew" class="headerlink" title="安装brew"></a>安装brew</h1><p>终端上运行</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">/usr/bin/ruby -e “<span class="constructor">$(<span class="params">curl</span> -<span class="params">fsSL</span> <span class="params">https</span>:<span class="operator">/</span><span class="operator">/</span><span class="params">raw</span>.<span class="params">githubusercontent</span>.<span class="params">com</span><span class="operator">/</span>Homebrew<span class="operator">/</span><span class="params">install</span><span class="operator">/</span><span class="params">master</span><span class="operator">/</span><span class="params">install</span>)</span>”</span><br></pre></td></tr></table></figure>

<h1 id="安装NVM"><a href="#安装NVM" class="headerlink" title="安装NVM"></a>安装NVM</h1><p><code>brew install nvm</code></p>
<p>安装完成之后打开shell的配置文件</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> ~</span><br><span class="line">vim <span class="string">.bash_profile</span></span><br></pre></td></tr></table></figure>

<p>在文件里添加以下命令</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">export NVM_DIR=~/.nvm</span><br><span class="line">source <span class="constructor">$(<span class="params">brew</span> --<span class="params">prefix</span> <span class="params">nvm</span>)</span>/nvm.sh</span><br></pre></td></tr></table></figure>

<p>然后重新source</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> .bash_profile</span><br></pre></td></tr></table></figure>

<h1 id="使用nvm安装node"><a href="#使用nvm安装node" class="headerlink" title="使用nvm安装node"></a>使用nvm安装node</h1><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">nvm ls-remote 查看 所有的<span class="keyword">node</span><span class="title">可用版本</span></span><br><span class="line"><span class="title">nvm</span> install xxx 下载你想要的版本</span><br><span class="line">nvm use xxx 使用指定版本的<span class="keyword">node</span><span class="title"></span></span><br><span class="line"><span class="title">nvm</span> alias default xxx 每次启动终端都使用该版本的<span class="keyword">node</span><span class="title"></span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>资料</category>
      </categories>
      <tags>
        <tag>资料</tag>
      </tags>
  </entry>
  <entry>
    <title>Postman的使用</title>
    <url>/2019/05/22/Postman%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="常见接口测试工具"><a href="#常见接口测试工具" class="headerlink" title="常见接口测试工具"></a>常见接口测试工具</h1><ul>
<li>Postman: 简单方便的接口调试工具，便于分享和协作。具有接口调试，接口集管理，环境配置，参数化，断言，批量执行，录制接口，Mock Server, 接口文档，接口监控等功能</li>
<li>JMeter: 开源接口测试及压测工具，支持Linux及无界面运行</li>
<li>LR: 商业版接口性能测试工具，简单易用，功能强大</li>
<li>SoupUI: 开源，WebService接口常用测试工具，也可以测试Rest接口及接口安全</li>
</ul>
<h1 id="新版Postman使用简介"><a href="#新版Postman使用简介" class="headerlink" title="新版Postman使用简介"></a>新版Postman使用简介</h1><p>Postman 官网地址：<a href>https://www.getpostman.com/pricing</a><br><img src="/.kim//Postman%E4%B8%BB%E7%95%8C%E9%9D%A2.png" alt="Postman主界面"><br><img src="/.kim//Postman%E7%94%A8%E6%B3%95%E4%BB%8B%E7%BB%8D.png" alt="Postman用法介绍"></p>
<h2 id="工具栏"><a href="#工具栏" class="headerlink" title="工具栏"></a>工具栏</h2><ul>
<li>New: 新建，可以新建Request请求，Collection请求集，环境等等</li>
<li>Import: 导入，可以导入别人导出的请求集</li>
<li>Runner: 运行一个请求集（批量执行）</li>
<li>Invite: 邀请（需要注册，邀请进行协作）</li>
<li>同步图标： （需要注册，同步你的项目到云端）</li>
<li>抓包图标： 抓包/捕获请求，用于开启Postman代理， 手动设置代理（或手机代理）后可抓包/录制请求</li>
<li>设置图标： Postman设置</li>
<li>消息图标： 官方及协助消息</li>
<li>收藏图标： 我的收藏（需要注册）</li>
<li>云端图标： 用户云端数据（需要注册）</li>
</ul>
<h2 id="接口管理区"><a href="#接口管理区" class="headerlink" title="接口管理区"></a>接口管理区</h2><ul>
<li>History: 请求历史记录，可以查询到之前的请求记录</li>
<li>Collections: 接口集，相当于一个接口项目或测试计划，接口集中可以建立无限极子文件夹，用于对接口进行分组管理</li>
</ul>
<h2 id="环境管理区"><a href="#环境管理区" class="headerlink" title="环境管理区"></a>环境管理区</h2><ul>
<li>环境切换：用于切换环境</li>
<li>环境预览：用于快速预览环境中的所有变量</li>
<li>环境管理：用于添加修改环境及环境变量，以及全局变量</li>
</ul>
<h2 id="什么是环境"><a href="#什么是环境" class="headerlink" title="什么是环境"></a>什么是环境</h2><p>接口完整地址 = 服务地址 + 接口地址， 如<br><code>https://app.jike.ruguoapp.com + /1.0/users/login</code><br>环境是一套配置，包含许多环境变量。在接口测试中，根据部署在不同的服务器上，服务器地址有可能不同，而同一个接口，接口地址是不变的。为了测试部署在不同服务器上的同一套接口，我们可以建立不同的环境，不同环境中host变量使用不同的地址</p>
<h2 id="接口设计区"><a href="#接口设计区" class="headerlink" title="接口设计区"></a>接口设计区</h2><p>可以通过上方tab边上的+号，新建多个请求。接口设计区从上到下分为请求区和响应区</p>
<ul>
<li><p>请求区</p>
<ul>
<li>请求地址行：可以选择请求方法（GET/POST/…），填写请求地址，发送请求和保存请求到测试集</li>
<li>请求数据区：分为授权，请求头，请求数据，请求发送前执行的脚本（用于准备数据），请求结束后执行的脚本（用于断言）</li>
</ul>
</li>
<li><p>响应区：</p>
<ul>
<li>响应内容： 可以查看Pretty（美化格式），Raw（原始格式），Preview（HTML预览格式）</li>
<li>响应Cookie</li>
<li>响应头</li>
<li>测试结果，对应请求中Tests中设置的断言<h2 id="Collection请求集"><a href="#Collection请求集" class="headerlink" title="Collection请求集"></a>Collection请求集</h2>测试集是Postman中接口管理的一个“整体”单位，运行、导出、分享等都是基于测试集的。</li>
</ul>
</li>
<li><p>新建测试集： New按钮-&gt;Collection 或 直接点击测试集列表上方的新建测试集按钮<br><img src="/.kim//%E6%96%B0%E5%BB%BA%E6%B5%8B%E8%AF%95%E9%9B%86.png" alt="新建测试集"></p>
<ul>
<li>授权： 测试集及其子文件夹下的接口统一使用该授权，不用每个接口再都单独设置一遍</li>
<li>请求前脚本： 测试集的每个接口公用的请求前脚本</li>
<li>请求后断言： 测试集每个接口公用的请求后脚本</li>
<li>请求集变量： 请求集中公用的一些变量</li>
</ul>
</li>
<li><p>子文件夹：子文件夹的属性中同样拥有描述，授权，请求前脚本，和请求后断言（没有变量，一个请求集的变量统一管理），实现了不同范围（Scope）的Fixture功能。</p>
</li>
<li><p>请求集导出：请求集可以导出并发送给别人（不携带环境信息），别人通过导入来使用你的接口</p>
</li>
<li><p>请求集分享： 请求集直接分享给别人（双方都需要注册）</p>
</li>
<li><p>环境管理</p>
<ul>
<li>我们可以环境中设置多个变量，以供在请求中使用</li>
<li>环境变量使用方法：<ul>
<li>选择环境，在请求URL或者请求Body里使用来使用环境变量</li>
<li>变量可以在请求Body的各种格式中使用</li>
<li>不能直接在请求前脚本（Pre-request Script）和请求后脚本（Tests）中使用</li>
</ul>
</li>
<li>环境管理中还可以点击“Global”添加全局变量，环境变量只有当选择了该环境时生效，全局变量在任何环境中生效，测试集中的变量只在当前测试集生效，当测试集变量，环境变量，全局变量有重复的变量名时，优先级为：环境变量&gt;全局变量&gt;测试集变量<br><img src="/.kim//%E8%AE%BE%E7%BD%AE%E5%8F%98%E9%87%8F.png" alt="设置变量"><br><img src="/.kim//%E4%BD%BF%E7%94%A8%E5%8F%98%E9%87%8F.png" alt="使用变量"></li>
</ul>
</li>
</ul>
<h2 id="Params使用"><a href="#Params使用" class="headerlink" title="Params使用"></a>Params使用</h2><p>当请求URL中参数很多时，不方便进行添加和查看，可以点击Params按钮，以表格的方式添加变量及值，从表格添加后，变量和值会自动添加到URL中</p>
<h2 id="请求设计"><a href="#请求设计" class="headerlink" title="请求设计"></a>请求设计</h2><ul>
<li>授权：如果接口需要授权，可以在该页面设置授权方式（type）和授权信息</li>
<li>Header: 请求头，可以设置请求类型（Content-Type）和Cookie</li>
<li>Body: 请求数据<ul>
<li>form-data：混合表单，支持上传文件</li>
<li>x-www-form-urlencoded：文本表单</li>
<li>raw：原始格式，支持JSON/XML格式（后面可选择）</li>
<li>binary: 二进制格式，用于发送二进制数据流</li>
</ul>
</li>
<li>Pre-request Script: 请求前脚本，Javascript语法，用于在发送请求前生成一些动态数据或做一些处理</li>
<li>Tests：请求后脚本，Javascript语法，用于请求返回后做一些处理或断言结果</li>
</ul>
<h2 id="Postman发送各种格式请求的方法："><a href="#Postman发送各种格式请求的方法：" class="headerlink" title="Postman发送各种格式请求的方法："></a>Postman发送各种格式请求的方法：</h2><p>注意：选择不同的请求，会自动在Header中添加Content-Type信息</p>
<h2 id="Tests断言"><a href="#Tests断言" class="headerlink" title="Tests断言"></a>Tests断言</h2><p>一个Postman的test本质上是JavaScript的代码可以用来为一些特殊的test设置值。你可以在对象中设置一个描述性的键作为一个元素，然后声明他如果是true或false。<br>tests[“Body contains user_id”] = responseBody.has(“user_id”)<br>这回核对body中是否包含了user_id这个字符串。如果你需要，你可以增加更多的键，这取决于你要用test做多少的事情。</p>
<ul>
<li>HTTP状态码断言:</li>
</ul>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">tests[<span class="string">&quot;HTTP状态码200&quot;</span>]=responseCode.code == <span class="number">200</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>响应包含内容断言：</li>
</ul>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">tests[<span class="string">&quot;状态码200&quot;</span>] = responseBody.has(<span class="string">&quot;登录成功&quot;</span><span class="string">|&quot;</span>你已经登录，无需重复登录<span class="string">&quot;);</span></span><br></pre></td></tr></table></figure>
<p>接口样例<br>POST <a href="https://demo.fastadmin.net/admin/index/login.html">https://demo.fastadmin.net/admin/index/login.html</a> 用户名/密码： username:admin password:123456</p>
<ul>
<li>JSON响应断言</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> jsonData = <span class="built_in">JSON</span>.parse(responseBody); <span class="comment">//获取body中返回的所有参数</span></span><br><span class="line">tests[<span class="string">&quot;code为100000表示成功&quot;</span>] = jsonData.code == <span class="string">&quot;100000&quot;</span></span><br></pre></td></tr></table></figure>
<p>接口样例 GET <a href="http://www.tuling123.com/openapi/api?key=ec961279f453459b9248f0aeb6600bbe&amp;info=%E4%BD%A0%E5%A5%BD">http://www.tuling123.com/openapi/api?key=ec961279f453459b9248f0aeb6600bbe&amp;info=你好</a></p>
<p><img src="/.kim//tests.png" alt="tests"></p>
<p>Postman尝试通过列出编辑器旁边常用的片段来简化过程。您可以选择要添加的代码段，并将相应的代码添加到测试编辑器中。</p>
<h2 id="Runner-测试集批量执行"><a href="#Runner-测试集批量执行" class="headerlink" title="Runner: 测试集批量执行"></a>Runner: 测试集批量执行</h2><ul>
<li>支持设置迭代次数</li>
<li>支持加载csv或json类测试数据</li>
<li>操作方法：<a href="https://demo.fastadmin.net/admin/index/login.html%E6%8E%A5%E5%8F%A3">https://demo.fastadmin.net/admin/index/login.html接口</a></li>
<li>新建一个Collection，比如名称Demo2</li>
<li>填入URL：<a href="https://demo.fastadmin.net/admin/index/login.html%EF%BC%8C">https://demo.fastadmin.net/admin/index/login.html，</a> 选择POST方法</li>
<li>请求数据（Body）格式选x-www-form-urlecoded，请求数据填写username     password  ，这里使用了两个变量来做参数化</li>
<li>保存请求到Demo2中</li>
<li>在电脑上新建一个data.csv文件，第一行为变量名</li>
<li>点击Postman工具栏的Runner按钮，Collection选择Demo2， Data选择数据文件data.csv， 点击运行Demo2</li>
</ul>
<h2 id="环境变量的用法详解"><a href="#环境变量的用法详解" class="headerlink" title="环境变量的用法详解"></a>环境变量的用法详解</h2><p>在postman中，可以利用tests将接口返回的response设置为环境变量，供后续接口使用（类似参数化的概念）</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">var jsonData =<span class="module-access"><span class="module"><span class="identifier">JSON</span>.</span></span>parse(responseBody); <span class="comment">//获取body中返回的所有参数</span></span><br><span class="line">postman.set<span class="constructor">EnvironmentVariable(<span class="string">&quot;appKey&quot;</span>,<span class="params">jsonData</span>.<span class="params">data</span>.<span class="params">appKey</span>)</span>;<span class="comment">//把返回参数中的keys设置为环境变量</span></span><br><span class="line"></span><br><span class="line">var data = postman.get<span class="constructor">ResponseHeader(<span class="string">&quot;Access-Token&quot;</span>)</span>; <span class="comment">//获取响应头所有参数</span></span><br><span class="line">postman.set<span class="constructor">EnvironmentVariable(<span class="string">&quot;Access-Token&quot;</span>,<span class="params">data</span>)</span>; <span class="comment">//把返回参数中的Access-Token设置为环境变量</span></span><br></pre></td></tr></table></figure>

<h1 id="postman常用方法集合"><a href="#postman常用方法集合" class="headerlink" title="postman常用方法集合"></a>postman常用方法集合</h1><p><a href="https://learning.getpostman.com/docs/postman/scripts/test_examples/">https://learning.getpostman.com/docs/postman/scripts/test_examples/</a></p>
<h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><figure class="highlight q"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置环境变量</span></span><br><span class="line">pm.environment.<span class="built_in">set</span>(<span class="string">&quot;variable_key&quot;</span>, <span class="string">&quot;variable_value&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将一个嵌套的对象设置为一个环境变量</span></span><br><span class="line"><span class="built_in">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">pm.environment.<span class="built_in">set</span>(<span class="string">&quot;array&quot;</span>, JSON.stringify(array, <span class="built_in">null</span>, <span class="number">2</span>)); </span><br><span class="line"></span><br><span class="line"><span class="built_in">var</span> obj = &#123; a: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], b: &#123; c: &#x27;val&#x27; &#125; &#125;;</span><br><span class="line">pm.environment.<span class="built_in">set</span>(<span class="string">&quot;obj&quot;</span>, JSON.stringify(obj)) </span><br><span class="line"></span><br><span class="line"><span class="comment">//获取环境变量</span></span><br><span class="line">pm.environment.<span class="built_in">get</span>(<span class="string">&quot;variable_key&quot;</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">//获取环境变量（其值是字符串化对象)</span></span><br><span class="line"><span class="comment">// 如果数据来自未知源，则应该将这些语句包装在try-catch块中</span></span><br><span class="line"><span class="built_in">var</span> array = JSON.<span class="built_in">parse</span>(pm.environment.<span class="built_in">get</span>(<span class="string">&quot;array&quot;</span>));</span><br><span class="line"><span class="built_in">var</span> obj = JSON.<span class="built_in">parse</span>(pm.environment.<span class="built_in">get</span>(<span class="string">&quot;obj&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//清除环境变量</span></span><br><span class="line">pm.environment.unset(<span class="string">&quot;variable_key&quot;</span>); <span class="comment">//清除一个环境变量</span></span><br></pre></td></tr></table></figure>

<h2 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h2><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">pm.<span class="built_in">globals</span>.<span class="built_in">set</span>(<span class="string">&quot;variable_key&quot;</span>, <span class="string">&quot;variable_value&quot;</span>);<span class="comment"> //设置一个全局变量</span></span><br><span class="line">pm.<span class="built_in">globals</span>.<span class="built_in">get</span>(<span class="string">&quot;variable_key&quot;</span>);<span class="comment"> //获取一个全局变量</span></span><br><span class="line">pm.<span class="built_in">globals</span>.unset(<span class="string">&quot;variable_key&quot;</span>);<span class="comment"> //清除一个全局变量</span></span><br></pre></td></tr></table></figure>

<h2 id="获取一个变量"><a href="#获取一个变量" class="headerlink" title="获取一个变量"></a>获取一个变量</h2><p>该函数在全局变量和活动环境中搜索变量</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">pm.variables.<span class="builtin-name">get</span>(<span class="string">&quot;variable_key&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="检查response-body中是否包含某个string"><a href="#检查response-body中是否包含某个string" class="headerlink" title="检查response body中是否包含某个string"></a>检查response body中是否包含某个string</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">tests[&quot;Body matches string&quot;] = responseBody.has(&quot;string_you_want_to_search&quot;);</span><br><span class="line"></span><br><span class="line">pm.test(&quot;Body matches string&quot;, <span class="keyword">function</span> () &#123;</span><br><span class="line">    pm.expect(pm.response.text()).<span class="keyword">to</span>.<span class="keyword">include</span>(&quot;string_you_want_to_search&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="检查response-body是否与某个string相等"><a href="#检查response-body是否与某个string相等" class="headerlink" title="检查response body是否与某个string相等"></a>检查response body是否与某个string相等</h2><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">tests[<span class="string">&quot;Body is correct&quot;</span>] = responseBody === <span class="string">&quot;哈哈哈&quot;</span>; <span class="comment">//必须完全匹配</span></span><br><span class="line"></span><br><span class="line">pm.test(<span class="string">&quot;Body is correct&quot;</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    pm.response.to.have.body(<span class="string">&quot;response_body_string&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="检测JSON中的某个值是否等于预期的值"><a href="#检测JSON中的某个值是否等于预期的值" class="headerlink" title="检测JSON中的某个值是否等于预期的值"></a>检测JSON中的某个值是否等于预期的值</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">data</span> = JSON.parse(responseBody);</span><br><span class="line">tests[<span class="string">&quot;Your test name&quot;</span>] = <span class="keyword">data</span>.value === <span class="number">100</span>;</span><br><span class="line">tests[<span class="string">&quot;状态码为301&quot;</span>] = <span class="keyword">data</span>[<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;301&quot;</span>;</span><br><span class="line">tests[<span class="string">&quot;message&quot;</span>] = <span class="keyword">data</span>[<span class="string">&quot;message&quot;</span>] == <span class="string">&quot;购买商品库存不足&quot;</span>;</span><br><span class="line">tests[<span class="string">&quot;list&quot;</span>] = <span class="keyword">data</span>[<span class="string">&quot;lists&quot;</span>][<span class="number">0</span>] == <span class="string">&quot;11&quot;</span>;</span><br><span class="line"></span><br><span class="line">pm.test(<span class="string">&quot;Your test name&quot;</span>, function () &#123;</span><br><span class="line">    <span class="keyword">var</span> jsonData = pm.response.json();</span><br><span class="line">    pm.<span class="keyword">expect</span>(jsonData.value).to.eql(<span class="number">100</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>


<p>JSON.parse()方法，把json字符串转化为对象。parse()会进行json格式的检查是一个安全的函数。<br>如：检查json中某个数组元素的个数(这里检测programs的长度)</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">var</span> <span class="class"><span class="keyword">data</span> = <span class="type">JSON</span>.parse(<span class="title">responseBody</span>);</span></span><br><span class="line"><span class="title">tests</span>[<span class="string">&quot;program&#x27;s lenght&quot;</span>] = <span class="class"><span class="keyword">data</span>.programs.length === 5;</span></span><br></pre></td></tr></table></figure>

<h2 id="测试response-Headers中的某个元素是否存在-如-Content-Type"><a href="#测试response-Headers中的某个元素是否存在-如-Content-Type" class="headerlink" title="测试response Headers中的某个元素是否存在(如:Content-Type)"></a>测试response Headers中的某个元素是否存在(如:Content-Type)</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//g</span>etResponseHeader()方法会返回header的值，如果该值存在的话</span><br><span class="line">tests[<span class="string">&quot;Content-Type is present&quot;</span>] = postman.getResponseHeader(<span class="string">&quot;Content-Type&quot;</span>);  <span class="regexp">//</span>不区分大小写</span><br><span class="line">tests[<span class="string">&quot;Content-Type is present&quot;</span>] = responseHeaders.hasOwnProperty(<span class="string">&quot;Content-Type&quot;</span>); <span class="regexp">//</span>要区分大小写 </span><br><span class="line"></span><br><span class="line">pm.test(<span class="string">&quot;Content-Type is present&quot;</span>, <span class="keyword">function</span> () &#123;</span><br><span class="line">    pm.response.to.have.header(<span class="string">&quot;Content-Type&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="验证响应时间小于xxx毫秒"><a href="#验证响应时间小于xxx毫秒" class="headerlink" title="验证响应时间小于xxx毫秒"></a>验证响应时间小于xxx毫秒</h2><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">tests[<span class="string">&quot;Response time is less than 200ms&quot;</span>] = responseTime &lt; <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">pm.test(<span class="string">&quot;Response time is less than 200ms&quot;</span>, <span class="keyword">function</span> <span class="title"></span>() &#123;</span><br><span class="line">    pm.expect(pm.response.responseTime).to.be.below(200);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="响应时间在特定范围内（包含下限，上限不包括）"><a href="#响应时间在特定范围内（包含下限，上限不包括）" class="headerlink" title="响应时间在特定范围内（包含下限，上限不包括）"></a>响应时间在特定范围内（包含下限，上限不包括）</h2><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">tests<span class="literal">[&quot;R<span class="identifier">esponse</span> <span class="identifier">time</span> <span class="identifier">is</span> <span class="identifier">acceptable</span>&quot;]</span> = <span class="module-access"><span class="module"><span class="identifier">_</span>.</span></span><span class="keyword">in</span><span class="constructor">Range(<span class="params">responseTime</span>, 100, 1001)</span>; </span><br></pre></td></tr></table></figure>

<h2 id="验证状态码的值为200"><a href="#验证状态码的值为200" class="headerlink" title="验证状态码的值为200"></a>验证状态码的值为200</h2><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">tests[<span class="string">&quot;Status code is 200&quot;</span>] = responseCode.code === <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">pm.test(<span class="string">&quot;Status code is 200&quot;</span>, <span class="keyword">function</span> <span class="title"></span>() &#123;</span><br><span class="line">    pm.response.to.have.status(200);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="代码名包含一个字符串"><a href="#代码名包含一个字符串" class="headerlink" title="代码名包含一个字符串"></a>代码名包含一个字符串</h2><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">tests[<span class="string">&quot;Status code name has string&quot;</span>] = responseCode.name.has(<span class="string">&quot;Created&quot;</span>);</span><br><span class="line"></span><br><span class="line">pm.test(<span class="string">&quot;Status code name has string&quot;</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span></span> &#123;</span><br><span class="line">    pm.response.to.have.<span class="built_in">status</span>(<span class="string">&quot;Created&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="成功的POST请求状态代码"><a href="#成功的POST请求状态代码" class="headerlink" title="成功的POST请求状态代码"></a>成功的POST请求状态代码</h2><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">tests</span>[<span class="string">&quot;Successful POST request&quot;</span>] = responseCode<span class="meta">.code</span> === <span class="number">201</span> <span class="title">||</span> responseCode<span class="meta">.code</span> === <span class="number">202</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">pm.test</span>(<span class="string">&quot;Successful POST request&quot;</span>, <span class="meta">function</span> () &#123;</span><br><span class="line">    pm.expect(pm.response<span class="meta">.code</span>).to.be.oneOf([<span class="number">201</span>,<span class="number">202</span>])<span class="comment">;</span></span><br><span class="line">&#125;)<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<h2 id="使用TinyValidator获取JSON数据"><a href="#使用TinyValidator获取JSON数据" class="headerlink" title="使用TinyValidator获取JSON数据"></a>使用TinyValidator获取JSON数据</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">var schema = &#123; &quot;items&quot;: &#123; &quot;type&quot;: &quot;boolean&quot; &#125;&#125;;</span><br><span class="line">var data1 = [<span class="keyword">true</span>, <span class="keyword">false</span>];</span><br><span class="line">var data2 = [<span class="keyword">true</span>, <span class="number">123</span>];</span><br><span class="line">pm.test(<span class="string">&#x27;Schema is valid&#x27;</span>, <span class="keyword">function</span>() &#123;</span><br><span class="line">  pm.expect(tv4.<span class="keyword">validate</span>(data1, <span class="keyword">schema</span>)).<span class="keyword">to</span>.be.<span class="keyword">true</span>;</span><br><span class="line">  pm.expect(tv4.<span class="keyword">validate</span>(data2, <span class="keyword">schema</span>)).<span class="keyword">to</span>.be.<span class="keyword">true</span>;</span><br><span class="line">&#125;);</span><br><span class="line">//data1和data2是测试数据，<span class="keyword">schema</span>相当于验证<span class="type">json</span>的规范 </span><br><span class="line">//示例中验证data1和data2中的<span class="keyword">value</span>是否都是<span class="type">boolean</span>类型</span><br></pre></td></tr></table></figure>

<h2 id="获取request值："><a href="#获取request值：" class="headerlink" title="获取request值："></a>获取request值：</h2><ul>
<li>data {object}:<br>  这是一个用于请求的表单数据字典 (request.data[“key”]==”value”)</li>
<li>headers {object}:<br>  这是请求头的字典 (request.headers[“key”]==”value”)</li>
<li>method {string}:<br>  GET/POST/PUT 等.</li>
<li>url {string}:<br>  请求的url</li>
</ul>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">var</span> <span class="type">Json</span> = <span class="type">JSON</span>.parse(request.<span class="class"><span class="keyword">data</span>); </span></span><br></pre></td></tr></table></figure>

<p>假设requestBody中有”version”:”1.0”；这个值,如果想获取到version的value值，代码如下</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">var <span class="type">Json</span> = <span class="type">JSON</span>.parse(request.data); </span><br><span class="line">var version = <span class="type">Json</span>[&quot;version&quot;];</span><br></pre></td></tr></table></figure>

<h2 id="JSON-parse-和JSON-stringify"><a href="#JSON-parse-和JSON-stringify" class="headerlink" title="JSON.parse()和JSON.stringify()"></a>JSON.parse()和JSON.stringify()</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="type">JSON</span>.parse() //【从一个字符串中解析出<span class="type">json</span>对象】<span class="comment">--把string转对象</span></span><br><span class="line"><span class="type">JSON</span>.stringify() //【从一个对象中解析出字符串，主要针对[<span class="keyword">object</span> <span class="keyword">object</span>]类型数据的转换】<span class="comment">--把对象转String</span></span><br><span class="line"></span><br><span class="line">var data=&#123;<span class="type">name</span>:<span class="string">&#x27;goatling&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">JSON</span>.parse(data)</span><br><span class="line">//结果是： <span class="string">&#x27;&#123;&quot;name&quot;:&quot;goatling&quot;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="type">JSON</span>.stringify(data)</span><br><span class="line">//结果是：<span class="type">name</span>:&quot;goatling&quot;</span><br></pre></td></tr></table></figure>

<h2 id="发送异步请求。此功能既可用作预请求脚本，也可用作测试脚本。"><a href="#发送异步请求。此功能既可用作预请求脚本，也可用作测试脚本。" class="headerlink" title="发送异步请求。此功能既可用作预请求脚本，也可用作测试脚本。"></a>发送异步请求。此功能既可用作预请求脚本，也可用作测试脚本。</h2><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">pm.send<span class="constructor">Request(<span class="string">&quot;https://postman-echo.com/get&quot;</span>, <span class="params">function</span> (<span class="params">err</span>, <span class="params">response</span>)</span> &#123;</span><br><span class="line">    console.log(response.json<span class="literal">()</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="转换XML-body为JSON对象"><a href="#转换XML-body为JSON对象" class="headerlink" title="转换XML body为JSON对象"></a>转换XML body为JSON对象</h2><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">var jsonObject</span> = xml2Json(responseBody);</span><br></pre></td></tr></table></figure>

<h2 id="判断字段值是否为空typeof"><a href="#判断字段值是否为空typeof" class="headerlink" title="判断字段值是否为空typeof()"></a>判断字段值是否为空typeof()</h2><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">var Jsondata = <span class="module-access"><span class="module"><span class="identifier">JSON</span>.</span></span>parse(responseBody);</span><br><span class="line"><span class="keyword">if</span>( typeof(<span class="module-access"><span class="module"><span class="identifier">Jsondata</span>.</span></span>data) != <span class="string">&quot;undefined&quot;</span> )</span><br></pre></td></tr></table></figure>

<h2 id="分支和循环"><a href="#分支和循环" class="headerlink" title="分支和循环"></a>分支和循环</h2><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置下一个要执行的请求</span></span><br><span class="line">postman.set<span class="constructor">NextRequest(<span class="string">&quot;request_name&quot;</span>)</span>;</span><br><span class="line"><span class="comment">//停止工作流程执行</span></span><br><span class="line">postman.set<span class="constructor">NextRequest(<span class="params">null</span>)</span>;</span><br></pre></td></tr></table></figure>
<p>postman.setNextRequest()一些重点：<br>    * 指定后续请求的名称或ID，集合运行器将负责其余的请求。<br>    * 它可以用在预请求或测试脚本中。如果有多个赋值，则考虑最后一个赋值。<br>    * 如果postman.setNextRequest()请求中不存在，则集合运行器默认为线性执行并移至下一个请求</p>
<h1 id="服务端返回异常-Status-Code："><a href="#服务端返回异常-Status-Code：" class="headerlink" title="服务端返回异常 Status Code："></a>服务端返回异常 Status Code：</h1><h2 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h2><ul>
<li>1** 信息，服务器收到请求，需要请求者继续执行操作</li>
<li>2** 成功，操作被成功接收并处理</li>
<li>3** 重定向，需要进一步的操作以完成请求</li>
<li>4** 客户端错误，请求包含语法错误或无法完成请求</li>
<li>5** 服务器错误，服务器在处理请求的过程中发生了错误</li>
</ul>
<h2 id="常见HTTP响应码"><a href="#常见HTTP响应码" class="headerlink" title="常见HTTP响应码"></a>常见HTTP响应码</h2><ul>
<li>200：成功</li>
<li>301、302：请求重定向到另外一个接口</li>
<li>400：请求格式不对／服务端故意失败</li>
<li>403：禁止访问(被封禁／没有权限)</li>
<li>404：资源不存在（有可能是请求url错误或参数不正确）</li>
<li>405：请求方法不被允许（比如接口只允许Post,使用Get请求接口）</li>
<li>429：请求频率过高</li>
<li>500：服务器内部错误（通常是服务器挂了或接口Bug)</li>
<li>502、503：服务发布间隙没衔接好／挂了</li>
<li>504：网关请求超时（Bug，挂了）</li>
<li>409、406：正常返回，不应该被记录</li>
</ul>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL基础语句总结</title>
    <url>/2019/05/20/SQL%E5%9F%BA%E7%A1%80%E8%AF%AD%E5%8F%A5%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>SQL 是用于访问和处理数据库的标准的计算机语言。</p>
<h1 id="什么是-SQL？"><a href="#什么是-SQL？" class="headerlink" title="什么是 SQL？"></a>什么是 SQL？</h1><p>SQL 指结构化查询语言<br>SQL 使我们有能力访问数据库<br>SQL 是一种 ANSI 的标准计算机语言<br>编者注：ANSI，美国国家标准化组织</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">#显示数据库</span><br><span class="line"><span class="keyword">show</span> databases;</span><br><span class="line"></span><br><span class="line">#判断是否存在数据库test_mysql,有的话先删除</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> <span class="keyword">if</span> <span class="keyword">exists</span> test_mysql;</span><br><span class="line"></span><br><span class="line">#创建数据库</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> test_mysql;</span><br><span class="line"></span><br><span class="line">#删除数据库</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> test_mysql;</span><br><span class="line"></span><br><span class="line">#使用该数据库</span><br><span class="line">use test_mysql;</span><br><span class="line"></span><br><span class="line">#显示数据库中的表</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;</span><br><span class="line"></span><br><span class="line">#先判断表是否存在,存在先删除</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> student;</span><br><span class="line"></span><br><span class="line">#创建表</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(</span><br><span class="line">id <span class="type">int</span> auto_increment <span class="keyword">primary key</span>,</span><br><span class="line"><span class="type">name</span> <span class="type">varchar</span>(<span class="number">50</span>),</span><br><span class="line">sex <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line"><span class="type">date</span> <span class="type">varchar</span>(<span class="number">50</span>),</span><br><span class="line">)<span class="keyword">default</span> charset=utf8;</span><br><span class="line"></span><br><span class="line">#删除表</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> student;</span><br><span class="line"></span><br><span class="line">#查看表的结构</span><br><span class="line">describe student;  #可以简写为<span class="keyword">desc</span> student;</span><br><span class="line"></span><br><span class="line">#插入数据</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;test&#x27;</span>,<span class="string">&#x27;2018-10-2&#x27;</span>);</span><br><span class="line"></span><br><span class="line">#查询表中的数据</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student;</span><br><span class="line"><span class="keyword">select</span> id,<span class="type">name</span> <span class="keyword">from</span> student;</span><br><span class="line"></span><br><span class="line">#修改某一条数据</span><br><span class="line"><span class="keyword">update</span> student <span class="keyword">set</span> <span class="type">name</span>=<span class="string">&#x27;jack&#x27;</span> <span class="keyword">where</span> id=<span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">#删除数据</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> student <span class="keyword">where</span> id=<span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"># <span class="keyword">and</span> 且</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> <span class="type">date</span>&gt;<span class="string">&#x27;2018-1-2&#x27;</span> <span class="keyword">and</span> <span class="type">date</span>&lt;<span class="string">&#x27;2018-12-1&#x27;</span>;</span><br><span class="line"></span><br><span class="line"># <span class="keyword">or</span> 或</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> <span class="type">date</span>&lt;<span class="string">&#x27;2018-11-2&#x27;</span> <span class="keyword">or</span> <span class="type">date</span>&gt;<span class="string">&#x27;2018-12-1&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#between</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> <span class="type">date</span> <span class="keyword">between</span> <span class="string">&#x27;2018-1-2&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;2018-12-1&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#in 查询制定集合内的数据</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> id <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">#排序 <span class="keyword">asc</span> 升序  <span class="keyword">desc</span> 降序</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">order</span> <span class="keyword">by</span> id <span class="keyword">asc</span>;</span><br><span class="line"></span><br><span class="line">#分组查询 #聚合函数</span><br><span class="line"><span class="keyword">select</span> max(id),<span class="type">name</span>,sex <span class="keyword">from</span> student <span class="keyword">group</span> <span class="keyword">by</span> sex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> min(<span class="type">date</span>) <span class="keyword">from</span> student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> avg(id) <span class="keyword">as</span> <span class="string">&#x27;Avg&#x27;</span> <span class="keyword">from</span> student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> count(*) <span class="keyword">from</span> student;   #统计表中总数</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> count(sex) <span class="keyword">from</span> student;   #统计表中性别总数  若有一条数据中sex为空的话,就不予以统计~</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> sum(id) <span class="keyword">from</span> student;</span><br><span class="line"></span><br><span class="line">#查询第i条以后到第j条的数据(不包括第i条)</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">limit</span> <span class="number">2</span>,<span class="number">5</span>;  #显示<span class="number">3</span><span class="number">-5</span>条数据</span><br><span class="line"></span><br><span class="line">#修改数据</span><br><span class="line"><span class="keyword">update</span> student <span class="keyword">set</span> <span class="type">name</span>=<span class="string">&#x27;test&#x27;</span> <span class="keyword">where</span> id=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">update</span> student <span class="keyword">set</span> <span class="type">name</span>=<span class="string">&#x27;花花&#x27;</span>,sex=<span class="string">&#x27;女&#x27;</span> <span class="keyword">where</span> id=<span class="number">2</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> student <span class="keyword">where</span> id=<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">#修改表的名字</span><br><span class="line">#格式:<span class="keyword">alter</span> <span class="keyword">table</span> tbl_name <span class="keyword">rename</span> <span class="keyword">to</span> new_name</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">rename</span> <span class="keyword">to</span> test_1;</span><br><span class="line"></span><br><span class="line">#向表中增加一个字段(列)</span><br><span class="line">#格式:<span class="keyword">alter</span> <span class="keyword">table</span> tablename <span class="keyword">add</span> columnname <span class="keyword">type</span>;/<span class="keyword">alter</span> <span class="keyword">table</span> tablename <span class="keyword">add</span>(columnname <span class="keyword">type</span>);</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">add</span>  age <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">set</span> <span class="keyword">default</span> <span class="string">&#x27;1&#x27;</span>; #<span class="keyword">set</span> <span class="keyword">default</span> 设置默认值</span><br><span class="line"></span><br><span class="line">#修改表中某个字段的名字</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tablename change columnname newcolumnname <span class="keyword">type</span>;  #修改一个表的字段名</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student change <span class="type">name</span> test_name <span class="type">varchar</span>(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">#去掉表中字段age的默认值</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">alter</span> age <span class="keyword">drop</span> <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line">#去掉表中字段age</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">drop</span> <span class="keyword">column</span> age;</span><br><span class="line"></span><br><span class="line">#删除表中主键</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">drop</span> <span class="keyword">primary key</span>;</span><br><span class="line"></span><br><span class="line">#表中增加主键</span><br><span class="line"><span class="meta">#alter table add primary key (column1,column2,....,column)</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">add</span> <span class="keyword">primary key</span> (student_id);</span><br><span class="line"></span><br><span class="line">#用文本方式将数据装入数据库表中（例如D:/mysql.txt）</span><br><span class="line"><span class="keyword">load</span> data <span class="keyword">local</span> infile &quot;D:/mysql.txt&quot; <span class="keyword">into</span> <span class="keyword">table</span> MYTABLE;</span><br><span class="line"></span><br><span class="line">#导入.<span class="keyword">sql</span>文件命令（例如D:/mysql.<span class="keyword">sql</span>）</span><br><span class="line">source d:/mysql.<span class="keyword">sql</span>;  #或者  /. d:/mysql.<span class="keyword">sql</span>;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>备忘</tag>
      </tags>
  </entry>
  <entry>
    <title>atxserver2设备管理平台搭建</title>
    <url>/2019/08/21/atxserver2%E8%AE%BE%E5%A4%87%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>[TOC]</p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前面分享了STF Andriod设备远程管理平台的搭建和使用，但是STF不支持iOS设备连接，虽然现在社区有了STF集成iOS设备的开源方案，但是经过实践不太稳定，后面再Testerhome社区发现了一个新的框架ATX2同时支持Android和iOS设备远程管理，经过实践设备连接非常稳定，所以这里分享下这个平台的搭建和使用</p>
<h1 id="ATX2简介"><a href="#ATX2简介" class="headerlink" title="ATX2简介"></a>ATX2简介</h1><p>ATX2是一款可以远程控制Android和iOS设备的设备管理平台。该平台使用的技术栈为:Python3+NodeJS+RethinkDB 项目目前已经开源，作者是阿里的一位大牛:<a href="https://github.com/codeskyblue">codeskyblue</a></p>
<ul>
<li>项目:Github地址:<a href="https://github.com/openatx/atxserver2">https://github.com/openatx/atxserver2</a></li>
<li>平台框架图如下所示：<br><img src="/.kim//atx-frame.png" alt="框架图"></li>
</ul>
<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><p>系统环境:Mac Os 10.14.6(因为要使用iOS设备连接WDA，所以需要Mac Os环境)</p>
<p>python3安装</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>python3</span><br></pre></td></tr></table></figure>
<p>rethinkdb安装</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span> rethinkdb</span><br></pre></td></tr></table></figure>

<h1 id="服务部署"><a href="#服务部署" class="headerlink" title="服务部署"></a>服务部署</h1><p>启动ATX2服务有2种方式：</p>
<ul>
<li>Docker部署</li>
<li>源码部署</li>
</ul>
<h2 id="Docker部署"><a href="#Docker部署" class="headerlink" title="Docker部署"></a>Docker部署</h2><ul>
<li>使用Docker部署需要安装Docker，具体安装步骤见:Docker安装</li>
<li>代码Clone到本地</li>
</ul>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/openatx/</span>atxserver2</span><br></pre></td></tr></table></figure>
<ul>
<li>打开命令终端，切换到代码目录，执行一条命令即可</li>
</ul>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker-compose up</span></span><br></pre></td></tr></table></figure>

<h2 id="源码部署"><a href="#源码部署" class="headerlink" title="源码部署"></a>源码部署</h2><p>先准备好一个rethinkdb服务器，并启动</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">rethinkdb</span></span><br></pre></td></tr></table></figure>
<p>代码clone到本地</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">git</span>@github.com:openatx/atxserver2.git</span><br></pre></td></tr></table></figure>
<p>打开命令终端，切换到代码目录，然后执行命令下面的命令安装依赖</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">pip3 <span class="keyword">install</span> -r requirements.txt</span><br></pre></td></tr></table></figure>
<p>启动服务，命令如下</p>
<figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line"><span class="comment">#默认方式启动，使用默认的登录方式，默认端口</span></span><br><span class="line"><span class="string">python3</span> <span class="string">main</span>.<span class="string">py</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定认证方式</span></span><br><span class="line"><span class="string">python3</span> <span class="string">main</span>.<span class="string">py</span> <span class="built_in">--auth</span> <span class="string">simple</span>  <span class="comment">#默认是一个非常simple的认证，输入邮箱就可以</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置监听端口</span></span><br><span class="line"><span class="string">python3</span> <span class="string">main</span>.<span class="string">py</span> <span class="built_in">--port</span> <span class="string">4000</span> <span class="comment"># 默认监听4000端口</span></span><br></pre></td></tr></table></figure>

<h2 id="打开页面"><a href="#打开页面" class="headerlink" title="打开页面"></a>打开页面</h2><p>启动之后，浏览器打开<a href="http://localhost(本机ip也可以):4000，登录之后就可以顺利的看到设备列表页了,由于还没有接入设备所以设备列表为空。">http://localhost(本机ip也可以):4000，登录之后就可以顺利的看到设备列表页了,由于还没有接入设备所以设备列表为空。</a><br><img src="/.kim//atx_index.png" alt="框架图"></p>
<h1 id="Android设备接入atxserver2-android-provider"><a href="#Android设备接入atxserver2-android-provider" class="headerlink" title="Android设备接入atxserver2-android-provider"></a>Android设备接入<a href="https://github.com/openatx/atxserver2-android-provider">atxserver2-android-provider</a></h1><p>依赖 Python3.6+, NodeJS 8, Git-LFS<br>NodeJS版本太高了也不行，一定要NodeJS 8，推荐使用nvm管理node版本</p>
<h2 id="Install-git-lfs"><a href="#Install-git-lfs" class="headerlink" title="Install git-lfs"></a>Install git-lfs</h2><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>git-lfs</span><br></pre></td></tr></table></figure>


<h2 id="Clone代码到本地，切换到代码目录"><a href="#Clone代码到本地，切换到代码目录" class="headerlink" title="Clone代码到本地，切换到代码目录"></a>Clone代码到本地，切换到代码目录</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/openatx/</span>atxserver2-android-provider</span><br><span class="line">cd atxserver2-android-provider</span><br><span class="line">git lfs install</span><br><span class="line">git lfs pull</span><br></pre></td></tr></table></figure>

<h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span></span><br><span class="line">pip <span class="keyword">install</span> -r requirements.txt</span><br></pre></td></tr></table></figure>

<h2 id="启动，需要指定atxserver2的地址-假设地址为-http-localhost-4000"><a href="#启动，需要指定atxserver2的地址-假设地址为-http-localhost-4000" class="headerlink" title="启动，需要指定atxserver2的地址, 假设地址为 http://localhost:4000"></a>启动，需要指定atxserver2的地址, 假设地址为 <a href="http://localhost:4000/">http://localhost:4000</a></h2><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">python3</span> main.<span class="keyword">py</span> --server localhos<span class="variable">t:4000</span></span><br></pre></td></tr></table></figure>
<p>Provider可以通过adb track-devices自动发现已经接入的设备，当手机接入到电脑上时，会自动给手机安装minicap, minitouch, atx-agent, app-uiautomator-[test].apk, whatsinput-apk</p>
<p>接入的设备需要配置好开发者选项, 不同设备的设置方案放到了该项目的Issue中, tag: device-settings 如果没有该机型，可以自助添加</p>
<h1 id="iOS设备接入atxserver2-ios-provider"><a href="#iOS设备接入atxserver2-ios-provider" class="headerlink" title="iOS设备接入atxserver2-ios-provider"></a>iOS设备接入<a href="https://github.com/openatx/atxserver2-ios-provider">atxserver2-ios-provider</a></h1><p>依赖 Python3.6+, NodeJS 8, WebDriverAgent(appium)</p>
<h2 id="安装libimobiledevice工具包"><a href="#安装libimobiledevice工具包" class="headerlink" title="安装libimobiledevice工具包"></a>安装libimobiledevice工具包</h2><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">brew </span>uninstall --ignore-dependencies libimobiledevice</span><br><span class="line"><span class="keyword">brew </span>uninstall --ignore-dependencies usbmuxd</span><br><span class="line"></span><br><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>--HEAD usbmuxd</span><br><span class="line"><span class="keyword">brew </span>unlink usbmuxd</span><br><span class="line"><span class="keyword">brew </span>link usbmuxd</span><br><span class="line"></span><br><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>--HEAD libimobiledevice</span><br><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>ideviceinstaller</span><br><span class="line"><span class="keyword">brew </span>link --overwrite ideviceinstaller</span><br></pre></td></tr></table></figure>

<h2 id="安装atxserver2-ios-provider"><a href="#安装atxserver2-ios-provider" class="headerlink" title="安装atxserver2-ios-provider,"></a>安装atxserver2-ios-provider,</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/openatx/</span>atxserver2-ios-provider --recursive</span><br><span class="line">cd atxserver2-ios-provider</span><br><span class="line">pip3 install -r requirements.txt</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>


<h2 id="初始化其中的ATX-WebDriverAgent"><a href="#初始化其中的ATX-WebDriverAgent" class="headerlink" title="初始化其中的ATX-WebDriverAgent"></a>初始化其中的ATX-WebDriverAgent</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/appium/</span>WebDriverAgent</span><br><span class="line">cd ATX-WebDriverAgent</span><br><span class="line">brew install carthage</span><br><span class="line">.<span class="regexp">/Scripts/</span>bootstrap.sh</span><br></pre></td></tr></table></figure>
<p>后找台手机接到苹果电脑上。 按照这个文档<a href="https://testerhome.com/topics/7220">https://testerhome.com/topics/7220</a> 对WebDriverAgent项目进行下设置</p>
<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">python3</span> main.<span class="keyword">py</span></span><br></pre></td></tr></table></figure>
<p>连接成功后，如下图所示可以看到连接的iOS设备，点击立即使用即可远程控制。<br><img src="/.kim//atx2_iOS_action.gif" alt="示例图"></p>
]]></content>
      <categories>
        <category>App自动化</category>
      </categories>
      <tags>
        <tag>App自动化</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/05/20/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>iOS真机安装WebDriverAgent</title>
    <url>/2019/08/22/iOS%E7%9C%9F%E6%9C%BA%E5%AE%89%E8%A3%85WebDriverAgent/</url>
    <content><![CDATA[<h1 id="iOS-真机安装-WebDriverAgent"><a href="#iOS-真机安装-WebDriverAgent" class="headerlink" title="iOS 真机安装 WebDriverAgent"></a>iOS 真机安装 WebDriverAgent</h1><p>本文根据 <a href="https://testerhome.com/topics/7220">ATX 文档 - iOS 真机如何安装 WebDriverAgent</a> 进行实践<br>参考资料<br><a href="https://github.com/openatx/facebook-wda">https://github.com/openatx/facebook-wda</a><br><a href="https://github.com/NetEaseGame/ATX">https://github.com/NetEaseGame/ATX</a><br><a href="https://github.com/facebook/WebDriverAgent">https://github.com/facebook/WebDriverAgent</a><br><a href="https://github.com/appium/WebDriverAgent">https://github.com/appium/WebDriverAgent</a></p>
<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>注意：尽量升级Xcode到最新版本，iphone版本大于9.3</p>
<ul>
<li>Xcode版本：10.2.1</li>
<li>iPhone版本：12.2</li>
<li>OS版本：10.14.4</li>
</ul>
<h1 id="实践开始"><a href="#实践开始" class="headerlink" title="实践开始"></a>实践开始</h1><ul>
<li><p>新建一个目录，从 git 下载 WDA 项目代码到本地<br>  <code>git clone https://github.com/facebook/WebDriverAgent</code></p>
</li>
<li><p>运行初始化脚本</p>
  <figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment">#进入代码目录</span></span><br><span class="line">cd xx<span class="regexp">/xx/</span>WebDriverAgent-master</span><br><span class="line"><span class="comment">#执行初始化脚本</span></span><br><span class="line">.<span class="regexp">/Scripts/</span>bootstrap.sh</span><br></pre></td></tr></table></figure></li>
<li><p>注<br>  根据报错通过 brew 安装以下依赖</p>
<ol>
<li>carthage依赖：<code>brew install carthage</code></li>
<li>npm：<code>brew install npm</code></li>
</ol>
</li>
</ul>
<h1 id="证书设置"><a href="#证书设置" class="headerlink" title="证书设置"></a>证书设置</h1><ol>
<li><p>进入项目路径，双击打开WebDriverAgent.xcodeproj，打开xcode后按照下方数字序号依次点击，勾选第5项目，弹框内点击Enable Automatic。<br><img src="/.kim//15571122331434.jpg"></p>
</li>
<li><p>Team 栏添加帐户（个人账号和开发者账号兼可）选中<br><img src="/.kim//15571124398069.jpg" alt="-w1059"></p>
</li>
</ol>
<ol start="3">
<li><p>接着在TARGETS里面选中WebDriverAgentRunner，用同样的方法设置好证书<br><img src="/.kim//15570487234316.jpg" alt="-w1139"></p>
</li>
<li><p>个人免费版的证书，还需要修改下WebDriverAgent的BundleID，随便加后缀，不要跟别人重复就好<br><img src="/.kim//15571126202793.jpg"></p>
</li>
</ol>
<h1 id="运行和测试"><a href="#运行和测试" class="headerlink" title="运行和测试"></a>运行和测试</h1><p><img src="/.kim//15570489183241.jpg" alt="-w784"></p>
<ul>
<li><p>点击方框选项，分别选择WebDriverAgentRunner和目标设备</p>
</li>
<li><p>运行 Product -&gt; Test<br>一切正常的话，手机上会出现一个无图标的WebDriverAgent应用，启动之后，马上又返回到桌面。</p>
</li>
<li><p>个人免费证书第一次运行需要信任证书<br>日志信息如下：</p>
<blockquote>
<p>Verify the Developer App certificate for your account is trusted on your device. Open Settings on Vic小叶子 and navigate to General -&gt; Device Management, then select your Developer App certificate to trust it.</p>
</blockquote>
</li>
</ul>
<p>原因：开发者人员程序未受信任<br>解决：进入手机设置-&gt; 通用-&gt; 描述文件与设备管理-&gt; 点击开发者应用，信任一下就好了。</p>
<p>此时控制台界面可以看到设备的IP。如果看不到的话，使用这种方法打开<br><img src="/.kim//15570491084022.jpg" alt="-w607"><br><img src="/.kim//15570491892095.jpg" alt="-w1248"></p>
<ul>
<li><p>通过上面给出的IP和端口，加上/status合成一个url地址。例如<a href="http://10.0.0.1:8100/status">http://10.0.0.1:8100/status</a>，然后浏览器打开。如果出现一串JSON输出，说明WDA安装成功了。</p>
<p>  实际情况，我到这一步访问这个地址无响应：<br>  原因：部分国行的iphone机器通过IP和端口还不能访问<br>  解决：需要将手机的端口转发到Mac上（端口转发见下文）</p>
</li>
</ul>
<h1 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h1><p>有些国产的iPhone机器通过手机的IP和端口还不能访问，此时需要将手机的端口转发到Mac上。</p>
<ul>
<li>安装libimobiledevice</li>
</ul>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">brew </span>update</span><br><span class="line"><span class="keyword">brew </span>uninstall --ignore-dependencies libimobiledevice</span><br><span class="line"><span class="keyword">brew </span>uninstall --ignore-dependencies usbmuxd</span><br><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>--HEAD usbmuxd</span><br><span class="line"><span class="keyword">brew </span>unlink usbmuxd</span><br><span class="line"><span class="keyword">brew </span>link usbmuxd</span><br><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>--HEAD libimobiledevice</span><br></pre></td></tr></table></figure>
<ul>
<li><p>转发端口<br><code>iproxy 8100 8100 UDID</code><br>使用iproxy –help 可以查到更具体的用法。</p>
</li>
<li><p>查询UDID<br>instruments -s</p>
</li>
</ul>
<p>这时通过访问<code>http://localhost:8100/status</code>，如果出现一串JSON输出，说明WDA安装成功了。</p>
<h1 id="inspector"><a href="#inspector" class="headerlink" title="inspector"></a>inspector</h1><p>是用来查看UI的图层，方便编写测试脚本<br>inspector的地址是:<code>http://localhost:8100/inspector</code><br><img src="/.kim//15571131403218.jpg" alt="-w1673"></p>
<h1 id="使用终端替代Xcode"><a href="#使用终端替代Xcode" class="headerlink" title="使用终端替代Xcode"></a>使用终端替代Xcode</h1><p>通常来说为了持续集成，能够全部自动化比较好一些<br>启动 WebDriverAgent，官方提供了四种方式：</p>
<ol>
<li>Xcode</li>
<li>xcodebuild</li>
<li>Using fbsimctl from FBSimulatorControl framework</li>
<li>Using FBSimulatorControl framework directly</li>
</ol>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 解锁keychain，以便可以正常的签名应用，</span></span><br><span class="line"><span class="attribute">PASSWORD</span>=<span class="string">&quot;replace-with-your-password&quot;</span></span><br><span class="line">security unlock-keychain -p <span class="variable">$PASSWORD</span> ~/Library/Keychains/login.keychain</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取设备的UDID</span></span><br><span class="line"><span class="attribute">UDID</span>=$(idevice_id -l | head -n1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行测试</span></span><br><span class="line">xcodebuild -project WebDriverAgent.xcodeproj -scheme WebDriverAgentRunner -destination <span class="string">&quot;id=<span class="variable">$UDID</span>&quot;</span> test</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>App自动化</category>
      </categories>
      <tags>
        <tag>App自动化</tag>
      </tags>
  </entry>
  <entry>
    <title>item2常用快捷键</title>
    <url>/2019/05/20/item2%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<h1 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h1><ul>
<li>新建标签：command + t</li>
<li>关闭标签：command + w</li>
<li>切换标签：command + 数字 command + 左右方向键</li>
<li>切换全屏：command + enter</li>
<li>查找：command + f</li>
</ul>
<h1 id="分屏"><a href="#分屏" class="headerlink" title="分屏"></a>分屏</h1><ul>
<li>垂直分屏：command + d</li>
<li>水平分屏：command + shift + d</li>
<li>切换屏幕：command + option + 方向键 command + [ 或 command + ]</li>
<li>查看历史命令：command + ;</li>
<li>查看剪贴板历史：command + shift + h</li>
</ul>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><ul>
<li>清除当前行：ctrl + u</li>
<li>到行首：ctrl + a</li>
<li>到行尾：ctrl + e</li>
<li>前进后退：ctrl + f/b (相当于左右方向键)</li>
<li>上一条命令：ctrl + p</li>
<li>搜索命令历史：ctrl + r</li>
<li>删除当前光标的字符：ctrl + d</li>
<li>删除光标之前的字符：ctrl + h</li>
<li>删除光标之前的单词：ctrl + w</li>
<li>删除到文本末尾：ctrl + k</li>
<li>交换光标处文本：ctrl + t</li>
<li>清屏1：command + r</li>
<li>清屏2：ctrl + l</li>
</ul>
<h1 id="自带有哪些很实用的功能-快捷键"><a href="#自带有哪些很实用的功能-快捷键" class="headerlink" title="自带有哪些很实用的功能/快捷键"></a>自带有哪些很实用的功能/快捷键</h1><ul>
<li>⌘ + 数字在各 tab 标签直接来回切换</li>
<li>选择即复制 + 鼠标中键粘贴，这个很实用</li>
<li>⌘ + f 所查找的内容会被自动复制</li>
<li>⌘ + d 横着分屏 / ⌘ + shift + d 竖着分屏</li>
<li>⌘ + r = clear，而且只是换到新一屏，不会想 clear 一样创建一个空屏</li>
<li>ctrl + u 清空当前行，无论光标在什么位置</li>
<li>输入开头命令后 按 ⌘ + ; 会自动列出输入过的命令</li>
<li>⌘ + shift + h 会列出剪切板历史</li>
<li>可以在 Preferences &gt; keys 设置全局快捷键调出 iterm，这个也可以用过 Alfred 实现</li>
</ul>
<h1 id="我常用的一些快捷键"><a href="#我常用的一些快捷键" class="headerlink" title="我常用的一些快捷键"></a>我常用的一些快捷键</h1><ul>
<li>⌘ + 1 / 2 左右 tab 之间来回切换，这个在 前面 已经介绍过了</li>
<li>⌘← / ⌘→ 到一行命令最左边/最右边 ，这个功能同 C+a / C+e</li>
<li>⌥← / ⌥→ 按单词前移/后移，相当与 C+f / C+b，其实这个功能在Iterm中已经预定义好了，⌥f / ⌥b，看个人习惯了</li>
</ul>
<h1 id="设置方法如下"><a href="#设置方法如下" class="headerlink" title="设置方法如下"></a>设置方法如下</h1><p>当然除了这些可以自定义的也不能忘了 linux 下那些好用的组合</p>
<ul>
<li>C+a / C+e 这个几乎在哪都可以使用</li>
<li>C+p / !! 上一条命令</li>
<li>C+k 从光标处删至命令行尾 (本来 C+u 是删至命令行首，但iterm中是删掉整行)</li>
<li>C+w A+d 从光标处删至字首/尾</li>
<li>C+h C+d 删掉光标前后的自负</li>
<li>C+y 粘贴至光标后</li>
<li>C+r 搜索命令历史，这个较常用</li>
</ul>
<h1 id="选择喜欢的配色方案。"><a href="#选择喜欢的配色方案。" class="headerlink" title="选择喜欢的配色方案。"></a>选择喜欢的配色方案。</h1><p>在Preferences-&gt;Profiles-&gt;Colors的load presets可以选择某个配色方案。也可以自己下载。在网站<a href="http://iterm2colorschemes.com/%EF%BC%8C%E5%87%A0%E4%B9%8E%E5%8F%AF%E4%BB%A5%E6%89%BE%E5%88%B0%E6%89%80%E6%9C%89%E5%8F%AF%E7%94%A8%E7%9A%84%E9%85%8D%E8%89%B2%E6%96%B9%E6%A1%88%E3%80%82">http://iterm2colorschemes.com/，几乎可以找到所有可用的配色方案。</a></p>
<h1 id="选中即复制"><a href="#选中即复制" class="headerlink" title="选中即复制"></a>选中即复制</h1><p>iterm2有2种好用的选中即复制模式。</p>
<ul>
<li>一种是用鼠标，在iterm2中，选中某个路径或者某个词汇，那么，iterm2就自动复制了。</li>
<li>另一种是无鼠标模式，command+f,弹出iterm2的查找模式，输入要查找并复制的内容的前几个字母，确认找到的是自己的内容之后，输入tab，查找窗口将自动变化内容，并将其复制。如果输入的是shift+tab，则自动将查找内容的左边选中并复制。</li>
</ul>
<h1 id="屏幕切割"><a href="#屏幕切割" class="headerlink" title="屏幕切割"></a>屏幕切割</h1><ul>
<li>command+d：垂直分割；</li>
<li>command+shift+d：水平分割</li>
</ul>
<h1 id="自动完成"><a href="#自动完成" class="headerlink" title="自动完成"></a>自动完成</h1><p>输入打头几个字母，然后输入command+; iterm2将自动列出之前输入过的类似命令。</p>
<h1 id="剪切历史"><a href="#剪切历史" class="headerlink" title="剪切历史"></a>剪切历史</h1><p>输入command+shift+h，iterm2将自动列出剪切板的历史记录。如果需要将剪切板的历史记录保存到磁盘，在Preferences &gt; General &gt; Save copy/paste history to disk.中设置。</p>
<h1 id="全屏切换"><a href="#全屏切换" class="headerlink" title="全屏切换"></a>全屏切换</h1><p>command+enter进入与返回全屏模式</p>
<h1 id="Expose所有Tab"><a href="#Expose所有Tab" class="headerlink" title="Exposé所有Tab"></a>Exposé所有Tab</h1><p>command+option+e,并且可以搜索</p>
]]></content>
      <categories>
        <category>资料</category>
      </categories>
      <tags>
        <tag>备忘</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS设备型号名称对应表</title>
    <url>/2021/03/18/iOS%E8%AE%BE%E5%A4%87%E5%9E%8B%E5%8F%B7%E5%90%8D%E7%A7%B0%E5%AF%B9%E5%BA%94%E8%A1%A8/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th>名称</th>
<th>后盖型号</th>
<th>Internal Name</th>
</tr>
</thead>
<tbody><tr>
<td>iPhone</td>
<td>A1203</td>
<td>iPhone 1,1</td>
</tr>
<tr>
<td>iPhone 3G</td>
<td>A1324 A1241</td>
<td>iPhone 1,2</td>
</tr>
<tr>
<td>iPhone 3GS</td>
<td>A1325 A1303</td>
<td>iPhone 2,1</td>
</tr>
<tr>
<td>iPhone 4</td>
<td>A1349 A1332</td>
<td>iPhone 3,1 3,2 3,3</td>
</tr>
<tr>
<td>iPhone 4S</td>
<td>A1431 A1387</td>
<td>iPhone 4,1</td>
</tr>
<tr>
<td>iPhone 5</td>
<td>A1428 A1429 A1442</td>
<td>iPhone 5,1 5,2</td>
</tr>
<tr>
<td>iPhone 5C</td>
<td>A1456 A1507 A1516 A1529 A1532</td>
<td>iPhone 5,3 5,4</td>
</tr>
<tr>
<td>iPhone 5S</td>
<td>A1453 A1457 A1518 A1528 A1530 A1533</td>
<td>iPhone 6,1 6,2</td>
</tr>
<tr>
<td>iPhone 6</td>
<td>A1549 A1586 A1589</td>
<td>iPhone 7,2</td>
</tr>
<tr>
<td>iPhone 6P</td>
<td>A1522 A1524 A1593</td>
<td>iPhone 7,1</td>
</tr>
<tr>
<td>iPhone 6S</td>
<td>A1633 A1688 A1700</td>
<td>iPhone 8,1</td>
</tr>
<tr>
<td>iPhone 6SP</td>
<td>A1634 A1687 A1699</td>
<td>iPhone 8,2</td>
</tr>
<tr>
<td>iPhone SE</td>
<td>A1723 A1662 A1724</td>
<td>iPhone 8,4</td>
</tr>
<tr>
<td>iPhone 7</td>
<td>A1660 A1778 A1779</td>
<td>iPhone 9,1 9,3</td>
</tr>
<tr>
<td>iPhone 7P</td>
<td>A1661 A1784 A1785</td>
<td>iPhone 9,2 9,4</td>
</tr>
<tr>
<td>iPhone 8</td>
<td>A1863 A1905 A1906</td>
<td>iPhone 10,1 10,4</td>
</tr>
<tr>
<td>iPhone 8P</td>
<td>A1864 A1897 A1898</td>
<td>iPhone 10,2 10,5</td>
</tr>
<tr>
<td>iPhone X</td>
<td>A1865 A1901 A1902</td>
<td>iPhone 10,3 10.6</td>
</tr>
<tr>
<td>iPhone XR</td>
<td>A1984 A2105 A2106 A2107 A2108</td>
<td>iPhone 11,8</td>
</tr>
<tr>
<td>iPhone XS</td>
<td>A1920 A2097 A2098 A2099 A2100</td>
<td>iPhone 11,2</td>
</tr>
<tr>
<td>iPhone XS Max</td>
<td>A1921 A2101 A2102 A2103 A2104</td>
<td>iPhone 11,6</td>
</tr>
<tr>
<td>iPhone 11</td>
<td>A2111 A2223 A2221</td>
<td>iPhone 12,1</td>
</tr>
<tr>
<td>iPhone 11 Pro</td>
<td>A2160 A2217 A2215</td>
<td>iPhone 12,3</td>
</tr>
<tr>
<td>iPhone 11 Pro Max</td>
<td>A2161 A2220 A2218</td>
<td>iPhone 12,5</td>
</tr>
<tr>
<td>iPhone SE 2</td>
<td>A2275 A2298 A2296</td>
<td>iPhone 12,8</td>
</tr>
<tr>
<td>iPhone 12 mini</td>
<td>A2176 A2398 A2400 A2399</td>
<td>iPhone 13,1</td>
</tr>
<tr>
<td>iPhone 12</td>
<td>A2172 A2402 A2404 A2403</td>
<td>iPhone 13,2</td>
</tr>
<tr>
<td>iPhone 12 Pro</td>
<td>A2341 A2406 A2408 A2407</td>
<td>iPhone 13,3</td>
</tr>
<tr>
<td>iPhone 12 Pro Max</td>
<td>A2342 A2410 A2412 A2411</td>
<td>iPhone 13,4</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>资料</category>
      </categories>
      <tags>
        <tag>资料</tag>
      </tags>
  </entry>
  <entry>
    <title>libimobiledevice命令</title>
    <url>/2019/05/21/libimobiledevice%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>A library to communicate with services of Apple iOS devices using native protocols.</p>
<h1 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h1><ul>
<li><p>打印app列表</p>
  <figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ideviceinstaller -l</span></span><br></pre></td></tr></table></figure></li>
<li><p>查看当前已连接的设备的UUID</p>
  <figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">idevice_id -l</span></span><br></pre></td></tr></table></figure></li>
<li><p>获取设备信息</p>
  <figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ideviceinfo</span></span><br></pre></td></tr></table></figure></li>
<li><p>获取设备时间</p>
  <figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">idevicedate</span></span><br></pre></td></tr></table></figure></li>
<li><p>重启设备</p>
  <figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">idevicediagnostics restart</span></span><br></pre></td></tr></table></figure></li>
<li><p>安装ipa包，卸载应用</p>
  <figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">ideviceinstaller -<span class="selector-tag">i</span> xxx.ipa</span><br><span class="line"><span class="comment">//命令安装一个ipa文件到手机上，如果是企业签名的，非越狱机器也可以直接安装了。</span></span><br><span class="line"></span><br><span class="line">ideviceinstaller -U <span class="selector-attr">[bundleID]</span></span><br><span class="line"><span class="comment">//命令卸载应用，需要知道此应用的bundleID</span></span><br></pre></td></tr></table></figure></li>
<li><p>查看系统日志</p>
  <figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">idevicesyslog</span><br><span class="line"><span class="comment">//屏幕上即可看见手机上所有的日志</span></span><br><span class="line"></span><br><span class="line">idevicesyslog &gt;&gt; iphone.<span class="built_in">log</span> <span class="meta">&amp;</span></span><br><span class="line"><span class="comment">//该命令是将日志导入到iphone.log这个文件，并且是在后台执行。</span></span><br><span class="line"><span class="comment">//然后用tail -f和grep查看log</span></span><br><span class="line"></span><br><span class="line">tail -f iphone.<span class="built_in">log</span></span><br><span class="line">tail -f iphone.<span class="built_in">log</span> <span class="string">| grep &#x27;WeChat’  # 查看包含WeChat的行</span></span><br></pre></td></tr></table></figure></li>
<li><p>截图</p>
  <figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">idevicescreenshot</span><br><span class="line"><span class="regexp">//</span>如果在使用截图的时候出现报错信息，那么就去把相应版本的DeveloperDiskImage的两个文件复制到libimobiledevice文件下面。</span><br><span class="line"></span><br><span class="line">路径：</span><br><span class="line"><span class="regexp">/Applications/</span>Xcode.app<span class="regexp">/Contents/</span>Developer<span class="regexp">/Platforms/i</span>PhoneOS.platform<span class="regexp">/DeviceSupport/</span>对应版本/</span><br><span class="line"></span><br><span class="line">获取版本号命令：</span><br><span class="line">ideviceinfo -k ProductVersion</span><br><span class="line"></span><br><span class="line">安装DeveloperDiskImage命令：</span><br><span class="line">ideviceimagemounter DeveloperDiskImage.dmg</span><br><span class="line"><span class="regexp">//</span>然后就可以正常截图了</span><br></pre></td></tr></table></figure></li>
<li><p>遇到报错</p>
  <figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">解决方法：卸载重装</span><br><span class="line"><span class="keyword">brew </span>uninstall ideviceinstaller</span><br><span class="line"><span class="keyword">brew </span>uninstall libimobiledevice</span><br><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>--HEAD libimobiledevice</span><br><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>ideviceinstaller</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>资料</category>
      </categories>
      <tags>
        <tag>资料</tag>
      </tags>
  </entry>
  <entry>
    <title>云储存选择做Hexo博客图床（腾讯云、七牛云、网易云）</title>
    <url>/2019/05/23/%E4%BA%91%E5%82%A8%E5%AD%98%E9%80%89%E6%8B%A9%E5%81%9AHexo%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%8A%EF%BC%88%E8%85%BE%E8%AE%AF%E4%BA%91%E3%80%81%E4%B8%83%E7%89%9B%E4%BA%91%E3%80%81%E7%BD%91%E6%98%93%E4%BA%91%EF%BC%89/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>博客里需要添加很多图片作为内容的补充，但是把图片放在本地博客文件夹里，上传到网上后，加载这些图片就是一个很大的问题，他们会拖累网页加载的速度，所以建议把图片放图床里，通过外链来访问和加载这些图片。</p>
<h1 id="云对象储存服务商"><a href="#云对象储存服务商" class="headerlink" title="云对象储存服务商"></a>云对象储存服务商</h1><p>国内免费的云对象储存的服务商(网易云、七牛云、腾讯云)</p>
<h2 id="1-网易云"><a href="#1-网易云" class="headerlink" title="1.网易云"></a>1.网易云</h2><p>官网：<a href="https://www.163yun.com/">https://www.163yun.com/</a></p>
<p>网易NOS（Netease Object Storage）网易对象存储为你提供基于互联网的数据存取服务，通过使用 NOS，你可以随时通过网络将你的文本、图片、音视频等各类文件存储到 NOS 系统中，并随时可以通过网络进行安全访问。</p>
<p>NOS 对象存储从三个维度进行计量收费：存储容量、流量、接口调用次数。存储容量0-50 GB是免费，下载流量在0-20 GB免费，每月前 10 万次 Put 请求免费，每月前 100 万次 Get 请求免费。</p>
<h2 id="2-七牛云"><a href="#2-七牛云" class="headerlink" title="2.七牛云"></a>2.七牛云</h2><p>官网：<a href="https://www.qiniu.com/">https://www.qiniu.com/</a></p>
<p>七牛云存储提供云存储、云处理、云加速分发一站式服务，注册成为标准用户后可获得10GB免费存储空间、每月10GB下载流量、每月10万次Put请求、每月100万次Get请求。</p>
<p>缺点：<br>临时域名仅有三个月，三个月后没有自己的备案域名，所有图片均会失效</p>
<h2 id="3-腾讯云"><a href="#3-腾讯云" class="headerlink" title="3.腾讯云"></a>3.腾讯云</h2><p>官网：<a href="https://cloud.tencent.com/">https://cloud.tencent.com/</a></p>
<p>腾讯云对象存储服务COS，全称为Cloud Object Service，主要是为开发者提供安全、稳定、高效、实惠的对象存储服务，开发者可以将任意动态、静态生成的数据，存放到COS上，再通过HTTP的方式进行访问。</p>
<p>缺点：<br>自2019年后新建用户可以领取一个6月有效期，50G的存储量。6月过后，按照存储量和流量收费。</p>
<h1 id="在线图床选择"><a href="#在线图床选择" class="headerlink" title="在线图床选择"></a>在线图床选择</h1><p><a href="https://sm.ms/">https://sm.ms</a> SM图床</p>
<p><a href="https://tu.aixinxi.net/">https://tu.aixinxi.net/</a> 爱信息图床</p>
<p><a href="https://imgchr.com/">https://imgchr.com/</a> 路过图床</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>云储存选择<code>网易云</code>，因为网易云对新用户的限制，免费的云储存有待选择</p>
<p>图床选择<code>路过图床</code></p>
<p>目前还在用路过图床，缺点是图片链接不能看到任何图片名称等图片信息，不方便插入在博客里</p>
]]></content>
      <categories>
        <category>Hexo Next</category>
      </categories>
      <tags>
        <tag>Hexo Next</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 mitmproxy + python 实现移动端异常数据测试</title>
    <url>/2020/08/31/%E4%BD%BF%E7%94%A8-mitmproxy-python-%E5%AE%9E%E7%8E%B0%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%BC%82%E5%B8%B8%E6%95%B0%E6%8D%AE%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<p><a href="https://github.com/mitmproxy/mitmproxy">mitmproxy github地址（Man-in-the-middle attack）</a></p>
<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>Crash率是衡量一个App好坏的重要指标之一，如果你忽略了它的存在，它就会愈演愈烈<br>客户端的很大一部分的Crash是因为API返回的脏数据。比如当API返回空值、空数组或返回不是约定类型的数据，App收到这些数据，就极有可能发生空指针、数组越界和类型转换错误等Crash。而且这样的脏数据，特别容易引起线上大面积的崩溃。</p>
<h1 id="异常数据测试方法"><a href="#异常数据测试方法" class="headerlink" title="异常数据测试方法"></a>异常数据测试方法</h1><p>手工测试时，借助charles等抓包工具，对返回结果拦截修改数据，再进行数据的maplocal</p>
<h2 id="异常数据修改规则"><a href="#异常数据修改规则" class="headerlink" title="异常数据修改规则"></a>异常数据修改规则</h2><p>字符：非法字符、超长、null<br>数组：空数组、非法序列<br>接口超时：5s、10s<br>接口状态码：404、500、503<br>增加删除数据：数组、字典</p>
<h1 id="mitmproxy是什么"><a href="#mitmproxy是什么" class="headerlink" title="mitmproxy是什么"></a>mitmproxy是什么</h1><p>顾名思义，mitmproxy 就是用于 MITM 的 proxy，MITM 即中间人攻击（Man-in-the-middle attack）。<br>    <img src="/.kim//mitmproxy.png" alt="mitmproxy"><br>    mitmproxy是一个支持HTTP和HTTPS的抓包程序，有类似Fiddler、Charles的功能，只不过它是一个控制台的形式操作。mitmproxy还有两个关联组件。一个是mitmdump，它是mitmproxy的命令行接口，利用它我们可以对接Python脚本，用Python实现监听后的处理。另一个是mitmweb，它是一个Web程序，通过它我们可以清楚观察mitmproxy捕获的请求。</p>
<h2 id="mitmproxy有如下几项功能"><a href="#mitmproxy有如下几项功能" class="headerlink" title="mitmproxy有如下几项功能"></a>mitmproxy有如下几项功能</h2><ul>
<li>拦截HTTP和HTTPS请求和响应。</li>
<li>保存HTTP会话并进行分析。</li>
<li>模拟客户端发起请求，模拟服务端返回响应。</li>
<li>利用反向代理将流量转发给指定的服务器。</li>
<li>支持Mac和Linux上的透明代理。</li>
<li>利用Python对HTTP请求和响应进行实时处理。</li>
</ul>
<h1 id="安装mitmproxy"><a href="#安装mitmproxy" class="headerlink" title="安装mitmproxy"></a>安装mitmproxy</h1><p><code>brew install mitmproxy</code><br>安装完成后，系统将拥有 mitmproxy、mitmdump、mitmweb 三个命令<br>验证安装成功<br><code>mitmdump --version</code><br>应当可以看到类似于这样的输出：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Mitmproxy</span>: <span class="number">5</span>.<span class="number">2</span></span><br><span class="line"><span class="attribute">Python</span>:    <span class="number">3</span>.<span class="number">7</span>.<span class="number">7</span></span><br><span class="line"><span class="attribute">OpenSSL</span>:   OpenSSL <span class="number">1</span>.<span class="number">1</span>.<span class="number">1</span>g  <span class="number">21</span> Apr <span class="number">2020</span></span><br><span class="line"><span class="attribute">Platform</span>:  Darwin-<span class="number">19</span>.<span class="number">6</span>.<span class="number">0</span>-x<span class="number">86</span>_<span class="number">64</span>-i<span class="number">386</span>-<span class="number">64</span>bit</span><br></pre></td></tr></table></figure>
<h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><p>要启动 mitmproxy 用 <code>mitmproxy</code>、<code>mitmdump</code>、<code>mitmweb</code> 这三个命令中的任意一个即可，这三个命令功能一致，且都可以加载自定义脚本，唯一的区别是交互界面的不同。<br>mitmproxy 命令启动后，会提供一个命令行界面，用户可以实时看到发生的请求，并通过命令过滤请求，查看请求数据。形如：<br>启动 mitmproxy：<br><code>mitmweb</code><br>应当看到如下输出：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">Web server listening at http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8081</span>/</span><br><span class="line">Proxy server listening at http:<span class="regexp">//</span>*:<span class="number">8080</span></span><br></pre></td></tr></table></figure>
<h1 id="设置代理-https证书安装"><a href="#设置代理-https证书安装" class="headerlink" title="设置代理+https证书安装"></a>设置代理+https证书安装</h1><p>移动设备和电脑保存在一个wifi网络下，在移动设备在网络代理填写：电脑ip+8080(端口)<br>在浏览器输入:<code>mitm.it</code>，选择对应设备类型安装证书</p>
<h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><p>完成了上述工作，我们已经具备了操作 mitmproxy 的基本能力 了。接下来开始开发自定义脚本，这才是 mitmproxy 真正强大的地方。<br>脚本的编写需要遵循 mitmproxy 规定的套路，这样的套路有两个，使用时选其中一个套路即可。<br>##第一个套路<br>编写一个 py 文件供 mitmproxy 加载，文件中定义了若干函数，这些函数实现了某些 mitmproxy 提供的事件，mitmproxy 会在某个事件发生时调用对应的函数，形如：</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="built_in">from</span> mitmproxy import <span class="keyword">http</span></span><br><span class="line"><span class="built_in">from</span> mitmproxy import ctx</span><br><span class="line"></span><br><span class="line"><span class="built_in">num</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def request(flow: <span class="keyword">http</span>.HTTPFlow):</span><br><span class="line">    <span class="built_in">global</span> <span class="built_in">num</span></span><br><span class="line">    <span class="built_in">num</span> = <span class="built_in">num</span> + <span class="number">1</span></span><br><span class="line">    ctx.<span class="built_in">log</span>.info(<span class="string">&quot;We&#x27;ve seen %d flows&quot;</span> % <span class="built_in">num</span>)</span><br></pre></td></tr></table></figure>
<h2 id="第二个套路"><a href="#第二个套路" class="headerlink" title="第二个套路"></a>第二个套路</h2><p>编写一个 py 文件供 mitmproxy 加载，文件定义了变量 addons，addons 是个数组，每个元素是一个类实例，这些类有若干方法，这些方法实现了某些 mitmproxy 提供的事件，mitmproxy 会在某个事件发生时调用对应的方法。这些类，称为一个个 addon，比如一个叫 Counter 的 addon：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> mitmproxy <span class="keyword">import</span> http</span><br><span class="line"><span class="keyword">from</span> mitmproxy <span class="keyword">import</span> ctx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">request</span>(<span class="params">self, flow: http.HTTPFlow</span>):</span></span><br><span class="line">        self.num = self.num + <span class="number">1</span></span><br><span class="line">        ctx.log.info(<span class="string">&quot;We&#x27;ve seen %d flows&quot;</span> % self.num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">addons = [</span><br><span class="line">    Counter()</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h2 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h2><p>这里强烈建议使用第二种套路，这也是官方内置的一些 addon 的实现方式。</p>
<p>我们将上面第二种套路的示例代码存为 addons.py，再重新启动 mitmproxy：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">mitmweb</span> -s addons.py</span><br></pre></td></tr></table></figure>
<p>这个脚本是当 request 发生时，计数器加一，并打印日志。这里对应的是 request 事件</p>
<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>事件针对不同生命周期分为 5 类：HTTP 生命周期、 TCP 生命周期、Websocket 生命周期、网络连接生命周期、通用生命周期</p>
<p>这里我们只介绍HTTP 生命周期的事件：<br><code>def http_connect(self, flow: mitmproxy.http.HTTPFlow):</code><br>(Called when) 收到了来自客户端的 HTTP CONNECT 请求。在 flow 上设置非 2xx 响应将返回该响应并断开连接。CONNECT 不是常用的 HTTP 请求方法，目的是与服务器建立代理连接，仅是 client 与 proxy 的之间的交流，所以 CONNECT 请求不会触发 request、response 等其他常规的 HTTP 事件。</p>
<p><code>def requestheaders(self, flow: mitmproxy.http.HTTPFlow):</code><br>(Called when) 来自客户端的 HTTP 请求的头部被成功读取。此时 flow 中的 request 的 body 是空的。</p>
<p><code>def request(self, flow: mitmproxy.http.HTTPFlow):</code><br>(Called when) 来自客户端的 HTTP 请求被成功完整读取。</p>
<p><code>def responseheaders(self, flow: mitmproxy.http.HTTPFlow):</code><br>(Called when) 来自服务端的 HTTP 响应的头部被成功读取。此时 flow 中的 response 的 body 是空的。</p>
<p><code>def response(self, flow: mitmproxy.http.HTTPFlow):</code><br>(Called when) 来自服务端端的 HTTP 响应被成功完整读取。</p>
<p><code>def error(self, flow: mitmproxy.http.HTTPFlow):</code><br>(Called when) 发生了一个 HTTP 错误。比如无效的服务端响应、连接断开等。注意与“有效的 HTTP 错误返回”不是一回事，后者是一个正确的服务端响应，只是 HTTP code 表示错误而已。</p>
<p>大多数情况下我们只会用到针对 HTTP 生命周期的几个事件。再精简一点，甚至只需要用到 http_connect、request、response 三个事件就能完成大多数需求了。</p>
<h2 id="脚本示例"><a href="#脚本示例" class="headerlink" title="脚本示例"></a>脚本示例</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">拦截请求的request</span><br><span class="line">拦截返回的response</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> mitmproxy <span class="keyword">import</span> http</span><br><span class="line"></span><br><span class="line">def request(flow: http.HTTPFlow):</span><br><span class="line">        ctx.<span class="keyword">log</span>.<span class="keyword">info</span>(&quot;========================== intercept request start ==========================&quot;)</span><br><span class="line">        ctx.<span class="keyword">log</span>.<span class="keyword">info</span>(&quot;========================== host is:&#123;&#125; ========================== &quot;.format(flow.request.host))</span><br><span class="line">        ctx.<span class="keyword">log</span>.<span class="keyword">info</span>(&quot;========================== url is:&#123;&#125; ========================== &quot;.format(flow.request.url))</span><br><span class="line">        ctx.<span class="keyword">log</span>.<span class="keyword">info</span>(&quot;========================== method is:&#123;&#125; ========================== &quot;.format(flow.request.<span class="keyword">method</span>))</span><br><span class="line">        ctx.<span class="keyword">log</span>.<span class="keyword">info</span>(&quot;========================== intercept request end ==========================\n\n\n&quot;)</span><br><span class="line"></span><br><span class="line">def response(flow: http.HTTPFlow):</span><br><span class="line">        code = flow.response.status_code</span><br></pre></td></tr></table></figure>
<h2 id="常用Api有"><a href="#常用Api有" class="headerlink" title="常用Api有"></a>常用Api有</h2><h3 id="request"><a href="#request" class="headerlink" title="request"></a>request</h3><figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line">flow.<span class="built_in">request</span>.headers # 获取所有头信息，包含Host、User-Agent、Content-type等字段</span><br><span class="line">flow.<span class="built_in">request</span>.url # 完整的请求地址，包含域名及请求参数，但是不包含放在body里面的请求参数</span><br><span class="line">flow.<span class="built_in">request</span>.pretty_url # 同flow.<span class="built_in">request</span>.url目前没看出什么差别</span><br><span class="line">flow.<span class="built_in">request</span>.host # 域名</span><br><span class="line">flow.<span class="built_in">request</span>.method # 请求方式。POST、<span class="keyword">GET</span>等</span><br><span class="line">flow.<span class="built_in">request</span>.scheme # 什么请求 ，如https</span><br><span class="line">flow.<span class="built_in">request</span>.path # 请求的路径，url除域名之外的内容</span><br><span class="line">flow.<span class="built_in">request</span>.get_text() # 请求中body内容，有一些http会把请求参数放在body里面，那么可通过此方法获取，返回字典类型</span><br><span class="line">flow.<span class="built_in">request</span>.query # 返回MultiDictView类型的数据，url直接带的键值参数</span><br><span class="line">flow.<span class="built_in">request</span>.get_content() # bytes,结果如flow.<span class="built_in">request</span>.get_text()</span><br><span class="line">flow.<span class="built_in">request</span>.raw_content # bytes,结果如flow.<span class="built_in">request</span>.get_content()</span><br><span class="line">flow.<span class="built_in">request</span>.urlencoded_form # MultiDictView，content-type：application/x-www-form-urlencoded时的请求参数，不包含url直接带的键值参数</span><br><span class="line">flow.<span class="built_in">request</span>.multipart_form # MultiDictView，content-type：multipart/form-data时的请求参数，不包含url直接带的键值参数</span><br></pre></td></tr></table></figure>
<h3 id="response"><a href="#response" class="headerlink" title="response"></a>response</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">flow<span class="selector-class">.response</span><span class="selector-class">.status_code</span> #状态码</span><br><span class="line">flow<span class="selector-class">.response</span>.text#返回内容，已解码</span><br><span class="line">flow<span class="selector-class">.response</span><span class="selector-class">.content</span> #返回内容，二进制</span><br><span class="line">flow<span class="selector-class">.response</span><span class="selector-class">.setText</span>()#修改返回内容，不需要转码</span><br></pre></td></tr></table></figure>

<h1 id="设计流程"><a href="#设计流程" class="headerlink" title="设计流程"></a>设计流程</h1><p>在上面提到可以拦截request和response,那么就可以对response数据做修改，再返回修改后的数据.<br>基于上面提到修改数据规则，随机多拦截数据做随机修改.<br>保存修改前和修改后的数据，方便数据diff.<br><img src="/.kim//%E8%AE%BE%E8%AE%A1%E6%B5%81%E7%A8%8B.jpg" alt="设计流程"></p>
]]></content>
      <categories>
        <category>移动性能</category>
      </categories>
      <tags>
        <tag>移动性能</tag>
      </tags>
  </entry>
  <entry>
    <title>（Mac）Android自动打包（Jenkins+Gradle+pgy）</title>
    <url>/2019/05/21/%EF%BC%88Mac%EF%BC%89Android%E8%87%AA%E5%8A%A8%E6%89%93%E5%8C%85%EF%BC%88Jenkins-Gradle-pgy%EF%BC%89/</url>
    <content><![CDATA[<h1 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h1><h2 id="配置Android-ADB环境"><a href="#配置Android-ADB环境" class="headerlink" title="配置Android ADB环境"></a>配置Android ADB环境</h2><p>关于Android整个开发环境的搭建，SDK的下载安装这里就不赘述了，配置adb环境可以参考、</p>
<p>这里查看adb是否配置成功可以在终端输入</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">adb <span class="built_in">version</span></span><br></pre></td></tr></table></figure>
<p>显示以下信息则证明配置成功</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Android</span> Debug Bridge version <span class="number">1</span>.<span class="number">0</span>.<span class="number">41</span></span><br><span class="line"><span class="attribute">Version</span> <span class="number">28</span>.<span class="number">0</span>.<span class="number">3</span>-<span class="number">5475833</span></span><br><span class="line"><span class="attribute">Installed</span> as /Users/vic/Library/Android/sdk/platform-tools/adb</span><br></pre></td></tr></table></figure>

<h2 id="配置Gradle环境"><a href="#配置Gradle环境" class="headerlink" title="配置Gradle环境"></a>配置Gradle环境</h2><p>配置gradle环境可以看一下我之前写的这篇文章Mac 配置gradle环境变量.</p>
<p>这里查看gradle是否配置成功可以在终端输入</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">gradle -<span class="built_in">version</span></span><br></pre></td></tr></table></figure>
<p>显示如下信息则表示配置成功<br><img src="/.kim//15578015087253.jpg" alt="-w547"></p>
<h1 id="下载安装Jenkins"><a href="#下载安装Jenkins" class="headerlink" title="下载安装Jenkins"></a>下载安装Jenkins</h1><p>这里有两种方法可以用。参考<a href="https://vic.kim/2019/05/21/Mac%E4%B8%8BJenkins%E6%90%AD%E5%BB%BA/#more">Mac下Jenkins搭建</a></p>
<h1 id="Jenkins环境变量的配置"><a href="#Jenkins环境变量的配置" class="headerlink" title="Jenkins环境变量的配置"></a>Jenkins环境变量的配置</h1><h2 id="左侧系统管理-gt-系统设置，进入系统设置页面"><a href="#左侧系统管理-gt-系统设置，进入系统设置页面" class="headerlink" title="左侧系统管理-&gt;系统设置，进入系统设置页面"></a>左侧系统管理-&gt;系统设置，进入系统设置页面</h2><p>全局属性下的环境变量，添加键值对<br><img src="/.kim//15578054807625.jpg" alt="-w1284"></p>
<h2 id="左侧系统管理-gt-全局工具设置，进入全局工具设置页面"><a href="#左侧系统管理-gt-全局工具设置，进入全局工具设置页面" class="headerlink" title="左侧系统管理-&gt;全局工具设置，进入全局工具设置页面"></a>左侧系统管理-&gt;全局工具设置，进入全局工具设置页面</h2><pre><code>1. JDK
    JDK installations一栏里面点击Add JDK，Name随便取，不过最好对应好版本号；JAVE_HOME就设置为当前Mac下Java的安装路径。当然也可以设置成自动安装
</code></pre>
<p><img src="/.kim//15578058867250.jpg" alt="-w1268"></p>
<pre><code>2. Gradle
    gradle配置：一样名字最好跟着版本号，GRADLE_HOME就设置为gradle的安装目录
</code></pre>
<p><img src="/.kim//15578059009464.jpg" alt="-w1294"></p>
<h1 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h1><h2 id="构建一个自由风格的软件项目"><a href="#构建一个自由风格的软件项目" class="headerlink" title="构建一个自由风格的软件项目"></a>构建一个自由风格的软件项目</h2><p>点击左侧菜单中的新建任务,然后在新的界面输入项目名字,选择构建一个自由风格的软件项目选项完成创建<br><img src="/.kim//15578064782260.jpg" alt="-w1020"></p>
<h2 id="项目基本配置"><a href="#项目基本配置" class="headerlink" title="项目基本配置"></a>项目基本配置</h2><p>点击左边的配置，从上到下一共6个tab，我们去一一配置自己想要的功能： </p>
<h3 id="General"><a href="#General" class="headerlink" title="General"></a>General</h3><ul>
<li><p>描述里面我们可以写工程简介</p>
</li>
<li><p>“This project is parameterized”参数化构建<br><img src="/.kim//15578155499359.jpg" alt="-w931"></p>
</li>
<li><p>“Discard old builds”丢弃旧的仓库<br><img src="/.kim//15578155286650.jpg" alt="-w920"></p>
</li>
</ul>
<h3 id="源码管理"><a href="#源码管理" class="headerlink" title="源码管理"></a>源码管理</h3><ul>
<li><p>源码管理，使用github选择git，使用svn选择subversion<br><img src="/.kim//15578157952790.jpg" alt="-w949"></p>
</li>
<li><p>点击add以后，进入选择身份验证的页面，没有ssh key的，选择用户名和密码，有ssh key的选择ssh验证（注意，这里填写的是private key，id_rsa文件中的key，不是id_rsa.pub中的key），填写完成后，点击add即可完成身份验证的添加。然后选择对应的身份验证<br><img src="/.kim//15578162180467.jpg" alt="-w1250"></p>
</li>
<li><p>项目的分支，填写你需要的分支</p>
</li>
</ul>
<h3 id="构建触发器"><a href="#构建触发器" class="headerlink" title="构建触发器"></a>构建触发器</h3><ul>
<li><p>选择Build periodically，输入：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">H</span> <span class="number">2</span> * * *</span><br></pre></td></tr></table></figure>
<p>周期性的执行编译任务，强制每天凌晨两点构建一次<br><img src="/.kim//15578167070841.jpg" alt="-w945"></p>
</li>
<li><p>选择Poll SCM，输入</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">H/5 <span class="emphasis">* *</span> <span class="emphasis">* *</span></span><br></pre></td></tr></table></figure>
<p>表示的就是每5分钟检查一次源码变化。<br><img src="/.kim//15578168071497.jpg" alt="-w934"></p>
<blockquote>
<p>第一个参数代表的是分钟 minute，取值 0<del>59；<br>第二个参数代表的是小时 hour，取值 0</del>23；<br>第三个参数代表的是天 day，取值 1<del>31；<br>第四个参数代表的是月 month，取值 1</del>12；<br>最后一个参数代表的是星期 week，取值 0~7，0 和 7 都是表示星期天。</p>
</blockquote>
</li>
</ul>
<h3 id="构建环境"><a href="#构建环境" class="headerlink" title="构建环境"></a>构建环境</h3><p>这里可以设置一些项目信息，比如在构建之前删除工作目录，设置构建名称等等。。。（但是我没有设置）</p>
<h3 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h3><p><img src="/.kim//15578170815187.jpg" alt="-w299"></p>
<ul>
<li><p>增加构建步骤，选择Invoke Gradle script（编译）<br><img src="/.kim//15578174201446.jpg" alt="-w948"></p>
<ul>
<li>Gradle选择你配置的版本</li>
<li>Task中填写构建执行的语句（注意：不要选择Use Gradle Wrapper），一般要填写“clean assembleRelease”。先clean再build  <figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">clean</span><br><span class="line">assembleReleaseChannels <span class="attribute">-PchannelFile</span>=markets.txt</span><br></pre></td></tr></table></figure></li>
<li>在Root Build script中输入你想要包生成的位置，在Build File中输入项目的build.gradle的路径。即在Root Build script路径的后边加/build.gradle，可以不输入这两项，项目会有个默认构建地址，具体地址可以再jenkins的系统管理中查看。 </li>
</ul>
</li>
<li><p>继续添加构建步骤，选择“Execute shell”，在command中填入（上传蒲公英）</p>
  <figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">.<span class="regexp">/gitswitch dev/</span>ci</span><br><span class="line">cd Source</span><br><span class="line"></span><br><span class="line">filepath=`pwd`<span class="regexp">/app/</span>build<span class="regexp">/outputs/</span>channels/*pgy*.apk</span><br><span class="line">file=`ls <span class="variable">$filepath</span>`</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$uploadPgy</span> = true ]</span><br><span class="line">then</span><br><span class="line">    curl -F <span class="string">&quot;installType=2&quot;</span> -F <span class="string">&quot;password=alpha&quot;</span> -F <span class="string">&quot;file=@$file&quot;</span> -F <span class="string">&quot;uKey=542e73b113b5908da8b028805bf7e837&quot;</span> -F <span class="string">&quot;_api_key=8e860ee5ba4996f9b19e56c28e07846a&quot;</span> https:<span class="regexp">//</span>qiniu-storage.pgyer.com<span class="regexp">/apiv1/</span>app/upload</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="构建后操作"><a href="#构建后操作" class="headerlink" title="构建后操作"></a>构建后操作</h3><p>Archive the artifacts（归档成品），输入内容</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">**<span class="regexp">/app/</span>build<span class="regexp">/outputs/</span>channels<span class="regexp">/*.apk, **/</span>apk-checker-result.*</span><br></pre></td></tr></table></figure>

<h2 id="上传蒲公英"><a href="#上传蒲公英" class="headerlink" title="上传蒲公英"></a>上传蒲公英</h2><p>增加一个构建步骤，选择Execute shell，在command中填入</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">.<span class="regexp">/gitswitch dev/</span>ci</span><br><span class="line">cd Source</span><br><span class="line"></span><br><span class="line">filepath=`pwd`<span class="regexp">/app/</span>build<span class="regexp">/outputs/</span>channels/*pgy*.apk</span><br><span class="line">file=`ls <span class="variable">$filepath</span>`</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$uploadPgy</span> = true ]</span><br><span class="line">then</span><br><span class="line">    curl -F <span class="string">&quot;installType=2&quot;</span> -F <span class="string">&quot;password=alpha&quot;</span> -F <span class="string">&quot;file=@$file&quot;</span> -F <span class="string">&quot;uKey=542e73b113b5908da8b028805bf7e837&quot;</span> -F <span class="string">&quot;_api_key=8e860ee5ba4996f9b19e56c28e07846a&quot;</span> https:<span class="regexp">//</span>qiniu-storage.pgyer.com<span class="regexp">/apiv1/</span>app/upload</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>
<p>蒲公英官方文档地址<a href="https://www.pgyer.com/doc/api#uploadApp">https://www.pgyer.com/doc/api#uploadApp</a></p>
<h1 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h1><p>构建历史-&gt;控制台输出，可以查看构建日志，根据报错来具体定位问题<br><img src="/.kim//15578187257664.jpg" alt="-w370"><br><img src="/.kim//15578188007960.jpg" alt="-w1064"></p>
]]></content>
      <categories>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>（Mac）iOS自动化打包（Jenkins+fastlane+pgy</title>
    <url>/2019/05/21/%EF%BC%88Mac%EF%BC%89iOS%E8%87%AA%E5%8A%A8%E5%8C%96%E6%89%93%E5%8C%85%EF%BC%88Jenkins-fastlane-pgy/</url>
    <content><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>| 名称 | 版本 |<br>| — | — | — |<br>| macOS | 10.14.4 (18E226) |<br>| Xcode | Version 10.2.1 |<br>| ruby | 2.6.3 |<br>| fastlane  | 2.123.0  |</p>
<h1 id="Fastlane安装"><a href="#Fastlane安装" class="headerlink" title="Fastlane安装"></a>Fastlane安装</h1><p>Fastlane是一套使用Ruby写的自动化工具集，用于iOS和Android的自动化打包、发布等工作，可以节省大量的时间。<br>安装过程如下</p>
<h2 id="安装ruby（brew安装最新版）"><a href="#安装ruby（brew安装最新版）" class="headerlink" title="安装ruby（brew安装最新版）"></a>安装ruby（brew安装最新版）</h2><figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta">#直接在终端执行，未安装brew，先安装brew</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">#安装最新的2.6.3</span></span><br><span class="line">brew install ruby   </span><br><span class="line"> </span><br><span class="line"><span class="meta">#安装完根据提示执行</span></span><br><span class="line">echo <span class="string">&#x27;export PATH=&quot;/usr/local/opt/ruby/bin:$PATH&quot;&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class="line"> </span><br><span class="line"><span class="meta">#退出终端查看ruby版本</span></span><br><span class="line">ruby -v </span><br><span class="line"> </span><br><span class="line"><span class="meta">#检查安装路径</span></span><br><span class="line">which -a ruby</span><br></pre></td></tr></table></figure>
<h2 id="更改gem源"><a href="#更改gem源" class="headerlink" title="更改gem源"></a>更改gem源</h2><ul>
<li>更改  <figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">gem sources --<span class="built_in">remove</span> http<span class="variable">s:</span>//rubygems.org/</span><br><span class="line">gem sources --<span class="built_in">add</span> http<span class="variable">s:</span>//gems.<span class="keyword">ruby</span>-china.<span class="keyword">com</span>/</span><br></pre></td></tr></table></figure></li>
<li>查看   <figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">gem sources -l</span></span><br></pre></td></tr></table></figure>
  如果是以下结果说明正确，如果有其他的请自行百度解决  <figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">*** CURRENT SOURCES ***</span><br><span class="line">http<span class="variable">s:</span>//gems.<span class="keyword">ruby</span>-china.<span class="keyword">com</span>/</span><br></pre></td></tr></table></figure></li>
<li>安装fastlane  <figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装</span></span><br><span class="line">gem install -n /usr/<span class="keyword">local</span>/bin fastlane -NV</span><br><span class="line"></span><br><span class="line"><span class="comment">#检查是否安装成</span></span><br><span class="line">fastlane <span class="comment">--version</span></span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p>至此，我们已经可以使用fastlane自动化打包了</p>
</blockquote>
<h1 id="Fastlane配置"><a href="#Fastlane配置" class="headerlink" title="Fastlane配置"></a>Fastlane配置</h1><h2 id="fastlane-init"><a href="#fastlane-init" class="headerlink" title="fastlane init"></a>fastlane init</h2><p>cd 到工程主目录执行<code>fastlane init </code>我这里选择的是手动配置</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cd <span class="regexp">/Users/</span>vic<span class="regexp">/.jenkins/</span>workspace/jike-iOS-Fastlan</span><br><span class="line">fastlane init</span><br></pre></td></tr></table></figure>
<p>会在你项目工程的目录下生成一个fastlane文件夹，里面有Fastlane的配置文件，一个是Appfile文件(保存了苹果开发者的相关信息)，一个是Fastfile文件（运行脚本）</p>
<h2 id="编辑Fastfile文件（运行脚本）"><a href="#编辑Fastfile文件（运行脚本）" class="headerlink" title="编辑Fastfile文件（运行脚本）"></a>编辑Fastfile文件（运行脚本）</h2><p>有时候一天需要打好几个包，为了区分，我们这里实现一个递增build号的功能。</p>
<ul>
<li>定义一个递增build号的函数，添加到Fastfile中  <figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">def updateProjectBuildNumber</span><br><span class="line"></span><br><span class="line">currentTime = Time.new.strftime(&quot;%Y%m%d&quot;)</span><br><span class="line"><span class="keyword">build</span> = get_build_number()</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">build</span>.<span class="keyword">include</span>?<span class="string">&quot;#&#123;currentTime&#125;.&quot;</span></span><br><span class="line"># =&gt; 为当天版本 计算迭代版本号</span><br><span class="line">lastStr = <span class="keyword">build</span>[<span class="keyword">build</span>.<span class="built_in">length</span><span class="number">-2.</span>.<span class="keyword">build</span>.<span class="built_in">length</span><span class="number">-1</span>]</span><br><span class="line">lastNum = lastStr.to_i</span><br><span class="line">lastNum = lastNum + <span class="number">1</span></span><br><span class="line">lastStr = lastNum.to_s</span><br><span class="line"><span class="keyword">if</span> lastNum &lt; <span class="number">10</span></span><br><span class="line">lastStr = lastStr.<span class="keyword">insert</span>(<span class="number">0</span>,<span class="string">&quot;0&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">build</span> = <span class="string">&quot;#&#123;currentTime&#125;.#&#123;lastStr&#125;&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"># =&gt; 非当天版本 <span class="keyword">build</span> 号重置</span><br><span class="line"><span class="keyword">build</span> = <span class="string">&quot;#&#123;currentTime&#125;.01&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">puts(<span class="string">&quot;*************| 更新build #&#123;build&#125; |*************&quot;</span>)</span><br><span class="line"># =&gt; 更改项目 <span class="keyword">build</span> 号</span><br><span class="line">increment_build_number(</span><br><span class="line">build_number: <span class="string">&quot;#&#123;build&#125;&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
</li>
<li>实现自动打包的完整Fastfile如下:  <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义fastlane版本号</span></span><br><span class="line">fastlane_version <span class="string">&quot;2.123.0&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义打包平台</span></span><br><span class="line">default_platform <span class="symbol">:ios</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">updateProjectBuildNumber</span></span></span><br><span class="line"></span><br><span class="line">currentTime = Time.new.strftime(<span class="string">&quot;%Y%m%d&quot;</span>)</span><br><span class="line">build = get_build_number()</span><br><span class="line"><span class="keyword">if</span> build.<span class="keyword">include</span>?<span class="string">&quot;<span class="subst">#&#123;currentTime&#125;</span>.&quot;</span></span><br><span class="line"><span class="comment"># =&gt; 为当天版本 计算迭代版本号</span></span><br><span class="line">lastStr = build[build.length-<span class="number">2</span>..build.length-<span class="number">1</span>]</span><br><span class="line">lastNum = lastStr.to_i</span><br><span class="line">lastNum = lastNum + <span class="number">1</span></span><br><span class="line">lastStr = lastNum.to_s</span><br><span class="line"><span class="keyword">if</span> lastNum &lt; <span class="number">10</span></span><br><span class="line">lastStr = lastStr.insert(<span class="number">0</span>,<span class="string">&quot;0&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">build = <span class="string">&quot;<span class="subst">#&#123;currentTime&#125;</span>.<span class="subst">#&#123;lastStr&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="comment"># =&gt; 非当天版本 build 号重置</span></span><br><span class="line">build = <span class="string">&quot;<span class="subst">#&#123;currentTime&#125;</span>.01&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">puts(<span class="string">&quot;*************| 更新build <span class="subst">#&#123;build&#125;</span> |*************&quot;</span>)</span><br><span class="line"><span class="comment"># =&gt; 更改项目 build 号</span></span><br><span class="line">increment_build_number(</span><br><span class="line"><span class="symbol">build_number:</span> <span class="string">&quot;<span class="subst">#&#123;build&#125;</span>&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#指定项目的scheme名称</span></span><br><span class="line">scheme=<span class="string">&quot;Ruguo&quot;</span></span><br><span class="line"><span class="comment">#蒲公英api_key和user_key</span></span><br><span class="line">api_key=<span class="string">&quot;8e860ee5ba4996f9b19e56c28e07846a&quot;</span></span><br><span class="line">user_key=<span class="string">&quot;542e73b113b5908da8b028805bf7e837&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 任务脚本</span></span><br><span class="line">platform <span class="symbol">:ios</span> <span class="keyword">do</span></span><br><span class="line">lane <span class="symbol">:development_build</span> <span class="keyword">do</span><span class="params">|options|</span></span><br><span class="line">branch = options[<span class="symbol">:branch</span>]</span><br><span class="line"></span><br><span class="line">puts <span class="string">&quot;开始打development ipa&quot;</span></span><br><span class="line"></span><br><span class="line">updateProjectBuildNumber <span class="comment">#更改项目build号</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始打包</span></span><br><span class="line">gym(</span><br><span class="line"><span class="comment">#指定需要编译的scheme</span></span><br><span class="line"><span class="symbol">scheme:</span><span class="string">&quot;<span class="subst">#&#123;scheme&#125;</span>&quot;</span>,</span><br><span class="line"><span class="comment">#输出的ipa名称</span></span><br><span class="line"><span class="symbol">output_name:</span><span class="string">&quot;<span class="subst">#&#123;scheme&#125;</span>_<span class="subst">#&#123;get_build_number()&#125;</span>&quot;</span>,</span><br><span class="line"><span class="comment"># 是否清空以前的编译信息 true：是</span></span><br><span class="line"><span class="symbol">clean:</span><span class="literal">true</span>,</span><br><span class="line"><span class="comment"># 指定打包方式，Release 或者 Debug</span></span><br><span class="line"><span class="symbol">configuration:</span><span class="string">&quot;Release&quot;</span>,</span><br><span class="line"><span class="comment"># 指定打包所使用的输出方式，目前支持app-store, package, ad-hoc, enterprise, development</span></span><br><span class="line"><span class="symbol">export_method:</span><span class="string">&quot;development&quot;</span>,</span><br><span class="line"><span class="comment"># 指定输出文件夹</span></span><br><span class="line"><span class="symbol">output_directory:</span><span class="string">&quot;./fastlane/build&quot;</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">#puts &quot;开始上传蒲公英&quot;</span></span><br><span class="line"><span class="comment"># 开始上传蒲公英</span></span><br><span class="line"><span class="comment">#pgyer(api_key: &quot;#&#123;api_key&#125;&quot;, user_key: &quot;#&#123;user_key&#125;&quot;, password: &quot;alpha&quot;, install_type: &quot;2&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
  注意：蒲公英的 api_key 和 user_key，开发者在自己账号下的 账号设置-API信息 中可以找到。打其它类型的包的方法与development类似，可自定义一个新的lane实现。</li>
</ul>
<h2 id="自动打包并上传蒲公英，"><a href="#自动打包并上传蒲公英，" class="headerlink" title="自动打包并上传蒲公英，"></a>自动打包并上传蒲公英，</h2><p>在终端输入便会进行自动打包并上传蒲公英了。</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">fastlane development_build</span></span><br></pre></td></tr></table></figure>
<h1 id="Jenkins安装"><a href="#Jenkins安装" class="headerlink" title="Jenkins安装"></a>Jenkins安装</h1><p>下载安装Jenkins。具体安装过程可参考 <a href="https://vic.kim/2019/05/21/Mac%E4%B8%8BJenkins%E6%90%AD%E5%BB%BA/">Mac Jenkins搭建</a></p>
<h1 id="Jenkins配置"><a href="#Jenkins配置" class="headerlink" title="Jenkins配置"></a>Jenkins配置</h1><ul>
<li><p>点击新建，输入名称，构建一个自由风格的软件项目</p>
</li>
<li><p>添加Git仓库地址，可以是HTTP也可以是SSH。点击Add</p>
</li>
<li><p>构建，点击“添加构建步骤”，选择Execute shell。<br>  <img src="/.kim//15584430633082.jpg"></p>
  <figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">export PATH=<span class="regexp">/usr/</span>local/bin:<span class="variable">$PATH</span></span><br><span class="line">fastlane development_build</span><br><span class="line"></span><br><span class="line">filepath=`pwd`fastlane<span class="regexp">/build/</span>Ruguo*.api</span><br><span class="line">file=`ls <span class="variable">$filepath</span>`</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$uploadPgy</span> = true ]</span><br><span class="line">then</span><br><span class="line">    curl -F <span class="string">&quot;installType=2&quot;</span> -F <span class="string">&quot;password=alpha&quot;</span> -F <span class="string">&quot;file=@$file&quot;</span> -F <span class="string">&quot;uKey=542e73b113b5908da8b028805bf7e837&quot;</span> -F <span class="string">&quot;_api_key=8e860ee5ba4996f9b19e56c28e07846a&quot;</span> https:<span class="regexp">//</span>qiniu-storage.pgyer.com<span class="regexp">/apiv1/</span>app/upload</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li>
<li><p>添加完成之后保存，点击立即构建</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>（Mac）iOS自动化打包（Jenkins+xcodebuild+fir）</title>
    <url>/2019/05/21/%EF%BC%88Mac%EF%BC%89iOS%E8%87%AA%E5%8A%A8%E5%8C%96%E6%89%93%E5%8C%85%EF%BC%88Jenkins-xcodebuild-fir%EF%BC%89/</url>
    <content><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>| 名称 | 版本 |<br>| — | — | — |<br>| macOS | 10.14.4 (18E226) |<br>| Xcode | Version 10.2.1 |<br>| ruby | 2.6.3 |<br>| fir-cli  | 1.7.1  |</p>
<h1 id="下载安装Jenkins"><a href="#下载安装Jenkins" class="headerlink" title="下载安装Jenkins"></a>下载安装Jenkins</h1><p><img src="/.kim//15580614334038.jpg"></p>
<ul>
<li>Jenkins是基于Java环境的，所以电脑上必须先安装Java，Jenkins官网（<a href="https://jenkins.io/">https://jenkins.io</a>）</li>
<li>下载安装Jenkins。具体安装过程可参考 <a href="https://vic.kim/2019/05/21/Mac%E4%B8%8BJenkins%E6%90%AD%E5%BB%BA/">Mac Jenkins搭建</a></li>
<li>安装完成后会自动打开<a href="http://localhost:8080/">http://localhost:8080</a>这个网址，如果没有自动打开可以手动打开。有些教程还有添加<code>Xcode integration</code> 、<code>Keychains and Provisioning Profiles Plugin</code>之类插件的步骤，我们不需要。因为我们是用xcode脚本构建，所以不需要安装任何插件。</li>
</ul>
<h1 id="新建任务"><a href="#新建任务" class="headerlink" title="新建任务"></a>新建任务</h1><h2 id="构建一个自由风格的软件项目"><a href="#构建一个自由风格的软件项目" class="headerlink" title="构建一个自由风格的软件项目"></a>构建一个自由风格的软件项目</h2><p>点击左侧菜单中的新建任务,然后在新的界面输入项目名字,选择<code>构建一个自由风格的软件项目</code>选项完成创建<br><img src="/.kim//15580618394386.jpg"></p>
<h2 id="填写工程相关介绍"><a href="#填写工程相关介绍" class="headerlink" title="填写工程相关介绍"></a>填写工程相关介绍</h2><p><img src="/.kim//15580620272901.jpg" alt="-w960"></p>
<h2 id="源码管理"><a href="#源码管理" class="headerlink" title="源码管理"></a>源码管理</h2><p>  源码管理，使用github选择git<br>  <img src="/.kim//15580620765523.jpg" alt="-w949"></p>
<h2 id="构建触发器"><a href="#构建触发器" class="headerlink" title="构建触发器"></a>构建触发器</h2><ul>
<li>选择Build periodically，输入：  <figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">H</span> <span class="number">2</span> * * *</span><br></pre></td></tr></table></figure>
周期性的执行编译任务，强制每天凌晨两点构建一次<br><img src="/.kim//15580621994075.jpg"></li>
</ul>
<ul>
<li><p>选择Poll SCM，输入</p>
  <figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">H/5 <span class="emphasis">* *</span> <span class="emphasis">* *</span></span><br></pre></td></tr></table></figure>
<p>  表示的就是每5分钟检查一次源码变化。<br> <img src="/.kim//15580622588816.jpg"></p>
<blockquote>
<pre><code>第一个参数代表的是分钟 minute，取值 0~59；
第二个参数代表的是小时 hour，取值 0~23；
第三个参数代表的是天 day，取值 1~31；
第四个参数代表的是月 month，取值 1~12；
最后一个参数代表的是星期 week，取值 0~7，0 和 7 都是表示星期天。
</code></pre>
</blockquote>
</li>
</ul>
<h2 id="构建环境"><a href="#构建环境" class="headerlink" title="构建环境"></a>构建环境</h2><p>  通过<code>xcodebuild</code>脚本的方式构建，这里不用做任何设置。</p>
<h2 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h2><p>重点来了。<br>点击“添加构建步骤”，选择Execute shell。<br><img src="/.kim//15580626158656.jpg" alt="-w951"></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/sh +x</span></span><br><span class="line">xcodebuild clean -workspace <span class="regexp">/Users/</span>vic<span class="regexp">/.jenkins/</span>workspace<span class="regexp">/jike-iOS/</span>Ruguo.xcworkspace \</span><br><span class="line">                 -scheme Ruguo \</span><br><span class="line"></span><br><span class="line">xcodebuild archive -workspace <span class="regexp">/Users/</span>vic<span class="regexp">/.jenkins/</span>workspace<span class="regexp">/jike-iOS/</span>Ruguo.xcworkspace \</span><br><span class="line">                   -scheme Ruguo \</span><br><span class="line">                   -archivePath <span class="string">&quot;$WORKSPACE/Ruguo.xcarchive&quot;</span> \</span><br><span class="line">                   -configuration Debug \</span><br><span class="line"></span><br><span class="line">xcodebuild -exportArchive -archivePath <span class="string">&quot;$WORKSPACE/Ruguo.xcarchive&quot;</span> \</span><br><span class="line">                          -exportPath <span class="string">&quot;$WORKSPACE/Export/Ruguo&quot;</span> \</span><br><span class="line">                          -exportOptionsPlist <span class="string">&quot;$WORKSPACE/ExportOptions.plist&quot;</span> \</span><br><span class="line">                          -configuration Debug \</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">export PATH=<span class="regexp">/usr/</span>local/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line">fir publish <span class="regexp">/Users/</span>vic<span class="regexp">/.jenkins/</span>workspace<span class="regexp">/jike-iOS/</span>Export<span class="regexp">/Ruguo/</span>Ruguo.ipa -T <span class="number">4554</span>bab16fc50b5b8ee20d9663fa64c7 --password=jikebeta</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>说明：<br>-archivePath：.xcarchive文件的存放路径。<br>-exportPath：导出文件的路径。Export文件夹是自己建的。<br>-ExportOptions.plist：这个文件的内容其实是ipa的打包信息。手动archive并export时，这个文件就包含在最终输出的文件夹内，可以copy一份出来使用。<br>-configuration ：默认Debug或Release。<br>这里有个坑要说明一下。archive和ipa文件的导出目录最好位于Jenkins用户下的那个工程中，我之前选择的是导出到当前用户的桌面，结果一直报读写权限的问题。</p>
<h2 id="上传到fir"><a href="#上传到fir" class="headerlink" title="上传到fir"></a>上传到fir</h2><p>要实现自动上传到fir，要先安装fir-cli<br>fir-cli由ruby实现，所以先安装ruby</p>
<ul>
<li><p>安装ruby，<a href="http://www.ruby-lang.org/en/documentation/installation/">ruby官网安装文档</a>（我使用了brew安装）</p>
  <figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta">#直接在终端执行，未安装brew，先安装brew</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#安装最新的2.6.3</span></span><br><span class="line">brew install ruby   </span><br><span class="line"> </span><br><span class="line"><span class="meta">#安装完根据提示执行</span></span><br><span class="line">echo <span class="string">&#x27;export PATH=&quot;/usr/local/opt/ruby/bin:$PATH&quot;&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class="line"> </span><br><span class="line"><span class="meta">#退出终端查看ruby版本</span></span><br><span class="line">ruby -v </span><br><span class="line"> </span><br><span class="line"><span class="meta">#检查安装路径</span></span><br><span class="line">which -a ruby</span><br></pre></td></tr></table></figure></li>
<li><p>安装fir-cli。要实现自动上传到fir，要先安装fir-cli。Github: <a href="https://github.com/FIRHQ/fir-cli">fir-cli</a></p>
  <figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">gem install -n <span class="regexp">/usr/</span>local/bin fir-cli </span><br></pre></td></tr></table></figure></li>
<li><p>fir token查看方法：<br><img src="/.kim//15580629118728.jpg" alt="-w459"></p>
</li>
<li><p>脚本</p>
  <figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">fir</span> publish /Users/vic/.jenkins/workspace/jike-iOS/Export/Ruguo/Ruguo.ipa -T <span class="number">4554</span>bab<span class="number">16</span>fc<span class="number">50</span>b<span class="number">5</span>b<span class="number">8</span>ee<span class="number">20</span>d<span class="number">9663</span>fa<span class="number">64</span>c<span class="number">7</span> --password=jikebeta</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>Charles的使用</title>
    <url>/2019/05/22/Charles%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="Charles-简介"><a href="#Charles-简介" class="headerlink" title="Charles 简介"></a>Charles 简介</h1><p>Charles 是一个支持多平台的 HTTP 代理器、HTTP 监控、反向代理器。它能够让开发者查看本地机器与互联网之间的所有 HTTP 以及 SSL/HTTPS 传输数据。包括请求数据、响应数据 以及 HTTP 头部信息（包括 Cookie 和缓存信息）。</p>
<blockquote>
<p>Charles 是收费软件，可以免费试用 30 天。试用期过后，未付费的用户仍然可以继续使用，但是每次使用时间不能超过 30 分钟，并且启动时将会有 10 秒种的延时。因此，该付费方案对广大用户还是相当友好的，即使你长期不付费，也能使用完整的软件功能。只是当你需要长时间进行封包调试时，会因为 Charles 强制关闭而遇到影响.</p>
</blockquote>
<p>Charles 主要的功能包括：</p>
<ul>
<li>截取 Http 和 Https 网络封包。</li>
<li>支持重发网络请求，方便后端调试。</li>
<li>支持修改网络请求参数。</li>
<li>支持网络请求的截获并动态修改。</li>
<li>支持模拟慢速网络。</li>
<li>支持SSL代理。可以截取分析SSL的请求。</li>
<li>支持端口映射。</li>
<li>支持反向代理。</li>
<li>支持SOCKS</li>
</ul>
<h1 id="下载安装-Charles"><a href="#下载安装-Charles" class="headerlink" title="下载安装 Charles"></a>下载安装 Charles</h1><p><img src="/.kim//charles.png" alt="charles"></p>
<ol>
<li>打开浏览器访问 <a href="https://www.charlesproxy.com/">Charles 官网</a> ，下载相应系统的 <a href="https://www.charlesproxy.com/download/">Charles 安装包</a>，然后安装即可<br> Mac版Charles 4.2.7破解版，<a href="https://pan.baidu.com/s/1gyuC6GHjanSOWo8DdaI2-Q">百度网盘地址</a>，安装密码：<a href="http://www.ifunmac.com/">www.ifunmac.com</a></li>
<li>安装Charles<br> 打开 Charles for Mac 4.2.7.dmg 包，后将 Charles 拖到 Application 目录下即完成安装。</li>
<li>安装完毕后，进行破解，方法很简单:<br> Mac 将 charles.jar 覆盖到 安装包Contents/Java 下；</li>
</ol>
<h1 id="Charles-主界面介绍"><a href="#Charles-主界面介绍" class="headerlink" title="Charles 主界面介绍"></a>Charles 主界面介绍</h1><p>Charles 的主界面视图如下图所示：<br><img src="/.kim//%E4%B8%BB%E7%95%8C%E9%9D%A2.png" alt="主界面"></p>
<h2 id="工具导航栏"><a href="#工具导航栏" class="headerlink" title="工具导航栏"></a>工具导航栏</h2><p>Charles 顶部为菜单导航栏，菜单导航栏下面为工具导航栏。视图如下图所示：<br><img src="/.kim//%E5%B7%A5%E5%85%B7%E6%A0%8F.png" alt="工具栏"><br>工具导航栏中提供了几种常用工具，依次为：</p>
<ol>
<li>清除捕获到的所有请求</li>
<li>红点状态说明正在捕获请求，灰色状态说明目前没有捕获请求。</li>
<li>灰色状态说明是没有开启网速节流，绿色状态说明开启了网速节流。</li>
<li>灰色状态说明是没有开启断点，绿色状态说明开启了断点。</li>
<li>编辑修改请求，点击之后可以修改请求的内容。</li>
<li>重复发送请求，点击之后选中的请求会被再次发送。</li>
<li>验证选中的请求的响应。</li>
<li>常用功能，包含了 Tools 菜单中的常用功能。</li>
<li>常用设置，包含了 Proxy 菜单中的常用设置。</li>
</ol>
<h2 id="主界面视图"><a href="#主界面视图" class="headerlink" title="主界面视图"></a>主界面视图</h2><p>Charles 主要提供两种查看封包的视图，分别名为 Structure 和 Sequence。</p>
<ul>
<li>Structure： 此视图将网络请求按访问的域名分类。</li>
<li>Sequence： 此视图将网络请求按访问的时间排序。</li>
</ul>
<p>使用时可以根据具体的需要在这两种视图之前来回切换。请求多了有些时候会看不过来，Charles 提供了一个简单的 Filter 功能，可以输入关键字来快速筛选出 URL 中带指定关键字的网络请求。</p>
<blockquote>
<p>对于某一个具体的网络请求，你可以查看其详细的请求内容和响应内容。如果请求内容是 POST 的表单，Charles 会自动帮你将表单进行分项显示。如果响应内容是 JSON 格式的，那么 Charles 可以自动帮你将 JSON 内容格式化，方便你查看。如果响应内容是图片，那么 Charles 可以显示出图片的预览。</p>
</blockquote>
<h1 id="Charles-菜单介绍"><a href="#Charles-菜单介绍" class="headerlink" title="Charles 菜单介绍"></a>Charles 菜单介绍</h1><p>Charles 的主菜单包括：File、Edit、View、Proxy、Tools、Window、Help。用的最多的主菜单分别是 Proxy 和 Tools。</p>
<h2 id="Proxy-菜单"><a href="#Proxy-菜单" class="headerlink" title="Proxy 菜单"></a>Proxy 菜单</h2><p>Charles 是一个 HTTP 和 SOCKS 代理服务器。代理请求和响应使 Charles 能够在请求从客户端传递到服务器时检查和更改请求，以及从服务器传递到客户端时的响应。下面主要介绍 Charles 提供的一些代理功能。Proxy 菜单的视图如下图所示：<br><img src="/.kim//Prroxy.png" alt="Prroxy"></p>
<p>Proxy 菜单包含以下功能：</p>
<ul>
<li>Start/Stop Recording：开始/停止记录会话。</li>
<li>Start/Stop Throttling：开始/停止节流。</li>
<li>Enable/Disable Breakpoints：开启/关闭断点模式。</li>
<li>Recording Settings：记录会话设置。</li>
<li>Throttle Settings：节流设置。</li>
<li>Breakpoint Settings：断点设置。</li>
<li>Reverse Proxies Settings：反向代理设置。</li>
<li>Port Forwarding Settings：端口转发。</li>
<li>Windows Proxy：记录计算机上的所有请求。</li>
<li>Proxy Settings：代理设置。</li>
<li>SSL Proxying Settings：SSL 代理设置。</li>
<li>Access Control Settings：访问控制设置。</li>
<li>External Proxy Settings：外部代理设置。</li>
<li>Web Interface Settings：Web 界面设置。</li>
</ul>
<h3 id="Recording-Settings-记录会话设置"><a href="#Recording-Settings-记录会话设置" class="headerlink" title="Recording Settings(记录会话设置)"></a>Recording Settings(记录会话设置)</h3><p>Recording Settings 和 Start/Stop Recording 配合使用，在 Start Recording 的状态下，可以通过 Recording Settings 配置 Charles 的会话记录行为。Recording Settings 的视图如下图所示：<br><img src="/.kim//Recording.png" alt="Recording"><br>Recording Settings 有 Options、Include、Exclude 三个选项卡：</p>
<ul>
<li>Options：通过 Recording Size Limits 限制记录数据的大小。当 Charles 记录时，请求、响应头和响应体存储在内存中，或写入磁盘上的临时文件。有时，内存中的数据量可能会变得太多，Charles 会通知您并停止录制。在这种情况下，您应该清除 Charles 会话以释放内存，然后再次开始录制。在录制设置中，您可以限制 Charles 将记录的最大大小; 这根本不会影响你的浏览，Charles 仅会停止录制。</li>
<li>Include：只有与配置的地址匹配的请求才会被录制。</li>
<li>Exclude：只有与配置的地址匹配的请求将不会被录制。<br>Include 和 Exclude 选项卡的操作相同，选择 Add，然后填入需要监控的Procotol、Host 和 Port等信息，这样就达到了过滤的目的。如下图所示：<br><img src="/.kim//WechatIMG102.png" alt="WechatIMG102"><br><img src="/.kim//WechatIMG103.png" alt="WechatIMG103"></li>
</ul>
<h3 id="Throttle-Settings-节流设置"><a href="#Throttle-Settings-节流设置" class="headerlink" title="Throttle Settings(节流设置)"></a>Throttle Settings(节流设置)</h3><p>Throttle Settings 和 Start/Stop Throttling 配合使用，在 Start Throttling 的状态下，可以通过 Throttle Settings 配置 Charles 的网速模拟配置。Throttle Settings 的视图如下图所示：<br><img src="/.kim//WechatIMG104.png" alt="WechatIMG104"></p>
<p>勾选 Enable Throttling 启用网速模拟配置，在 Throttle Preset 下选择网络类型即可，具体设置可以根据实际情况自行设置。如果只想模拟指定网站的慢速网络，可以再勾选上图中的 Only for selected hosts 项，然后在对话框的下半部分设置中增加指定的 hosts 项即可。</p>
<p>Throttle Settings 视图中的选项含义如下：</p>
<ul>
<li>Bandwidth：带宽</li>
<li>Utilistation：利用百分比</li>
<li>Round-trip：往返延迟</li>
<li>MTU：字节</li>
</ul>
<h3 id="Breakpoint-Settings-断点设置"><a href="#Breakpoint-Settings-断点设置" class="headerlink" title="Breakpoint Settings(断点设置)"></a>Breakpoint Settings(断点设置)</h3><p>Breakpoint Settings 和 Enable/Disable Breakpoints 配合使用，在 Enable Breakpoints 的状态下，可以通过 Breakpoint Settings 配置 Charles 的断点模式。Breakpoint Settings 的视图如下图所示：<br><img src="/.kim//15561941553646.jpg" alt="-w540"><br>勾选 Enable Breakpoints 启用断点模式，选择 Add，然后填入需要监控的Scheme、Procotol、Host 和 Port 等信息，这样就达到了设置断点的目的。然后可以来观察或者修改请求或者返回的内容，但是在这过程中需要注意请求的超时时间问题。或者可以在某个想要设置断点的请求网址上右击选择 Breakpoints 来设置断点。</p>
<h3 id="Reverse-Proxies-Settings-反向代理设置"><a href="#Reverse-Proxies-Settings-反向代理设置" class="headerlink" title="Reverse Proxies Settings(反向代理设置)"></a>Reverse Proxies Settings(反向代理设置)</h3><p>反向代理在本地端口上创建 Web 服务器，该端口透明地将请求代理给远程 Web 服务器。反向代理上的所有请求和响应都可以记录在 Charles 中。<br>如果您的客户端应用程序不支持使用 HTTP 代理，或者您希望避免将其配置为使用代理，那么反向代理很有用。创建原始目标 Web 服务器的反向代理，然后将客户端应用程序连接到本地端口； 反向代理对客户端应用程序是透明的，使您可以查看 Charles 以前可能无法访问的流量。<br>有关反向代理的更多信息，请访问 <a href="https://en.wikipedia.org/wiki/Reverse_proxy">Reverse proxy</a></p>
<h3 id="Port-Forwarding-Settings-端口转发"><a href="#Port-Forwarding-Settings-端口转发" class="headerlink" title="Port Forwarding Settings(端口转发)"></a>Port Forwarding Settings(端口转发)</h3><p>可以将任何 TCP/IP 或 UDP 端口配置为使用 Port Forwarding 工具从 Charles 转发到远程主机。这样可以调试 Charles 中的任何协议。<br>在 Macromedia Flash 中调试 XMLSocket 连接时，这尤其有用。<br>还可以使用 Charles 作为 SOCKS 代理，因此无需设置端口转发。</p>
<h3 id="macOS-Proxy-记录计算机上的所有请求"><a href="#macOS-Proxy-记录计算机上的所有请求" class="headerlink" title="macOS Proxy(记录计算机上的所有请求)"></a>macOS Proxy(记录计算机上的所有请求)</h3><p>如果想要抓取电脑端的请求，勾选 Windows Proxy 选项即可；如果只需要抓取手机请求，则取消勾选这个选项。</p>
<h3 id="Proxy-Settings-代理设置"><a href="#Proxy-Settings-代理设置" class="headerlink" title="Proxy Settings(代理设置)"></a>Proxy Settings(代理设置)</h3><p>Proxy Settings 的视图如下图所示：<br><img src="/.kim//15561944287744.jpg" alt="-w592"><br>代理端口默认为 8888(可以修改)，并且勾上 Enable transparent HTTP proxying 就完成了在 Charles 上的代理设置。</p>
<h3 id="SSL-Proxy-Settings-SSL-代理设置"><a href="#SSL-Proxy-Settings-SSL-代理设置" class="headerlink" title="SSL Proxy Settings(SSL 代理设置)"></a>SSL Proxy Settings(SSL 代理设置)</h3><p>SSL Proxy Settings 的视图如下图所示：<br><img src="/.kim//15561945816569.jpg" alt="-w592"><br>勾上 Enable SSL proxying 就完成了在 Charles 上的 SSL 代理设置。之后也可以选择 Add，然后填入需要监控的 Host 和 Port 信息，这样就达到了针对某个域名启用 SSL 代理的目的。</p>
<h3 id="Access-Control-Settings-访问控制设置"><a href="#Access-Control-Settings-访问控制设置" class="headerlink" title="Access Control Settings(访问控制设置)"></a>Access Control Settings(访问控制设置)</h3><p>Access Control Settings 表示访问控制设置。访问控制列表确定谁可以使用此 Charles 实例。通常，您在自己的计算机上运行 Charles，并且您只打算自己使用它，因此 localhost 始终包含在访问控制列表中。也可以选择 Add，然后填入允许访问的 IP，这样就达到了允许某个 IP 访问 Charles 的目的。</p>
<h3 id="External-Proxy-Settings-外部代理设置"><a href="#External-Proxy-Settings-外部代理设置" class="headerlink" title="External Proxy Settings(外部代理设置)"></a>External Proxy Settings(外部代理设置)</h3><p>External Proxy Settings 表示外部代理设置。可能在网络上有一个代理服务器，必须使用该代理服务器才能访问 Internet。在这种情况下，需要将 Charles 配置为在尝试访问 Internet 时使用现有代理。</p>
<p>可以配置单独的代理地址和端口：</p>
<ul>
<li>HTTP</li>
<li>HTTPS</li>
<li>SOCKS</li>
</ul>
<h3 id="Web-Interface-Settings-Web-界面设置"><a href="#Web-Interface-Settings-Web-界面设置" class="headerlink" title="Web Interface Settings(Web 界面设置)"></a>Web Interface Settings(Web 界面设置)</h3><p>Web Interface Settings 表示 Web 界面设置。Charles 有一个 Web 界面，可以让您从浏览器控制 Charles，或使用 Web 界面作为 Web 服务使用外部程序。</p>
<p>在 External Proxy Settings 视图中勾选 Enable the web interface 选项启用 Web 界面。可以允许匿名访问，也可以配置用户名和密码。还可以通过在配置使用 Charles 作为其代理的 Web 浏览器中访问 <a href="http://control.charles/">http://control.charles/</a> 来访问 Web 界面。<br>Web界面提供对以下功能的访问：</p>
<ul>
<li>节流控制<ul>
<li>激活或停用任何已配置的限制预设</li>
</ul>
</li>
<li>录音控制<ul>
<li>开始和停止会话录制</li>
</ul>
</li>
<li>工具<ul>
<li>激活和停用工具</li>
</ul>
</li>
<li>会话控制<ul>
<li>清除当前会话</li>
<li>以任何支持的格式导出当前会话</li>
<li>以 Charles 的本机会话格式下载当前会话<br>退出Charles</li>
</ul>
</li>
</ul>
<p>通过检查 Web 界面 HTML ，您可以推导出如何将其用作 Web 服务来自动化 Charles。</p>
<h2 id="Tools-菜单"><a href="#Tools-菜单" class="headerlink" title="Tools 菜单"></a>Tools 菜单</h2><p>Charles 是一个 HTTP 和 SOCKS 代理服务器，所有的请求都会经过 Charles。下面主要介绍 Charles 提供的一些实用工具。Tools 菜单的视图如下图所示：<br><img src="/.kim//Tools.png" alt="Tools"><br>Tools 菜单包含以下功能：</p>
<ul>
<li>No Caching Settings：禁用缓存设置。</li>
<li>Block Cookies Settings：禁用 Cookie设置。</li>
<li>Map Remote Settings：远程映射设置。</li>
<li>Map Local Settings：本地映射设置。</li>
<li>Rewrite Settings：重写设置。</li>
<li>Black List Settings：黑名单设置。</li>
<li>White List Settings：白名单设置。</li>
<li>DNS Spoofing Settings：DNS 欺骗设置。</li>
<li>Mirror Settings：镜像设置。</li>
<li>Auto Save Settings：自动保存设置。</li>
<li>Client Process Settings：客户端进程设置。</li>
<li>Compose：编辑修改。</li>
<li>Repeat：重复发包。</li>
<li>Repeat Advanced：高级重复发包。</li>
<li>Validate：验证。</li>
<li>Publish Gist：发布要点。</li>
<li>Import/Export Settings：导入/导出设置。</li>
<li>Profiles：配置文件。</li>
<li>Publish Gist Settings：发布要点设置。</li>
</ul>
<h3 id="No-Caching-Settings-禁用缓存"><a href="#No-Caching-Settings-禁用缓存" class="headerlink" title="No Caching Settings(禁用缓存)"></a>No Caching Settings(禁用缓存)</h3><p>No Caching 工具可防止客户端应用程序（如 Web 浏览器）缓存任何资源。因此，始终向远程网站发出请求，您始终可以看到最新版本。</p>
<ul>
<li>适用范围<br>该工具可以作用于每个请求(选中 Enable No Caching 即可)，也可以仅对你配置的请求启用(启用 No Caching 的同时，请选中 Only for selected locations)。当用于选定的请求时，可以使用简单但功能强大的模式匹配将工具的效果限制为指定的主机和路径。</li>
<li>工作原理<br>No Caching 工具通过操纵控制响应缓存的 HTTP 请求头来防止缓存。从请求中删除 If-Modified-Since 和 If-None-Match 请求头，添加 Pragma：no-cache 和 Cache-control：no-cache。从响应中删除 Expires，Last-Modified 和ETag 请求头，添加 Expires：0 和 Cache-Control：no-cache。</li>
</ul>
<h3 id="Block-Cookies-Settings-禁用-Cookie"><a href="#Block-Cookies-Settings-禁用-Cookie" class="headerlink" title="Block Cookies Settings(禁用 Cookie)"></a>Block Cookies Settings(禁用 Cookie)</h3><p>Block Cookies 工具阻止了 Cookie 的发送和接收。它可用于测试网站，就像在浏览器中禁用了 Cookie 一样。 请注意，网络爬虫（例如 Google）通常不支持 Cookie，因此该工具还可用于模拟网络爬虫网站的视图。</p>
<ul>
<li>适用范围<br>该工具可以作用于每个请求(选中 Enable Block Cookies 即可)，也可以仅对你配置的请求启用(启用 Block Cookies 的同时，请选中 Only for selected locations)。当用于选定的请求时，可以使用简单但功能强大的模式匹配将工具的效果限制为指定的主机和路径。</li>
<li>工作原理<br>Block Cookies 工具通过操纵控制响应 Cookies 的 HTTP 请求头来禁用 Cookies。从请求中移除 Cookie 请求头，防止 Cookie 值从客户端应用程序（例如 Web 浏览器）发送到远程服务器。从响应中删除 Set-Cookie 请求头，防止请求设置客户端应用程序从远程服务器接收的 Cookie。</li>
</ul>
<h3 id="Map-Remote-Settings-远程映射"><a href="#Map-Remote-Settings-远程映射" class="headerlink" title="Map Remote Settings(远程映射)"></a>Map Remote Settings(远程映射)</h3><p>Map Remote 工具根据配置的映射更改请求站点，以便从新站点透明地提供响应，就好像这是原始请求一样。</p>
<p>通过此映射，您可以从另一个站点提供全部或部分站点。例如：</p>
<ul>
<li>可以把 xk72.com/charles/ 映射到 localhost/charlesdev/ 来为 xk72.com 提供一个子目录；</li>
<li>可以把 xk72.com/*.php 这种指定后缀的所有文件映射到 localhost/charlesdev/。</li>
</ul>
<h4 id="使用建议"><a href="#使用建议" class="headerlink" title="使用建议"></a>使用建议</h4><p>如果您拥有站点的开发版本并且希望能够通过开发提供的某些请求浏览实时站点，则 Map Remote 非常有用。例如，您可能希望从开发服务器提供 css 和 images 目录。使用 live.com/css/ 等映射到 dev.com/css/ 或 live.com/*.css 到 dev.com 。</p>
<h4 id="映射类型"><a href="#映射类型" class="headerlink" title="映射类型"></a>映射类型</h4><ul>
<li>可以将目录映射到目录，如 xk72.com/charles/ 映射到 localhost/charlesdev/；</li>
<li>可以将文件映射到文件，如 xk72.com/charles/dow… 映射到 abc.com/testing/tes…</li>
<li>可以将带有文件模式的目录映射到目录，如 xk72.com/charles/*.p… 到 localhost/charlesdev/；</li>
<li>如果在目标映射中未指定路径，则 URL 的路径部分将不会更改。如果要映射到根目录，请在目标路径字段中已 / 结尾。</li>
</ul>
<h4 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h4><p>Map Remote 工具可以将 HTTP 请求映射到 HTTPS 目标，反之亦然，因此您可以将 HTTP 或 HTTPS 站点映射到其对立面。</p>
<h4 id="站点匹配"><a href="#站点匹配" class="headerlink" title="站点匹配"></a>站点匹配</h4><p>每个站点匹配可能包含协议、主机、端口和路径模式，以匹配特定的 URL。站点可能包括通配符。当您向此工具添加新站点时，可能会找到有关创建站点匹配的更多帮助。</p>
<h3 id="Map-Local-Settings-本地映射"><a href="#Map-Local-Settings-本地映射" class="headerlink" title="Map Local Settings(本地映射)"></a>Map Local Settings(本地映射)</h3><p>Map Local 工具使您可以使用本地文件，就像它们是远程网站的一部分一样。您可以在本地开发文件，并像在线上一样测试它们。本地文件的内容将返回给客户端，就像它是正常的远程响应一样。<br>Map Local 可以大大加快开发和测试速度，否则您必须将文件上传到网站以测试结果。使用 Map Local，您可以在开发环境中安全地进行测试。</p>
<h4 id="动态文件"><a href="#动态文件" class="headerlink" title="动态文件"></a>动态文件</h4><p>动态文件（例如包含服务器端脚本的文件）不会由 Map Local 执行，因此如果文件中有任何脚本，脚本将按原样返回到浏览器，这可能不是预期的结果。如果您想使用动态文件，就好像它们是远程网站的一部分一样，请参阅 Map Remote 工具。</p>
<h4 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h4><p>当请求与 Map Local 映射匹配时，它会检查与路径匹配的本地文件。它不包括查询字符串（如果有）。如果在本地找到所请求的文件，则将其作为响应返回，就好像它是从远程站点加载的一样，因此它对客户端是透明的。如果在本地找不到所请求的文件，那么该请求会像平常一样由网站提供，返回由真正的服务器提供的数据。</p>
<h4 id="站点匹配-1"><a href="#站点匹配-1" class="headerlink" title="站点匹配"></a>站点匹配</h4><p>每个站点匹配可能包含协议、主机、端口和路径模式，以匹配特定的 URL。站点可能包括通配符。当您向此工具添加新站点时，可能会找到有关创建站点匹配的更多帮助。</p>
<h3 id="Rewrite-Settings-重写"><a href="#Rewrite-Settings-重写" class="headerlink" title="Rewrite Settings(重写)"></a>Rewrite Settings(重写)</h3><p>Rewrite 工具允许创建请求和响应在通过 Charles 时修改他们的规则。如：添加或更改头信息、搜索和替换响应内容中的某些文本等。</p>
<h4 id="重写集"><a href="#重写集" class="headerlink" title="重写集"></a>重写集</h4><p>重写集可以单独激活和停用。每个集合包含站点和规则的列表。这些站点选择规则将要运行的请求和响应。</p>
<h4 id="重写规则"><a href="#重写规则" class="headerlink" title="重写规则"></a>重写规则</h4><p>每个规则都描述了一次重写操作。规则可能会影响请求URL的 Header，正文或部分内容；它可以根据请求或响应来操作；它可以定义搜索、替换或者仅替换样式重写。</p>
<h4 id="站点匹配-2"><a href="#站点匹配-2" class="headerlink" title="站点匹配"></a>站点匹配</h4><p>每个站点匹配可能包含协议、主机、端口和路径模式，以匹配特定的 URL。站点可能包括通配符。当您向此工具添加新站点时，可能会找到有关创建站点匹配的更多帮助。</p>
<h4 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h4><p>当重写操作未按预期工作时，重写工具可能难以调试。如果您遇到问题，请尝试添加一个非常基本的规则，例如添加明显头信息的规则，以便您可以查看规则是否与请求完全匹配。同时打开错误日志中的调试，以获取从 Charles 中的 Window 菜单访问的错误日志中打印的一些调试信息。</p>
<h3 id="Black-List-Settings-黑名单"><a href="#Black-List-Settings-黑名单" class="headerlink" title="Black List Settings(黑名单)"></a>Black List Settings(黑名单)</h3><p>Black List 工具允许输入应该被阻止的域名。当 Web 浏览器尝试从被列入黑名单的域名请求任何页面时，该请求将被 Charles 阻止。您还可以输入通配符来阻止其子域名。</p>
<h3 id="White-List-Settings-白名单"><a href="#White-List-Settings-白名单" class="headerlink" title="White List Settings(白名单)"></a>White List Settings(白名单)</h3><p>Black List 工具允许输入仅仅被允许的域名。Black List 工具将阻止除被列入白名单的域名之外的所有请求。</p>
<blockquote>
<p>白名单工具用于仅允许指定的域名；黑名单工具，用于仅屏蔽指定的域名。<br>如果一个请求与“黑名单”和“白名单”都匹配，则该请求会被阻止。</p>
</blockquote>
<h3 id="DNS-Spoofing-Settings-DNS-欺骗"><a href="#DNS-Spoofing-Settings-DNS-欺骗" class="headerlink" title="DNS Spoofing Settings(DNS 欺骗)"></a>DNS Spoofing Settings(DNS 欺骗)</h3><p>DNS Spoofing 工具允许通过将自己的主机名指定给远程地址映射来欺骗 DNS 查找。 当请求通过 Charles 时，您的 DNS 映射将优先。<br>Charles 包含配置的域名到 IP 地址映射的列表。当针对列出的域名发出请求时，Spoof DNS 插件会发现欺骗 IP 将请求重定向到该地址。主机HTTP标头保持不变，因此就像您的 DNS 服务器返回欺骗性 IP一样。</p>
<h4 id="虚拟主机"><a href="#虚拟主机" class="headerlink" title="虚拟主机"></a>虚拟主机</h4><p>虚拟主机是指单个IP地址上有多个站点，Web 服务器根据浏览器中键入的名称确定要请求的站点。更准确地说，它查看请求中发送的主机头。<br>如果没有为您的站点设置 DNS，那么您通常无法测试它，因为您不能只输入 IP 地址，因为服务器无法获取名称，因此无法将请求与网站。使用 DNS 欺骗工具来克服此问题。</p>
<h3 id="Mirror-Settings-镜像"><a href="#Mirror-Settings-镜像" class="headerlink" title="Mirror Settings(镜像)"></a>Mirror Settings(镜像)</h3><p>Mirror 工具会在浏览指定站点时，把接收到的响应内容克隆一份，并保存在磁盘上指定的路径下。<br>保存文件的路径会与浏览站点的目录结构相同，并且 Charles 会为主机名创建一个根目录。文件名从 URL 导出并转换为适合的数据进行保存。查询字符串包含在文件名中。如果收到相同 URL 的两个响应，则后面一个文件会覆盖前面的同名文件，因此保存在镜像中在的响应内容将始终为最新的。</p>
<h4 id="选定站点"><a href="#选定站点" class="headerlink" title="选定站点"></a>选定站点</h4><p>可以为每个请求启用该工具，也可以仅为指定站点启用该工具。当用于选定的站点时，可以使用简单但功能强大的模式匹配将工具的效果限制为指定的主机和/或路径。</p>
<h4 id="副作用"><a href="#副作用" class="headerlink" title="副作用"></a>副作用</h4><p>如果为请求启用镜像工具，它将导致任何压缩或编码的响应被解码。因此，如果服务器提供了压缩响应，Charles 将在传递给客户端之前对其进行解压缩，这通常不会产生任何影响。但是如果您已经构建了自己的客户端，或者客户端希望得到压缩响应，此时将会产生影响。使用 web 浏览器则没有任何影响。</p>
<h3 id="Auto-Save-Settings-自动保存"><a href="#Auto-Save-Settings-自动保存" class="headerlink" title="Auto Save Settings(自动保存)"></a>Auto Save Settings(自动保存)</h3><p>Auto Save 工具会按设定的时间间隔自动保存和清除记录会话。</p>
<p>如果您让 Charles 长时间监控网络活动，并希望将记录分解为可管理的单元，或者避免因数据量过大而可能出现的内存不足情况，这将非常有用。</p>
<p>输入以分钟为单位的保存间隔以及保存会话文件的目录。您可以选择是否在每次运行 Charles 时启动 Auto Save 工具，否则在 Charles 启动时将始终禁用 Auto Save 工具。</p>
<p>会话文件的名称中保存时间戳，格式为 yyyyMMddHHmm，即年月日时分，以便按字母顺序排序时，它们以正确的顺序显示。</p>
<h3 id="Client-Process-Settings-客户端进程"><a href="#Client-Process-Settings-客户端进程" class="headerlink" title="Client Process Settings(客户端进程)"></a>Client Process Settings(客户端进程)</h3><p>Client Process 工具显示负责发出每个请求的本地客户端进程的名称。客户端进程通常是您的 Web 浏览器(例如 firefox.exe)，但客户端进程工具可以帮助您发现许多可能未知的 HTTP 客户端。<br>客户端进程名称显示在每个请求的 Notes 区域中。<br>如果您可以在 Charles 中看到不确定原始进程的请求，则客户端进程工具很有用。 它仅适用于在运行 Charles 的计算机上发出的请求。<br>在 Charles 接受每个连接之前，该工具将引入一个短暂的延迟。 延迟通常不明显或不显著。</p>
<h4 id="选定站点-1"><a href="#选定站点-1" class="headerlink" title="选定站点"></a>选定站点</h4><p>可以为每个请求启用该工具，也可以仅为指定站点启用该工具。当用于选定的站点时，可以使用简单但功能强大的模式匹配将工具的效果限制为指定的主机和/或路径。</p>
<h3 id="Compose-编辑修改"><a href="#Compose-编辑修改" class="headerlink" title="Compose(编辑修改)"></a>Compose(编辑修改)</h3><p>Compose 工具允许在原有的请求基础上修改。</p>
<h3 id="Repeat-重复"><a href="#Repeat-重复" class="headerlink" title="Repeat(重复)"></a>Repeat(重复)</h3><p>Repeat 工具允许选择一个请求并重复它。Charles 将请求重新发送到服务器，并将响应显示为新请求。如果您正在进行后端更改并希望在浏览器(或其他客户机)中重复请求的情况下测试这些更改，那么这将非常有用。特别是如果重新创建请求需要花费一些精力，例如在游戏中获得分数，这将节省大量精力。<br>重复请求是在 Charles 内部完成的，因此无法在浏览器或其他客户端中查看响应，响应只能在 Charles 中查看。</p>
<h3 id="Repeat-Advanced-高级重复"><a href="#Repeat-Advanced-高级重复" class="headerlink" title="Repeat Advanced(高级重复)"></a>Repeat Advanced(高级重复)</h3><p>Repeat Advanced 工具扩展了 Repeat 工具，提供了迭代次数和并发数的选项。这对于负载测试非常有用。</p>
<h3 id="Validate-验证"><a href="#Validate-验证" class="headerlink" title="Validate(验证)"></a>Validate(验证)</h3><p>Validate 工具允许 Charles 通过将它们发送到 W3C HTML 验证器、W3C CSS 验证器和 W3C Feed 验证器来验证记录的响应。<br>验证报告在 Charles 中显示，其中包含与响应源中相应行相关联的任何警告或错误（双击错误消息中的行号可以切换到源视图）。<br>因为 Charles 测试它记录的响应，所以它可以测试不易测试的场景，例如在提交表单后呈现错误消息。</p>
<h4 id="重新验证"><a href="#重新验证" class="headerlink" title="重新验证"></a>重新验证</h4><p>验证后，可以从验证结果中选择响应并 Repeat，重复原始请求，然后重新验证结果。</p>
<h3 id="Publish-Gist-发布要点"><a href="#Publish-Gist-发布要点" class="headerlink" title="Publish Gist(发布要点)"></a>Publish Gist(发布要点)</h3><p>Publish Gist 工具可以将将所选请求和响应作为要点发布。默认情况下，这个要点将匿名发布，这意味着你将无法做到<br>删除它。可以在 Tools 菜单的 Publish Gist Settings 中授权 Charles 使用您的 GitHub 帐户进行发布。</p>
<h3 id="Import-Export-Settings-导入-导出"><a href="#Import-Export-Settings-导入-导出" class="headerlink" title="Import/Export Settings(导入/导出)"></a>Import/Export Settings(导入/导出)</h3><p>Import/Export 工具允许导入/导出 Charles 的 Proxy、Tools、Preferences 等设置。</p>
<h3 id="Profiles-配置"><a href="#Profiles-配置" class="headerlink" title="Profiles(配置)"></a>Profiles(配置)</h3><p>Profiles 包含所有配置设置的完整副本。<br>每次更改当前设置时，系统都会更新当前活动的配置文件，当您更改活动配置文件时，所有设置都将恢复为上次使用该配置文件时的状态。<br>请注意，如果导入已保存的配置，则会覆盖当前配置文件的设置。建议使用导入/导出来备份或创建当前配置和配置文件的快照，以维护多个并行工作区。</p>
<h1 id="Charles-使用教程"><a href="#Charles-使用教程" class="headerlink" title="Charles 使用教程"></a>Charles 使用教程</h1><h2 id="通过-Charles-进行-PC-端抓包"><a href="#通过-Charles-进行-PC-端抓包" class="headerlink" title="通过 Charles 进行 PC 端抓包"></a>通过 Charles 进行 PC 端抓包</h2><p>Charles 会自动配置浏览器和工具的代理设置，所以说打开工具直接就已经是抓包状态了。只需要保证一下几点即可：</p>
<p>确保 Charles 处于 Start Recording 状态。<br>勾选 Proxy | macOS Proxy。</p>
<h2 id="通过-Charles-进行移动端抓包"><a href="#通过-Charles-进行移动端抓包" class="headerlink" title="通过 Charles 进行移动端抓包"></a>通过 Charles 进行移动端抓包</h2><ol>
<li>电脑端配置：<ul>
<li>打开 Charles 的代理功能：</li>
<li>通过主菜单打开 Proxy | Proxy Settings 弹窗，查看代理端口(端口默认为 8888，不用修改)</li>
</ul>
</li>
<li>手机端配置：<ul>
<li>打开 iPhone 设置 - 无线局域网，将手机网络连接到与电脑相同WiFi</li>
<li>点击WiFi详情按钮设置HTTP代理，将其改为手动，然后填写Charles所在电脑的代理IP地址，端口号默认为8888。</li>
</ul>
</li>
<li>设置好之后，我们打开手机上的任意需要网络请求的程序，就可以看到 Charles 弹出手机请求连接的确认菜单（只有首次弹出），点击 Allow 即可完成设置。</li>
</ol>
<p>完成以上步骤，就可以进行抓包了。</p>
<h2 id="通过-Charles-进行-HTTPS-抓包"><a href="#通过-Charles-进行-HTTPS-抓包" class="headerlink" title="通过 Charles 进行 HTTPS 抓包"></a>通过 Charles 进行 HTTPS 抓包</h2><p>HTTPS 的抓包需要在 HTTP 抓包基础上再进行设置。需要完成步骤：</p>
<ol>
<li>电脑端安装 Charles 证书：通过 Charles 菜单栏找到 Help - SSL Proxying - Install Charles Root Certificate 安装证书，然后给电脑安装证书，信任证书<br><img src="/.kim//15562500582883.jpg" alt="-w694"><br><img src="/.kim//15562501825204.jpg" alt="-w774"></li>
</ol>
<ol start="2">
<li><p>设置 SSL 代理：通过主菜单打开 Proxy - SSL Proxy Settings 弹窗，勾选 Enable SSL proxying。并添加域名端口，匹配想要监听的域名端口，这里可以添加*:443或*:*匹配全部：<br><img src="/.kim//15562504002462.jpg" alt="-w768"></p>
</li>
<li><p>移动端安装 Charles 证书：通过 Charles 的主菜单Help - SSL Proxying - Install Charles Root Certificate on a Mobile Device or Remote Browser.. ，按照弹出的提示会让你将手机切换为手动代理到电脑的Charles，然后用浏览器打开提示上面的地址下载安装证书<br> iPhone需要信任证书。设置 - 通用 - 描述文件与设备管理 - 点击证书信任</p>
</li>
<li><p>设置好之后，我们打开手机上的任意需要网络请求的程序，就可以进行 HTTPS 抓包了。</p>
</li>
</ol>
<h2 id="Focus-功能"><a href="#Focus-功能" class="headerlink" title="Focus 功能"></a>Focus 功能</h2><p>使用 Focus 功能指定想要查看的域名，可以避免这个域名相关的请求淹没在茫茫请求当中。当然使用“Structure”视图也可以避免这个问题。<br>对想要Focus的域名，选中抓取的接口-右键菜单-选择Focus，这个域名就会添加到Focused列表，可以在这里找到：<br><img src="/.kim//15562478115998.jpg" alt="-w951"></p>
<p><img src="/.kim//15562477662170.jpg" alt="-w540"><br><img src="/.kim//15562478841032.jpg" alt="-w1115"></p>
<h2 id="重复请求功能Repeat"><a href="#重复请求功能Repeat" class="headerlink" title="重复请求功能Repeat"></a>重复请求功能Repeat</h2><p><img src="/.kim//15562482464485.jpg" alt="-w953"><br>使用Repeat Advanced 还可以指定请求次数<br><img src="/.kim//15562483183428.jpg" alt="-w544"><br><img src="/.kim//15562483967942.jpg" alt="-w1116"></p>
<h2 id="查找功能"><a href="#查找功能" class="headerlink" title="查找功能"></a>查找功能</h2><p>选中抓取的接口-右键菜单-选择Find In 即可打开查找面板<br><img src="/.kim//15562487628999.jpg" alt="-w1004"></p>
<p><img src="/.kim//15562487454525.jpg" alt="-w751"><br>双击查找结果会跳到想要的结果</p>
<h2 id="设置断点拦截请求响应"><a href="#设置断点拦截请求响应" class="headerlink" title="设置断点拦截请求响应"></a>设置断点拦截请求响应</h2><p>首先开启断点功能，然后再到想要设置断点的请求上，右键设置一个断点，如图所示：<br><img src="/.kim//15562493127758.jpg" alt="-w1000"><br>查看是否加入断点设置面板<br><img src="/.kim//15562494118375.jpg" alt="-w1168"><br><img src="/.kim//15562490163542.jpg" alt="-w540"><br>默认拦截请求和响应，如果只需要两者之一，可以选择设置<br><img src="/.kim//15562490428158.jpg" alt="-w440"><br>再次发起请求，就会看到拦截了请求和响应<br><img src="/.kim//15562492527131.jpg" alt="-w1167"></p>
<p><img src="/.kim//15562492796996.jpg" alt="-w1167"></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客优化之Next主题美化</title>
    <url>/2019/05/25/Hexo%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96%E4%B9%8BNext%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>有了前面几篇博客的介绍，我们就可以很容易的搭建我们的博客了，不过既然是属于自己的博客网站，自然也就想让其更加美观，更有意思，所以呢我下面介绍一下Hexo博客的主题美化操作。</p>
<p>Hexo博客支持很多主题风格，其中<a href="https://github.com/theme-next/hexo-theme-next">Next</a>主题是Github上Star最多的主题，其一直在更新维护，支持非常多的外部插件和功能选项。我目前使用的是NexT.Gemini v7.1.1版本，下面我会介绍基于Next7主题的界面美化。</p>
<h1 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h1><p>在Hexo中有2份主要的配置文件，其名称都是_config.yml。 其中，一份位于博客根目录下，主要包含 Hexo 本身的配置；另一份位于themes/next/目录下，用于配置主题相关的选项。</p>
<ul>
<li><strong>博客配置文件：博客根目录下_config.yml</strong></li>
<li><strong>主题配置文件：themes/next/目录下_config.yml</strong></li>
</ul>
<h1 id="基础设置"><a href="#基础设置" class="headerlink" title="基础设置"></a>基础设置</h1><p>##设置站点名、作者昵称和站点描述等内容<br>打开博客配置文件，博客根目录下_config.yml</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="meta"># Site</span></span><br><span class="line"><span class="symbol">title:</span> Vicの博客</span><br><span class="line"><span class="symbol">subtitle:</span> 测试攻城狮</span><br><span class="line"><span class="symbol">description:</span> 人生苦短，我学Python</span><br><span class="line"><span class="symbol">keywords:</span></span><br><span class="line"><span class="symbol">author:</span> Vic</span><br><span class="line"><span class="symbol">language:</span> <span class="built_in">zh</span>-CN</span><br><span class="line"><span class="symbol">timezone:</span> Asia/Shanghai</span><br></pre></td></tr></table></figure>

<h2 id="Next主题的安装配置"><a href="#Next主题的安装配置" class="headerlink" title="Next主题的安装配置"></a>Next主题的安装配置</h2><p>Next主题的安装方式很简单，只需要在<em><strong>博客根目录下</strong></em>执行：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/theme-next/</span>hexo-theme-<span class="keyword">next</span> themes/<span class="keyword">next</span></span><br></pre></td></tr></table></figure>
<p>然后设置博客配置文件_config.yml：（博客根目录下的_config.yml）</p>
<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line"><span class="symbol">theme:</span> <span class="keyword">next</span></span><br></pre></td></tr></table></figure>
<p>即可将我们的Hexo博客主题替换为Next主题。</p>
<h1 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h1><h2 id="Next主题风格"><a href="#Next主题风格" class="headerlink" title="Next主题风格"></a>Next主题风格</h2><p>打开<code>themes/next/</code>下的<code>_config.yml</code>，查找<code>scheme</code>，可以看到如下四种不同的风格方案：</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta">#scheme: Muse</span></span><br><span class="line"><span class="meta">#scheme: Mist</span></span><br><span class="line"><span class="meta">#scheme: Pisces</span></span><br><span class="line">scheme: Gemini</span><br></pre></td></tr></table></figure>
<p>去掉#注释，即启用对应的scheme，博主采用Gemini主题。</p>
<h2 id="设置菜单及对应页面"><a href="#设置菜单及对应页面" class="headerlink" title="设置菜单及对应页面"></a>设置菜单及对应页面</h2><ul>
<li><p>打开themes/next/下的_config.yml，查找menu</p>
  <figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">menu:</span></span><br><span class="line"><span class="symbol">  home:</span> / || home</span><br><span class="line"><span class="symbol">  about:</span> <span class="meta-keyword">/about/</span> || user</span><br><span class="line"><span class="symbol">  tags:</span> <span class="meta-keyword">/tags/</span> || tags</span><br><span class="line"><span class="symbol">  categories:</span> <span class="meta-keyword">/categories/</span> || th</span><br><span class="line"><span class="symbol">  archives:</span> <span class="meta-keyword">/archives/</span> || archive</span><br><span class="line">  <span class="meta">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="meta">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line">  <span class="meta">#commonweal: /404/ || heartbeat</span></span><br><span class="line"><span class="symbol">  favorite:</span> <span class="meta-keyword">/favorite/</span> || fa-star</span><br></pre></td></tr></table></figure>
<p>  去掉<code>#</code>注释即可显示对应的菜单项，也可自定义新的菜单项。<code>||</code>之前的值是目标链接，之后的是分类页面的图标，图标名称来自于FontAwesome icon。若没有配置图标，默认会使用问号图标。<br>  例如上面添加：<code>favorite: /favorite/ || fa-star</code></p>
</li>
<li><p>新建一个页面，命名为 categories</p>
  <figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="type">page</span> <span class="string">&quot;favorite&quot;</span></span><br></pre></td></tr></table></figure>
<p>  此时在根目录的source文件夹下会生成一个favorite文件夹，文件中有一个index.md文件，文件内容修改增加 type 属性</p>
  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Favorite</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2019-05-20 19:11:41</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;favorite&quot;</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure></li>
<li><p>新添加的菜单需要翻译对应的中文<br>  打开hexo/theme/next/languages/zh-CN.yml，在menu下自定义，如：</p>
  <figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">menu:</span></span><br><span class="line"><span class="symbol">  favorite:</span> 收藏夹</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="一般配置"><a href="#一般配置" class="headerlink" title="一般配置"></a>一般配置</h2><ul>
<li><p>Next主题一般配置：</p>
  <figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">override：false <span class="meta">#表示是否将主题置为默认样式</span></span><br><span class="line"><span class="symbol">cache:</span></span><br><span class="line"><span class="symbol">	enable:</span>true <span class="meta">#表示添加缓存功能，这样浏览器后续打开我们的博客网站会更快</span></span><br><span class="line"><span class="symbol">menu:</span> <span class="meta">#设置博客各个页面的相对路径，默认根路径是blog/source</span></span><br><span class="line"><span class="symbol">  home:</span> / || home</span><br><span class="line"><span class="symbol">  about:</span> <span class="meta-keyword">/about/</span> || user</span><br><span class="line"><span class="symbol">  tags:</span> <span class="meta-keyword">/tags/</span> || tags</span><br><span class="line"><span class="symbol">  categories:</span> <span class="meta-keyword">/categories/</span> || th</span><br><span class="line"><span class="symbol">  archives:</span> <span class="meta-keyword">/archives/</span> || archive</span><br><span class="line">  <span class="meta">#schedule: /schedule/ || calendar #日历</span></span><br><span class="line">  <span class="meta">#sitemap: /sitemap.xml || sitemap #站点地图，供搜索引擎爬取</span></span><br><span class="line">  <span class="meta">#commonweal: /404/ || heartbeat # 腾讯公益404</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># Enable/Disable menu icons / item badges.</span></span><br><span class="line"><span class="symbol">menu_settings:</span></span><br><span class="line"><span class="symbol">  icons:</span> true <span class="meta"># 是否显示各个页面的图标</span></span><br><span class="line"><span class="symbol">  badges:</span> true <span class="meta"># 是否显示分类/标签/归档页的内容量</span></span><br><span class="line"><span class="meta"># Schemes</span></span><br><span class="line"><span class="symbol">scheme:</span> Gemini</span><br></pre></td></tr></table></figure></li>
<li><p>站点配置MyBlog/_config.yml文件的基本配置为</p>
  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Vicの博客</span> <span class="comment"># 网站标题</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">测试攻城狮</span> <span class="comment"># 网站子标题</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">人生苦短，我学Python</span> <span class="comment"># 网站描述</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">Vic</span> <span class="comment"># 网站作者，也就是您的名字</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span> <span class="comment"># 网站使用的语言</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">Asia/Shanghai</span> <span class="comment"># 网站时区。Hexo 预设使用您电脑的时区。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as &#x27;http://yoursite.com/child&#x27; and root as &#x27;/child/&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://vic.kim</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory</span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span> <span class="comment"># 资源文件夹，这个文件夹用来存放内容，例如我们用markdown编写的博文</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public</span> <span class="comment"># 公共文件夹，这个文件夹用于存放生成的静态博客文件。</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span> <span class="comment"># 标签文件夹</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span> <span class="comment"># 归档文件夹</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span> <span class="comment"># 分类文件夹</span></span><br><span class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span> <span class="comment"># Include code 文件夹</span></span><br><span class="line"><span class="attr">i18n_dir:</span> <span class="string">:lang</span> <span class="comment"># 国际化（i18n）文件夹</span></span><br><span class="line"><span class="attr">skip_render:</span> <span class="comment"># 跳过指定文件的渲染，您可使用 glob 来配置路径。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Search</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span> <span class="comment"># 索引文件的路径，相对于站点根目录</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span> <span class="comment"># 搜索范围，默认是 post，还可以选择 page、all，设置成 all 表示搜索所有页面</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span> <span class="comment"># 限制搜索的条目数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span> <span class="comment"># 默认的新博文名称</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span> <span class="comment"># 默认布局</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># 把标题转换为 titlecase（titlecase指的是将每个单词首字母转换成大写）</span></span><br><span class="line"><span class="attr">external_link:</span> <span class="literal">true</span> <span class="comment"># 在新标签中打开链接</span></span><br><span class="line"><span class="attr">filename_case:</span> <span class="number">0</span> <span class="comment">#把文件名称转换为 (1) 小写或 (2) 大写, 0表示不变</span></span><br><span class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span> <span class="comment"># 是否显示草稿</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span> <span class="comment">#是否启用资源文件夹（用来存放相对路径图片或文件）</span></span><br><span class="line"><span class="attr">relative_link:</span> <span class="literal">false</span> <span class="comment"># 把链接改为与根目录的相对位址</span></span><br><span class="line"><span class="attr">future:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment">#是否开启代码高亮</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">false</span> <span class="comment">#是否增加代码行号</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">false</span> <span class="comment">#自动判断代码语言</span></span><br><span class="line">  <span class="attr">tab_replace:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Home page setting</span></span><br><span class="line"><span class="comment"># path: Root path for your blogs index page. (default = &#x27;&#x27;)</span></span><br><span class="line"><span class="comment"># per_page: Posts displayed per page. (0 = disable pagination)</span></span><br><span class="line"><span class="comment"># order_by: Posts order. (Order by date descending by default)</span></span><br><span class="line"><span class="attr">index_generator:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">&#x27;&#x27;</span> <span class="comment">#博客的默认路径</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">10</span> <span class="comment">#每页博客数量上限</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span> <span class="comment">#博客排序</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Category &amp; Tag</span></span><br><span class="line"><span class="attr">default_category:</span> <span class="string">uncategorized</span> <span class="comment"># 默认分类, uncategorized表示未分类</span></span><br><span class="line"><span class="attr">category_map:</span> <span class="comment"># 分类别名</span></span><br><span class="line"><span class="attr">tag_map:</span> <span class="comment"># 标签别名</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Date / Time format</span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line"><span class="attr">date_format:</span> <span class="string">YYYY-MM-DD</span> <span class="comment">#博客日期格式</span></span><br><span class="line"><span class="attr">time_format:</span> <span class="string">HH:mm:ss</span> <span class="comment">#博客时间格式</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">10</span> <span class="comment"># 每页显示的文章量，如果设置值为0，则表示禁止分页</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span> <span class="comment"># 分页目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span> <span class="comment">#选择博客主题，名字为themes中选择的主题文件夹名称</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/HappyVic/HappyVic.github.io</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># hexo-tag-cloud</span></span><br><span class="line"><span class="attr">tag_cloud:</span></span><br><span class="line">    <span class="attr">textFont:</span> <span class="string">Trebuchet</span> <span class="string">MS,</span> <span class="string">Helvetica</span></span><br><span class="line">    <span class="attr">textColor:</span> <span class="string">&#x27;#333&#x27;</span></span><br><span class="line">    <span class="attr">textHeight:</span> <span class="number">25</span></span><br><span class="line">    <span class="attr">outlineColor:</span> <span class="string">&#x27;#E2E1D1&#x27;</span></span><br><span class="line">    <span class="attr">maxSpeed:</span> <span class="number">0.1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h1><h2 id="设置头像"><a href="#设置头像" class="headerlink" title="设置头像"></a>设置头像</h2><p>找自己喜欢的图，放至<code>themes/next/source/images/</code>文件夹下<br>打开<code>themes/next/</code>下的<code>_config.yml</code>，查找<code>Sidebar Avatar</code>。修改<code>url</code>的值</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"># Sidebar Avatar</span><br><span class="line"># in theme directory(<span class="keyword">source</span><span class="regexp">/images): /im</span>ages/avatar.gif</span><br><span class="line"># in site  directory(<span class="keyword">source</span><span class="regexp">/uploads): /u</span>ploads/avatar.gif</span><br><span class="line">url: <span class="regexp">/images/</span>smile.jpg</span><br></pre></td></tr></table></figure>
<p><code>url</code>的值是图片的链接地址</p>
<h2 id="网站图标设置"><a href="#网站图标设置" class="headerlink" title="网站图标设置"></a>网站图标设置</h2><p>我们博客的默认图标是H，不过Next支持修改图标</p>
<ul>
<li>图标素材网站：<a href="https://www.easyicon.net/">easyicon</a>、<a href="https://www.iconfont.cn/">iconfont</a></li>
<li>下载16x16以及32x32大小的PNG格式图标，置于<code>/themes/next/source/images/</code>下</li>
<li>打开<code>themes/next/</code>下的<code>_config.yml</code>，查找<code>favicon</code>  <figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">favicon:</span><br><span class="line">  small: <span class="regexp">/images/</span>cat-<span class="number">16</span>x16-<span class="keyword">next</span>.png</span><br><span class="line">  medium: <span class="regexp">/images/</span>cat-<span class="number">32</span>x32-<span class="keyword">next</span>.png</span><br><span class="line">  apple_touch_icon: <span class="regexp">/images/</span>apple-touch-icon-<span class="keyword">next</span>.png</span><br><span class="line">  safari_pinned_tab: <span class="regexp">/images/</span>logo.svg</span><br><span class="line">  #android_manifest: <span class="regexp">/images/m</span>anifest.json</span><br><span class="line">  #ms_browserconfig: <span class="regexp">/images/</span>browserconfig.xml</span><br></pre></td></tr></table></figure>
  修改small和medium的路径为下载的图标路径</li>
</ul>
<h2 id="鼠标点击特效"><a href="#鼠标点击特效" class="headerlink" title="鼠标点击特效"></a>鼠标点击特效</h2><ul>
<li>鼠标点击红心特效<br>  在<code>/themes/next/source/js/src</code>下新建文件 <code>clicklove.js </code>，接着把下面的代码拷贝粘贴到<code>clicklove.js</code>文件中：  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params">e,t,a</span>)</span>&#123;<span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params"></span>)</span>&#123;c(<span class="string">&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &#x27;&#x27;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;</span>),o(),r()&#125;<span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params"></span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> e=<span class="number">0</span>;e&lt;d.length;e++)d[e].alpha&lt;=<span class="number">0</span>?(t.body.removeChild(d[e].el),d.splice(e,<span class="number">1</span>)):(d[e].y--,d[e].scale+=<span class="number">.004</span>,d[e].alpha-=<span class="number">.013</span>,d[e].el.style.cssText=<span class="string">&quot;left:&quot;</span>+d[e].x+<span class="string">&quot;px;top:&quot;</span>+d[e].y+<span class="string">&quot;px;opacity:&quot;</span>+d[e].alpha+<span class="string">&quot;;transform:scale(&quot;</span>+d[e].scale+<span class="string">&quot;,&quot;</span>+d[e].scale+<span class="string">&quot;) rotate(45deg);background:&quot;</span>+d[e].color+<span class="string">&quot;;z-index:99999&quot;</span>);requestAnimationFrame(r)&#125;<span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> t=<span class="string">&quot;function&quot;</span>==<span class="keyword">typeof</span> e.onclick&amp;&amp;e.onclick;e.onclick=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;t&amp;&amp;t(),i(e)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">&quot;div&quot;</span>);a.className=<span class="string">&quot;heart&quot;</span>,d.push(&#123;<span class="attr">el</span>:a,<span class="attr">x</span>:e.clientX-<span class="number">5</span>,<span class="attr">y</span>:e.clientY-<span class="number">5</span>,<span class="attr">scale</span>:<span class="number">1</span>,<span class="attr">alpha</span>:<span class="number">1</span>,<span class="attr">color</span>:s()&#125;),t.body.appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">&quot;style&quot;</span>);a.type=<span class="string">&quot;text/css&quot;</span>;<span class="keyword">try</span>&#123;a.appendChild(t.createTextNode(e))&#125;<span class="keyword">catch</span>(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(<span class="string">&quot;head&quot;</span>)[<span class="number">0</span>].appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">s</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span><span class="string">&quot;rgb(&quot;</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">&quot;,&quot;</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">&quot;,&quot;</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">&quot;)&quot;</span>&#125;<span class="keyword">var</span> d=[];e.requestAnimationFrame=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="built_in">setTimeout</span>(e,<span class="number">1e3</span>/<span class="number">60</span>)&#125;&#125;(),n()&#125;(<span class="built_in">window</span>,<span class="built_in">document</span>);</span><br></pre></td></tr></table></figure>
  在<code>\themes\next\layout\_layout.swig</code>文件末尾添加：  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 页面点击小红心 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/js/src/clicklove.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li>爆炸红心特效（比较花里胡哨不推荐）<br>在<code>themes/next/source/js/src</code>里面建一个<code>fireworks.js</code>的文件，接着把下面的代码拷贝粘贴到<code>fireworks.js</code>文件中：  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;<span class="function"><span class="keyword">function</span> <span class="title">updateCoords</span>(<span class="params">e</span>)</span>&#123;pointerX=(e.clientX||e.touches[<span class="number">0</span>].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[<span class="number">0</span>].clientY-canvasEl.getBoundingClientRect().top&#125;<span class="function"><span class="keyword">function</span> <span class="title">setParticuleDirection</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> t=anime.random(<span class="number">0</span>,<span class="number">360</span>)*<span class="built_in">Math</span>.PI/<span class="number">180</span>,a=anime.random(<span class="number">50</span>,<span class="number">180</span>),n=[-<span class="number">1</span>,<span class="number">1</span>][anime.random(<span class="number">0</span>,<span class="number">1</span>)]*a;<span class="keyword">return</span>&#123;<span class="attr">x</span>:e.x+n*<span class="built_in">Math</span>.cos(t),<span class="attr">y</span>:e.y+n*<span class="built_in">Math</span>.sin(t)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">createParticule</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.x=e,a.y=t,a.color=colors[anime.random(<span class="number">0</span>,colors.length-<span class="number">1</span>)],a.radius=anime.random(<span class="number">16</span>,<span class="number">32</span>),a.endPos=setParticuleDirection(a),a.draw=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,!<span class="number">0</span>),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;<span class="function"><span class="keyword">function</span> <span class="title">createCircle</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.x=e,a.y=t,a.color=<span class="string">&quot;#F00&quot;</span>,a.radius=<span class="number">0.1</span>,a.alpha=<span class="number">0.5</span>,a.lineWidth=<span class="number">6</span>,a.draw=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,!<span class="number">0</span>),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=<span class="number">1</span>&#125;,a&#125;<span class="function"><span class="keyword">function</span> <span class="title">renderParticule</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> t=<span class="number">0</span>;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">animateParticules</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> a=createCircle(e,t),n=[],i=<span class="number">0</span>;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;<span class="attr">targets</span>:n,<span class="attr">x</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e.endPos.x&#125;,<span class="attr">y</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e.endPos.y&#125;,<span class="attr">radius</span>:<span class="number">0.1</span>,<span class="attr">duration</span>:anime.random(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">&quot;easeOutExpo&quot;</span>,<span class="attr">update</span>:renderParticule&#125;).add(&#123;<span class="attr">targets</span>:a,<span class="attr">radius</span>:anime.random(<span class="number">80</span>,<span class="number">160</span>),<span class="attr">lineWidth</span>:<span class="number">0</span>,<span class="attr">alpha</span>:&#123;<span class="attr">value</span>:<span class="number">0</span>,<span class="attr">easing</span>:<span class="string">&quot;linear&quot;</span>,<span class="attr">duration</span>:anime.random(<span class="number">600</span>,<span class="number">800</span>)&#125;,<span class="attr">duration</span>:anime.random(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">&quot;easeOutExpo&quot;</span>,<span class="attr">update</span>:renderParticule,<span class="attr">offset</span>:<span class="number">0</span>&#125;)&#125;<span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a;<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> n=<span class="built_in">this</span>,i=<span class="built_in">arguments</span>;<span class="built_in">clearTimeout</span>(a),a=<span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;e.apply(n,i)&#125;,t)&#125;&#125;<span class="keyword">var</span> canvasEl=<span class="built_in">document</span>.querySelector(<span class="string">&quot;.fireworks&quot;</span>);<span class="keyword">if</span>(canvasEl)&#123;<span class="keyword">var</span> ctx=canvasEl.getContext(<span class="string">&quot;2d&quot;</span>),numberOfParticules=<span class="number">30</span>,pointerX=<span class="number">0</span>,pointerY=<span class="number">0</span>,tap=<span class="string">&quot;mousedown&quot;</span>,colors=[<span class="string">&quot;#FF1461&quot;</span>,<span class="string">&quot;#18FF92&quot;</span>,<span class="string">&quot;#5A87FF&quot;</span>,<span class="string">&quot;#FBF38C&quot;</span>],setCanvasSize=debounce(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;canvasEl.width=<span class="number">2</span>*<span class="built_in">window</span>.innerWidth,canvasEl.height=<span class="number">2</span>*<span class="built_in">window</span>.innerHeight,canvasEl.style.width=<span class="built_in">window</span>.innerWidth+<span class="string">&quot;px&quot;</span>,canvasEl.style.height=<span class="built_in">window</span>.innerHeight+<span class="string">&quot;px&quot;</span>,canvasEl.getContext(<span class="string">&quot;2d&quot;</span>).scale(<span class="number">2</span>,<span class="number">2</span>)&#125;,<span class="number">500</span>),render=anime(&#123;<span class="attr">duration</span>:<span class="number">1</span>/<span class="number">0</span>,<span class="attr">update</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.clearRect(<span class="number">0</span>,<span class="number">0</span>,canvasEl.width,canvasEl.height)&#125;&#125;);<span class="built_in">document</span>.addEventListener(tap,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="string">&quot;sidebar&quot;</span>!==e.target.id&amp;&amp;<span class="string">&quot;toggle-sidebar&quot;</span>!==e.target.id&amp;&amp;<span class="string">&quot;A&quot;</span>!==e.target.nodeName&amp;&amp;<span class="string">&quot;IMG&quot;</span>!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!<span class="number">1</span>),setCanvasSize(),<span class="built_in">window</span>.addEventListener(<span class="string">&quot;resize&quot;</span>,setCanvasSize,!<span class="number">1</span>)&#125;<span class="string">&quot;use strict&quot;</span>;<span class="function"><span class="keyword">function</span> <span class="title">updateCoords</span>(<span class="params">e</span>)</span>&#123;pointerX=(e.clientX||e.touches[<span class="number">0</span>].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[<span class="number">0</span>].clientY-canvasEl.getBoundingClientRect().top&#125;<span class="function"><span class="keyword">function</span> <span class="title">setParticuleDirection</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> t=anime.random(<span class="number">0</span>,<span class="number">360</span>)*<span class="built_in">Math</span>.PI/<span class="number">180</span>,a=anime.random(<span class="number">50</span>,<span class="number">180</span>),n=[-<span class="number">1</span>,<span class="number">1</span>][anime.random(<span class="number">0</span>,<span class="number">1</span>)]*a;<span class="keyword">return</span>&#123;<span class="attr">x</span>:e.x+n*<span class="built_in">Math</span>.cos(t),<span class="attr">y</span>:e.y+n*<span class="built_in">Math</span>.sin(t)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">createParticule</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.x=e,a.y=t,a.color=colors[anime.random(<span class="number">0</span>,colors.length-<span class="number">1</span>)],a.radius=anime.random(<span class="number">16</span>,<span class="number">32</span>),a.endPos=setParticuleDirection(a),a.draw=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,!<span class="number">0</span>),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;<span class="function"><span class="keyword">function</span> <span class="title">createCircle</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.x=e,a.y=t,a.color=<span class="string">&quot;#F00&quot;</span>,a.radius=<span class="number">0.1</span>,a.alpha=<span class="number">0.5</span>,a.lineWidth=<span class="number">6</span>,a.draw=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,!<span class="number">0</span>),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=<span class="number">1</span>&#125;,a&#125;<span class="function"><span class="keyword">function</span> <span class="title">renderParticule</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> t=<span class="number">0</span>;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">animateParticules</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> a=createCircle(e,t),n=[],i=<span class="number">0</span>;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;<span class="attr">targets</span>:n,<span class="attr">x</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e.endPos.x&#125;,<span class="attr">y</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e.endPos.y&#125;,<span class="attr">radius</span>:<span class="number">0.1</span>,<span class="attr">duration</span>:anime.random(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">&quot;easeOutExpo&quot;</span>,<span class="attr">update</span>:renderParticule&#125;).add(&#123;<span class="attr">targets</span>:a,<span class="attr">radius</span>:anime.random(<span class="number">80</span>,<span class="number">160</span>),<span class="attr">lineWidth</span>:<span class="number">0</span>,<span class="attr">alpha</span>:&#123;<span class="attr">value</span>:<span class="number">0</span>,<span class="attr">easing</span>:<span class="string">&quot;linear&quot;</span>,<span class="attr">duration</span>:anime.random(<span class="number">600</span>,<span class="number">800</span>)&#125;,<span class="attr">duration</span>:anime.random(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">&quot;easeOutExpo&quot;</span>,<span class="attr">update</span>:renderParticule,<span class="attr">offset</span>:<span class="number">0</span>&#125;)&#125;<span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a;<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> n=<span class="built_in">this</span>,i=<span class="built_in">arguments</span>;<span class="built_in">clearTimeout</span>(a),a=<span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;e.apply(n,i)&#125;,t)&#125;&#125;<span class="keyword">var</span> canvasEl=<span class="built_in">document</span>.querySelector(<span class="string">&quot;.fireworks&quot;</span>);<span class="keyword">if</span>(canvasEl)&#123;<span class="keyword">var</span> ctx=canvasEl.getContext(<span class="string">&quot;2d&quot;</span>),numberOfParticules=<span class="number">30</span>,pointerX=<span class="number">0</span>,pointerY=<span class="number">0</span>,tap=<span class="string">&quot;mousedown&quot;</span>,colors=[<span class="string">&quot;#FF1461&quot;</span>,<span class="string">&quot;#18FF92&quot;</span>,<span class="string">&quot;#5A87FF&quot;</span>,<span class="string">&quot;#FBF38C&quot;</span>],setCanvasSize=debounce(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;canvasEl.width=<span class="number">2</span>*<span class="built_in">window</span>.innerWidth,canvasEl.height=<span class="number">2</span>*<span class="built_in">window</span>.innerHeight,canvasEl.style.width=<span class="built_in">window</span>.innerWidth+<span class="string">&quot;px&quot;</span>,canvasEl.style.height=<span class="built_in">window</span>.innerHeight+<span class="string">&quot;px&quot;</span>,canvasEl.getContext(<span class="string">&quot;2d&quot;</span>).scale(<span class="number">2</span>,<span class="number">2</span>)&#125;,<span class="number">500</span>),render=anime(&#123;<span class="attr">duration</span>:<span class="number">1</span>/<span class="number">0</span>,<span class="attr">update</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.clearRect(<span class="number">0</span>,<span class="number">0</span>,canvasEl.width,canvasEl.height)&#125;&#125;);<span class="built_in">document</span>.addEventListener(tap,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="string">&quot;sidebar&quot;</span>!==e.target.id&amp;&amp;<span class="string">&quot;toggle-sidebar&quot;</span>!==e.target.id&amp;&amp;<span class="string">&quot;A&quot;</span>!==e.target.nodeName&amp;&amp;<span class="string">&quot;IMG&quot;</span>!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!<span class="number">1</span>),setCanvasSize(),<span class="built_in">window</span>.addEventListener(<span class="string">&quot;resize&quot;</span>,setCanvasSize,!<span class="number">1</span>)&#125;;</span><br></pre></td></tr></table></figure>
  打开<code>themes/next/layout/_layout.swig</code>,在<code>&lt;/body&gt;</code>上面写下如下代码：（注意和上面的对其）  <figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> theme.fireworks %&#125;</span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">class</span>=<span class="string">&quot;fireworks&quot;</span> <span class="attr">style</span>=<span class="string">&quot;position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span> </span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;//cdn.bootcss.com/animejs/2.2.0/anime.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/js/src/fireworks.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br></pre></td></tr></table></figure>
  打开主题配置文件，在文件末尾添加：（<code>themes/next/</code>下的<code>_config.yml</code>）  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Fireworks</span></span><br><span class="line"><span class="attr">fireworks:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="背景动画（只能选一个）"><a href="#背景动画（只能选一个）" class="headerlink" title="背景动画（只能选一个）"></a>背景动画（只能选一个）</h2><p>Canvas-nest风格、JavaScript 3D library风格 动画只能选一个</p>
<ul>
<li>Canvas-nest风格<br>  进入theme/next目录，执行以下命令  <figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/theme-next/</span>theme-<span class="keyword">next</span>-canvas-nest source<span class="regexp">/lib/</span>canvas-nest</span><br></pre></td></tr></table></figure>
  打开<code>themes/next/</code>下的<code>_config.yml</code>文件，搜索<code>Canvas-nest</code>，将canvas_nest的中enable值改为true即可  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Canvas-nest</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/theme-next-canvas-nest</span></span><br><span class="line"><span class="attr">canvas_nest:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">onmobile:</span> <span class="literal">true</span> <span class="comment"># display on mobile or not</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&quot;0,0,255&quot;</span> <span class="comment"># RGB values, use &#x27;,&#x27; to separate</span></span><br><span class="line">  <span class="attr">opacity:</span> <span class="number">0.5</span> <span class="comment"># the opacity of line: 0~1</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">-1</span> <span class="comment"># z-index property of the background</span></span><br><span class="line">  <span class="attr">count:</span> <span class="number">99</span> <span class="comment"># the number of lines</span></span><br></pre></td></tr></table></figure></li>
<li>JavaScript 3D library风格<br>  进入theme/next目录，执行以下命令  <figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/theme-next/</span>theme-<span class="keyword">next</span>-three source<span class="regexp">/lib/</span>three</span><br></pre></td></tr></table></figure>
  打开<code>themes/next/</code>下的<code>_config.yml</code>文件，搜索<code>theme-next-three</code>，将想要的效果改为true即可：  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># three_waves</span></span><br><span class="line"><span class="attr">three_waves:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># canvas_lines</span></span><br><span class="line"><span class="attr">canvas_lines:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># canvas_sphere</span></span><br><span class="line"><span class="attr">canvas_sphere:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="设置侧栏在左侧-右侧"><a href="#设置侧栏在左侧-右侧" class="headerlink" title="设置侧栏在左侧/右侧"></a>设置侧栏在左侧/右侧</h2><p>打开themes/next/下的_config.yml，查找<code>sidebar</code></p>
<ul>
<li>Pisces或Gemini方案<br>  打开themes/next/下的_config.yml，查找<code>sidebar</code>，将想要的方案打开  <figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">sidebar:</span></span><br><span class="line"><span class="symbol">position:</span> left</span><br><span class="line"><span class="meta">#position: right</span></span><br></pre></td></tr></table></figure></li>
<li>Mist或Muse方案<br>  打开next/source/js/src/motion.js，查找paddingRight，把所有（2个）PaddingRight更改为paddingLeft即可。<br>  打开next/source/css/_custom/custom.styl，添加如下内容：  <figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">//侧边栏置于左侧</span></span><br><span class="line"><span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//侧栏开关置于左侧</span></span><br><span class="line"><span class="selector-class">.sidebar-toggle</span> &#123;</span><br><span class="line">  <span class="attribute">left</span>: <span class="variable">$b2t-position-right</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
  打开next/source/css/_common/components/back-to-top.styl，将right: $b2t-position-right;改为left: $b2t-position-right;</li>
</ul>
<h2 id="显示侧边栏的时机"><a href="#显示侧边栏的时机" class="headerlink" title="显示侧边栏的时机"></a>显示侧边栏的时机</h2><p>打开themes/next/下的_config.yml，查找<code>sidebar</code></p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"># Sidebar Display, available <span class="built_in">values</span> (<span class="keyword">only</span> <span class="keyword">for</span> Muse | Mist):</span><br><span class="line">#  - post    <span class="built_in">expand</span> <span class="keyword">on</span> posts automatically. Default.</span><br><span class="line">#  - always  <span class="built_in">expand</span> <span class="keyword">for</span> <span class="keyword">all</span> pages automatically.</span><br><span class="line">#  - <span class="keyword">hide</span>    <span class="built_in">expand</span> <span class="keyword">only</span> when click <span class="keyword">on</span> the sidebar toggle icon.</span><br><span class="line">#  - <span class="built_in">remove</span>  totally <span class="built_in">remove</span> sidebar including sidebar toggle.</span><br><span class="line"><span class="keyword">display</span>: post</span><br></pre></td></tr></table></figure>

<h2 id="文章末尾添加版权声明"><a href="#文章末尾添加版权声明" class="headerlink" title="文章末尾添加版权声明"></a>文章末尾添加版权声明</h2><p>打开themes/next/下的_config.yml，查找<code>creative_commons</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">creative_commons:</span></span><br><span class="line">  <span class="attr">license:</span> <span class="string">by-nc-sa</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">post:</span> <span class="literal">true</span>  <span class="comment"># 将false改为true即可显示版权信息</span></span><br><span class="line">  <span class="attr">language:</span></span><br></pre></td></tr></table></figure>

<h2 id="添加本地搜索功能"><a href="#添加本地搜索功能" class="headerlink" title="添加本地搜索功能"></a>添加本地搜索功能</h2><p>参考文章<a href="https://vic.kim/2019/05/22/Hexo%20Next%20%E4%B8%BB%E9%A2%98%E4%B8%AD%E6%B7%BB%E5%8A%A0%E6%9C%AC%E5%9C%B0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/">Hexo Next 主题中添加本地搜索功能</a></p>
<h2 id="建立标签云及效果展示"><a href="#建立标签云及效果展示" class="headerlink" title="建立标签云及效果展示"></a>建立标签云及效果展示</h2><p>参考文章<a href="https://vic.kim/2019/05/23/Hexo%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%8B%E6%A0%87%E7%AD%BE%E4%BA%91%E5%8F%8A%E6%95%88%E6%9E%9C%E5%B1%95%E7%A4%BA/">Hexo博客建立标签云及效果展示</a></p>
<h2 id="文章添加阴影、透明效果"><a href="#文章添加阴影、透明效果" class="headerlink" title="文章添加阴影、透明效果"></a>文章添加阴影、透明效果</h2><p>打开theme/next/source/css/_custom/custom.styl，添加以下代码</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 主页文章添加阴影效果</span><br><span class="line"><span class="selector-class">.post</span> &#123;</span><br><span class="line">   <span class="attribute">margin-top</span>: <span class="number">60px</span>;</span><br><span class="line">   <span class="attribute">margin-bottom</span>: <span class="number">60px</span>;</span><br><span class="line">   <span class="attribute">padding</span>: <span class="number">25px</span>;</span><br><span class="line">   <span class="attribute">background</span>:<span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.9</span>) none repeat scroll <span class="meta">!important</span>;</span><br><span class="line">   -webkit-<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">202</span>, <span class="number">203</span>, <span class="number">203</span>, .<span class="number">5</span>);</span><br><span class="line">   -moz-<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">202</span>, <span class="number">203</span>, <span class="number">204</span>, .<span class="number">5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="设置代码块样式"><a href="#设置代码块样式" class="headerlink" title="设置代码块样式"></a>设置代码块样式</h2><p>在博客配置文件中，搜索<code>highlight:</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">highlight:</span></span><br><span class="line">      <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment">#是否开启代码高亮</span></span><br><span class="line">      <span class="attr">line_number:</span> <span class="literal">false</span> <span class="comment">#是否增加代码行号</span></span><br><span class="line">      <span class="attr">auto_detect:</span> <span class="literal">true</span> <span class="comment">#自动判断代码语言</span></span><br><span class="line">      <span class="attr">tab_replace:</span></span><br></pre></td></tr></table></figure>
<p>代码块背景。打开themes/next/下的_config.yml，查找<code>highlight_theme</code></p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># Code Highlight theme</span></span><br><span class="line"><span class="meta"># Available values: normal | night | night eighties | night blue | night bright</span></span><br><span class="line"><span class="meta"># https://github.com/chriskempson/tomorrow-theme</span></span><br><span class="line">highlight_theme: night eighties</span><br></pre></td></tr></table></figure>

<h2 id="代码块复制功能"><a href="#代码块复制功能" class="headerlink" title="代码块复制功能"></a>代码块复制功能</h2><p>参考文章<a href="https://vic.kim/2019/05/26/Hexo%20NexT%20%E4%BB%A3%E7%A0%81%E5%9D%97%E5%A4%8D%E5%88%B6%E5%8A%9F%E8%83%BD/#more">Hexo NexT 代码块复制功能</a></p>
<h2 id="显示当前浏览进度"><a href="#显示当前浏览进度" class="headerlink" title="显示当前浏览进度"></a>显示当前浏览进度</h2><p>打开themes/next/下的_config.yml，查找<code>back2top</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">back2top:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Back to top in sidebar.</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Scroll percent label in b2t button.</span></span><br><span class="line">  <span class="attr">scrollpercent:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h2 id="在右上角或者左上角实现fork-me-on-github"><a href="#在右上角或者左上角实现fork-me-on-github" class="headerlink" title="在右上角或者左上角实现fork me on github"></a>在右上角或者左上角实现fork me on github</h2><ul>
<li>选择样式GitHub Ribbons,</li>
<li>修改图片跳转链接,将<a href="https://github.com/you">中的链接换为自己Github链接：</a></li>
<li>打开 themes/next/layout/_layout.swig 文件，把代码复制到<div class="headband"></div>下面。</li>
</ul>
]]></content>
      <categories>
        <category>Hexo Next</category>
      </categories>
      <tags>
        <tag>Hexo Next</tag>
      </tags>
  </entry>
  <entry>
    <title>Locust接口性能测试</title>
    <url>/2019/08/23/Locust%E6%8E%A5%E5%8F%A3%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h1 id="性能测试工具"><a href="#性能测试工具" class="headerlink" title="性能测试工具"></a>性能测试工具</h1><p>谈到性能测试工具，我们首先想到的是LoadRunner或JMeter。<br>LoadRunner是非常有名的商业性能测试工具，功能非常强大。但现在一般不推荐使用该工具来进行性能测试，主要是使用也较为复杂，而且该工具体积比较大，需要付费且价格不便宜。<br>JMeter同样是非常有名的开源性能测试工具，功能也很完善，我们之前介绍了它作为接口测试工具的使用。<br>Locust同样是性能测试工具，虽然官方这样来描述它：“An open source load testing tool.”，但它和前面两个工具有一些不同。
　</p>
<h1 id="Locust简介"><a href="#Locust简介" class="headerlink" title="Locust简介"></a>Locust简介</h1><p>Locust完全基于Python编程语言，采用纯 Python描述测试脚本，并且HTTP请求完全基于Requests库。除了HTTP/HTTPS协议外，Locust还可以测试其他协议的系统，只需采用Python调用对应的库进行请求描述即可。<br>LoadRunner和JMeter这类采用进程和线程的测试工具，都很难在单机上模拟出较高的并发压力。Locust的并发机制摒弃了进程和线程，采用协程（gevent）的机制。协程避免了系统级资源调度，因此可以大幅提高单机的并发能力。</p>
<p>扩展资料：<a href="https://www.liaoxuefeng.com/wiki/897692888725344/923057403198272">协程—廖雪峰博客</a></p>
<p>下载安装<br>官网地址：<a href="https://www.locust.io/">https://www.locust.io</a></p>
<p>使用pip命令安装Locust：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">pip <span class="keyword">install</span> locustio</span><br></pre></td></tr></table></figure>
<p>安装完成之后检测是否安装成功：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">locust -<span class="keyword">help</span></span><br><span class="line">Usage: locust [<span class="keyword">options</span>] [LocustClass [LocustClass2 ... ]]</span><br><span class="line"></span><br><span class="line">Option<span class="variable">s:</span></span><br><span class="line">  -h, --<span class="keyword">help</span>            show this <span class="keyword">help</span> message <span class="built_in">and</span> <span class="keyword">exit</span></span><br><span class="line">  -H HOST, --host=HOST  Host <span class="keyword">to</span> load test in the following forma<span class="variable">t:</span></span><br><span class="line">                        http://<span class="number">10.21</span>.<span class="number">32.33</span></span><br><span class="line">  --web-host=WEB_HOST   Host <span class="keyword">to</span> bind the web interface <span class="keyword">to</span>. Defaults <span class="keyword">to</span> <span class="string">&#x27;&#x27;</span> (<span class="keyword">all</span></span><br><span class="line">                        interfaces)</span><br><span class="line">  -<span class="keyword">P</span> PORT, --port=PORT, --web-port=PORT</span><br><span class="line">                        Port <span class="keyword">on</span> which <span class="keyword">to</span> run web host</span><br><span class="line">  -<span class="keyword">f</span> LOCUSTFILE, --locustfile=LOCUSTFILE</span><br><span class="line">                        Python module <span class="keyword">file</span> <span class="keyword">to</span> import, <span class="keyword">e</span>.g. <span class="string">&#x27;../other.py&#x27;</span>.</span><br><span class="line">                        Defaul<span class="variable">t:</span> locustfile</span><br><span class="line">  ....</span><br></pre></td></tr></table></figure>

<h1 id="测试案例"><a href="#测试案例" class="headerlink" title="测试案例"></a>测试案例</h1><h2 id="测试场景"><a href="#测试场景" class="headerlink" title="测试场景"></a>测试场景</h2><p>针对如下两个接口进行性能测试：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8000</span><span class="regexp">/users/</span></span><br><span class="line">http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8000</span><span class="regexp">/groups/</span></span><br></pre></td></tr></table></figure>
<p>以上两个接口也就是我们之前项目django_restful的接口</p>
<p>负载场景</p>
<pre><code>* 每秒生成2个用户，总共生成60个用户。
* 负载测试5分钟然后查看接口的平均响应时间。
</code></pre>
<h2 id="脚本实现"><a href="#脚本实现" class="headerlink" title="脚本实现"></a>脚本实现</h2><p>restful_api_locust.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> locust <span class="keyword">import</span>  HttpLocust,TaskSet,task</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserBehavior</span>(<span class="params">TaskSet</span>):</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @task(<span class="params"><span class="number">2</span></span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_users</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.client.get(<span class="string">&quot;/users/&quot;</span>,auth=(<span class="string">&#x27;51zxw&#x27;</span>,<span class="string">&#x27;zxw20182018&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">    @task(<span class="params"><span class="number">1</span></span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_groups</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.client.get(<span class="string">&quot;/groups/&quot;</span>,auth=(<span class="string">&#x27;51zxw&#x27;</span>,<span class="string">&#x27;zxw20182018&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebsiteUser</span>(<span class="params">HttpLocust</span>):</span></span><br><span class="line">    task_set = UserBehavior</span><br><span class="line">    min_wait = <span class="number">3000</span></span><br><span class="line">    max_wait = <span class="number">6000</span></span><br></pre></td></tr></table></figure>
<p>UserBehavior类继承TaskSet类，用于描述用户行为。</p>
<pre><code>* @task装饰该方法为一个事务,后面的数字表示请求比例，上面的比例为2:1 默认都是1:1
* test_users()方法表示一个用户行为，这里是请求user接口。
* test_groups()方法表示请求group接口。
* client.get()用于指定请求的路径。
</code></pre>
<p>WebsiteUser类用于设置性能测试。</p>
<pre><code>* task_set：指向一个定义的用户行为类。
* min_wait：执行事务之间用户等待时间的下界（单位：毫秒）。
* max_wait：执行事务之间用户等待时间的上界（单位：毫秒）。
</code></pre>
<h2 id="执行测试"><a href="#执行测试" class="headerlink" title="执行测试"></a>执行测试</h2><p>使用如下命令开始启动测试</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">locust -f vic\locust\restful_api_locust.py --host=http://127.0.0.1:8000</span><br><span class="line">[2018-07-24 15:39:22,917] LAPTOP-8B5JADC8/INFO/locust.main: Starting web<span class="built_in"> monitor </span>at *:8089</span><br><span class="line">[2018-07-24 15:39:22,917] LAPTOP-8B5JADC8/INFO/locust.main: Starting Locust 0.8.1</span><br></pre></td></tr></table></figure>
<p>在浏览器打开localhost:8089可以看到如下页面：</p>
<p>locust-index</p>
<pre><code>* Number of users to simulate：设置模拟用户数。
* Hatch rate（users spawned/second）：每秒产生（启动）的虚拟用户数。
* 单击“Start swarming”按钮，开始运行性能测试
</code></pre>
<p>运行之后可以看到主界面如下：</p>
<p>locust-statistics</p>
<p>性能测试参数如下。</p>
<pre><code>* Type：请求的类型，例如GET/POST。
* Name：请求的路径。
* request：当前请求的数量。
* fails：当前请求失败的数量。
* Median：中间值，单位毫秒，一半的服务器响应时间低于该值，而另一半高于该值。
* Average：平均值，单位毫秒，所有请求的平均响应时间。
* Min：请求的最小服务器响应时间，单位毫秒。
* Max：请求的最大服务器响应时间，单位毫秒。
* Content Size：单个请求的大小，单位字节。
* reqs/sec：每秒钟请求的个数。
</code></pre>
<p>点击 Charts 菜单可以查看性能图表</p>
<p>locust-charts</p>
<p>图表含义如下：</p>
<pre><code>* Total Request per Second ：每秒的请求数
* Average Response Time: 平均响应时间
* Number of Users: 用户数
</code></pre>
<h1 id="参数化"><a href="#参数化" class="headerlink" title="参数化"></a>参数化</h1><h2 id="测试场景-1"><a href="#测试场景-1" class="headerlink" title="测试场景"></a>测试场景</h2><p>如果想对如下接口进行并发测试，则可以将id进行参数化设置</p>
<pre><code>* http://127.0.0.1:8000/groups/1/
* http://127.0.0.1:8000/groups/2/
* http://127.0.0.1:8000/users/1/
* http://127.0.0.1:8000/users/2/
</code></pre>
<p>代码实现<br>locust_users_groups.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> locust <span class="keyword">import</span>  HttpLocust,TaskSet,task</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserBehavior</span>(<span class="params">TaskSet</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_start</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment">#设置user和group参数下标初始值</span></span><br><span class="line">        self.users_index=<span class="number">0</span></span><br><span class="line">        self.groups_index=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @task</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_users</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment">#读取参数</span></span><br><span class="line">        users_id=self.locust.<span class="built_in">id</span>[self.users_index]</span><br><span class="line">        url=<span class="string">&quot;/users/&quot;</span>+<span class="built_in">str</span>(users_id)+<span class="string">&#x27;/&#x27;</span></span><br><span class="line">        self.client.get(url,auth=(<span class="string">&#x27;51zxw&#x27;</span>,<span class="string">&#x27;zxw20182018&#x27;</span>))</span><br><span class="line">        <span class="comment">#取余运算循环遍历参数</span></span><br><span class="line">        self.users_index=(self.users_index+<span class="number">1</span>)%<span class="built_in">len</span>(self.locust.<span class="built_in">id</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @task</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_groups</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment">#参数化</span></span><br><span class="line">        groups_id=self.locust.<span class="built_in">id</span>[self.groups_index]</span><br><span class="line">        url=<span class="string">&quot;/groups/&quot;</span>+<span class="built_in">str</span>(groups_id)+<span class="string">&quot;/&quot;</span></span><br><span class="line">        self.client.get(url,auth=(<span class="string">&#x27;51zxw&#x27;</span>,<span class="string">&#x27;zxw20182018&#x27;</span>))</span><br><span class="line">        self.groups_index=(self.groups_index+<span class="number">1</span>)%<span class="built_in">len</span>(self.locust.<span class="built_in">id</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebsiteUser</span>(<span class="params">HttpLocust</span>):</span></span><br><span class="line">    task_set = UserBehavior</span><br><span class="line">    <span class="comment">#参数配置</span></span><br><span class="line">    <span class="built_in">id</span>=[<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">    min_wait = <span class="number">3000</span></span><br><span class="line">    max_wait = <span class="number">6000</span></span><br><span class="line">    <span class="comment">#host配置</span></span><br><span class="line">    host = <span class="string">&#x27;http://127.0.0.1:8000&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p>执行如下命令即可运行测试</p>
<figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">locust -f vic<span class="symbol">\l</span>ocust<span class="symbol">\l</span>ocust_users_groups.py</span><br></pre></td></tr></table></figure>
<p>locust-params</p>
<h2 id="运行模式"><a href="#运行模式" class="headerlink" title="运行模式"></a>运行模式</h2><h3 id="no-web运行"><a href="#no-web运行" class="headerlink" title="no-web运行"></a>no-web运行</h3><p>前面是通过登录web来运行测试的，其实也可以非web状态来运行,如cmd命令来运行。<br>如果需要非Web形式运行，则需使用–no-web参数，并会用到如下几个参数。</p>
<pre><code>* -c, --clients：指定并发用户数；
* -r, --hatch-rate：指定并发加压速率，默认值位1。
* -t, --run-time：设置运行时间。如(300s,20m, 3h, 1h30m等）；
</code></pre>
<p>运行命令如下：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">locust</span> -f vic\locust\locust_users_groups.py --no-web -c <span class="number">10</span> -r <span class="number">2</span> -t <span class="number">15</span>s</span><br></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">locust -f vic\locust\locust_users_groups.py --no-web -c 10 -r 2 -t 15s</span><br><span class="line">[2018-08-21 10:12:59,017] LAPTOP-8B5JADC8/INFO/locust.main: Run time limit set to 15 seconds</span><br><span class="line">[2018-08-21 10:12:59,017] LAPTOP-8B5JADC8/INFO/locust.main: Starting Locust 0.8</span><br><span class="line">[2018-08-21 10:12:59,018] LAPTOP-8B5JADC8/INFO/locust.runners: Hatching and swarming 10 clients at the rate 2 clients/s...</span><br><span class="line"><span class="code"> Name                                                          # reqs      # fails     Avg     Min     Max  |  Median   req/s</span></span><br><span class="line">--------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">--------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="code"> Total                                                              0     0(0.00%)                                       0.00</span></span><br><span class="line"></span><br><span class="line"><span class="code"> Name                                                          # reqs      # fails     Avg     Min     Max  |  Median   req/s</span></span><br><span class="line">--------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="code"> GET /groups/1/                                                     2     0(0.00%)     134     122     146  |     120    0.00</span></span><br><span class="line"><span class="code"> GET /users/1/                                                      2     0(0.00%)     118     100     136  |     100    0.00</span></span><br><span class="line">--------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="code"> Total                                                              4     0(0.00%)                                       0.00</span></span><br><span class="line"></span><br><span class="line"><span class="code"> Name                                                          # reqs      # fails     Avg     Min     Max  |  Median   req/s</span></span><br><span class="line">--------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="code"> GET /groups/1/                                                     4     0(0.00%)     135     122     146  |     130    1.00</span></span><br><span class="line"><span class="code"> GET /users/1/                                                      4     0(0.00%)     115     100     136  |     100    1.00</span></span><br><span class="line">--------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="code"> Total                                                              8     0(0.00%)                                       2.00</span></span><br><span class="line"></span><br><span class="line">[2018-08-21 10:13:04,034] LAPTOP-8B5JADC8/INFO/locust.runners: All locusts hatched: WebsiteUser: 10</span><br><span class="line">[2018-08-21 10:13:04,034] LAPTOP-8B5JADC8/INFO/locust.runners: Resetting stats</span><br><span class="line"></span><br><span class="line"><span class="code"> Name                                                          # reqs      # fails     Avg     Min     Max  |  Median   req/s</span></span><br><span class="line">--------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="code"> GET /groups/1/                                                     1     0(0.00%)     147     147     147  |     150    0.00</span></span><br><span class="line"><span class="code"> GET /users/1/                                                      2     0(0.00%)     110      92     128  |      92    0.00</span></span><br><span class="line"><span class="code"> GET /users/2/                                                      1     0(0.00%)     102     102     102  |     100    0.00</span></span><br><span class="line">--------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="code"> Total                                                              4     0(0.00%)                                       0.00</span></span><br><span class="line"></span><br><span class="line"><span class="code"> Name                                                          # reqs      # fails     Avg     Min     Max  |  Median   req/s</span></span><br><span class="line">--------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="code"> GET /groups/1/                                                     3     0(0.00%)     129     101     147  |     140    0.00</span></span><br><span class="line"><span class="code"> GET /users/1/                                                      3     0(0.00%)     108      92     128  |     100    0.00</span></span><br><span class="line"><span class="code"> GET /users/2/                                                      1     0(0.00%)     102     102     102  |     100    0.00</span></span><br><span class="line">--------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="code"> Total                                                              7     0(0.00%)                                       0.00</span></span><br><span class="line"></span><br><span class="line"><span class="code"> Name                                                          # reqs      # fails     Avg     Min     Max  |  Median   req/s</span></span><br><span class="line">--------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="code"> GET /groups/1/                                                     4     0(0.00%)     125     101     147  |     110    1.00</span></span><br><span class="line"><span class="code"> GET /groups/2/                                                     2     0(0.00%)     136     116     156  |     120    0.00</span></span><br><span class="line"><span class="code"> GET /users/1/                                                      3     0(0.00%)     108      92     128  |     100    1.00</span></span><br><span class="line"><span class="code"> GET /users/2/                                                      2     0(0.00%)     102     102     102  |     100    0.33</span></span><br><span class="line">--------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="code"> Total                                                             11     0(0.00%)                                       2.33</span></span><br><span class="line"></span><br><span class="line"><span class="code"> Name                                                          # reqs      # fails     Avg     Min     Max  |  Median   req/s</span></span><br><span class="line">--------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="code"> GET /groups/1/                                                     5     0(0.00%)     123     101     147  |     120    0.75</span></span><br><span class="line"><span class="code"> GET /groups/2/                                                     3     0(0.00%)     124     100     156  |     120    0.50</span></span><br><span class="line"><span class="code"> GET /users/1/                                                      3     0(0.00%)     108      92     128  |     100    0.75</span></span><br><span class="line"><span class="code"> GET /users/2/                                                      4     0(0.00%)     114     102     153  |     100    0.25</span></span><br><span class="line">--------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="code"> Total                                                             15     0(0.00%)                                       2.25</span></span><br><span class="line"></span><br><span class="line"><span class="code"> Name                                                          # reqs      # fails     Avg     Min     Max  |  Median   req/s</span></span><br><span class="line">--------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="code"> GET /groups/1/                                                     6     0(0.00%)     128     101     157  |     120    0.67</span></span><br><span class="line"><span class="code"> GET /groups/2/                                                     5     0(0.00%)     127     100     156  |     120    0.33</span></span><br><span class="line"><span class="code"> GET /users/1/                                                      4     0(0.00%)     108      92     128  |     100    0.50</span></span><br><span class="line"><span class="code"> GET /users/2/                                                      5     0(0.00%)     121     102     153  |     100    0.50</span></span><br><span class="line">--------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="code"> Total                                                             20     0(0.00%)                                       2.00</span></span><br><span class="line"></span><br><span class="line">[2018-08-21 10:13:13,691] LAPTOP-8B5JADC8/INFO/locust.main: Time limit reached. Stopping Locust.</span><br><span class="line">[2018-08-21 10:13:13,693] LAPTOP-8B5JADC8/INFO/locust.main: Shutting down (exit code 0), bye.</span><br><span class="line"><span class="code"> Name                                                          # reqs      # fails     Avg     Min     Max  |  Median   req/s</span></span><br><span class="line">--------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="code"> GET /groups/1/                                                     6     0(0.00%)     128     101     157  |     120    0.67</span></span><br><span class="line"><span class="code"> GET /groups/2/                                                     5     0(0.00%)     127     100     156  |     120    0.33</span></span><br><span class="line"><span class="code"> GET /users/1/                                                      4     0(0.00%)     108      92     128  |     100    0.50</span></span><br><span class="line"><span class="code"> GET /users/2/                                                      5     0(0.00%)     121     102     153  |     100    0.50</span></span><br><span class="line">--------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="code"> Total                                                             20     0(0.00%)                                       2.00</span></span><br><span class="line"></span><br><span class="line">Percentage of the requests completed within given times</span><br><span class="line"><span class="code"> Name                                                           # reqs    50%    66%    75%    80%    90%    95%    98%    99%   100%</span></span><br><span class="line">--------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="code"> GET /groups/1/                                                      6    140    140    150    150    160    160    160    160    157</span></span><br><span class="line"><span class="code"> GET /groups/2/                                                      5    120    150    150    160    160    160    160    160    156</span></span><br><span class="line"><span class="code"> GET /users/1/                                                       4    110    110    130    130    130    130    130    130    128</span></span><br><span class="line"><span class="code"> GET /users/2/                                                       5    100    150    150    150    150    150    150    150    153</span></span><br><span class="line">--------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="code"> Total                                                              20    120    140    150    150    160    160    160    160    157</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="分布式运行"><a href="#分布式运行" class="headerlink" title="分布式运行"></a>分布式运行</h3><p>上面我们都是单台机器来执行性能测试，但是当单台机器不够模拟足够多的用户时，Locust支持运行在多台机器中进行压力测试。分布式运行一般是一台master 多台slave 如下图所示：</p>
<p>image</p>
<p>首先定义一台 master</p>
<figure class="highlight moonscript"><table><tr><td class="code"><pre><span class="line">locust -f vic\locust\locust_users_groups.py <span class="comment">--master</span></span><br></pre></td></tr></table></figure>
<p>然后定义 slave</p>
<p>locust -f D:\api_test\locust\locust_users_groups.py  –slave<br>如果slave与master不在同一台机器上，还需要通过–master-host参数再指定master的IP地址。</p>
<p>C:\Users\Shuqing&gt;locust -f D:\api_test\locust\locust_users_groups.py –slave –master-host <master_ip><br>运行之后可以看到web界面显示的SLAVES数量</master_ip></p>
<p>locust-slave</p>
]]></content>
      <categories>
        <category>接口自动化测试</category>
      </categories>
      <tags>
        <tag>接口自动化测试</tag>
      </tags>
  </entry>
  <entry>
    <title>UIAutomator2的使用</title>
    <url>/2019/05/20/UIAutomator2%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>uiautomator2是一个python库，用于Android的UI自动化测试，其底层基于Google uiautomator，Google提供的uiautomator库可以获取屏幕上任意一个APP的任意一个控件属性，并对其进行任意操作</p>
<h1 id="支持平台及语言你在"><a href="#支持平台及语言你在" class="headerlink" title="支持平台及语言你在"></a>支持平台及语言你在</h1><p>python-uiautomator2封装了谷歌自带的uiautomator2测试框架，提供便利的python接口。他允许测试人员直接在PC上编写Python的测试代码，操作手机应用，完成自动化，大大提高了自动化代码编写的效率。</p>
<h1 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h1><p><img src="/.kim//%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.png" alt="工作原理"><br>如图所示，python-uiautomator2主要分为两个部分，python客户端，移动设备</p>
<ul>
<li>python端: 运行脚本，并向移动设备发送HTTP请求</li>
<li>移动设备：移动设备上运行了封装了uiautomator2的HTTP服务，解析收到的请求，并转化成uiautomator2的代码。</li>
</ul>
<p>整个过程</p>
<ol>
<li>在移动设备上安装atx-agent(守护进程), 随后atx-agent启动uiautomator2服务(默认7912端口)进行监听</li>
<li>在PC上编写测试脚本并执行（相当于发送HTTP请求到移动设备的server端）</li>
<li>移动设备通过WIFI或USB接收到PC上发来的HTTP请求，执行制定的操作</li>
</ol>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="安装adb"><a href="#安装adb" class="headerlink" title="安装adb"></a>安装adb</h2><p>如命令行可以执行adb devices，则跳过此步骤<br>从谷歌官网下载Android Platform Tools <a href="https://developer.android.com/studio/releases/platform-tools.html">https://developer.android.com/studio/releases/platform-tools.html</a>， 解压，并加包含adb.exe的目录加入到系统的PATH中。</p>
<h2 id="安装uiautomator2"><a href="#安装uiautomator2" class="headerlink" title="安装uiautomator2"></a>安装uiautomator2</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install --upgrade --pre uiautomator2</span><br></pre></td></tr></table></figure>
<h2 id="如果你需要用到截图，安装pillow"><a href="#如果你需要用到截图，安装pillow" class="headerlink" title="如果你需要用到截图，安装pillow"></a>如果你需要用到截图，安装pillow</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install pillow</span><br></pre></td></tr></table></figure>
<h2 id="设备安装atx-agent"><a href="#设备安装atx-agent" class="headerlink" title="设备安装atx-agent"></a>设备安装atx-agent</h2><p>首先设备连接到PC，并能够adb devices发现该设备。执行下面的命令会自动安装本库所需要的设备端程序：uiautomator-server，atx-agent，openstf / minicap，openstf / minitouch</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># init就是所有USB连接电脑的手机上都安装uiautomator2</span></span><br><span class="line">python -m uiautomator2 init</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 指定手机安装uiautomator2， 用 --mirror</span></span><br><span class="line">python -m uiautomator2 init --mirror --serial $SERIAL</span><br><span class="line"></span><br><span class="line"><span class="comment"># 嫌弃慢的话，可以用国内的镜像</span></span><br><span class="line">python -m uiautomator2 init --mirror</span><br></pre></td></tr></table></figure>
<p>最后提示success，代表atx-agent初始化成功。</p>
<h2 id="安装weditor"><a href="#安装weditor" class="headerlink" title="安装weditor"></a>安装weditor</h2><p>有了这个，方便我们快速的识别手机上的元素，方便写代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install --pre -U weditor<span class="comment">#pip install --pre weditor</span></span><br></pre></td></tr></table></figure>
<p>Windows系统可以使用命令在桌面创建一个快捷方式 python -m weditor –shortcut</p>
<p>启动方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python -m weditor </span><br></pre></td></tr></table></figure>
<p>浏览器会自动打开一个网页 <a href="http://atx.open.netease.com,看到如下界面/">http://atx.open.netease.com，看到如下界面</a><br><img src="/.kim//weditor.jpeg" alt="weditor"></p>
<p>重点说下这个部分<br><img src="/.kim//weditor_connect.png" alt="weditor"><br>如何与手机连接起来呢？就是通过手机序列号或IP来实现的。打开cmd,输入adb devices，查看手机序列号，输入框中填写设备的IP或者设备的Serial（序列号）。之后点击Connect，如果一切正常就会出现一个绿色的叶子<br><img src="/.kim//weditor_state.png" alt="weditor"><br>点击蓝色的Reload，就可以在网页上看到手机的界面了。非常的强大。我们可以看到手机元素的各种定位方法，在UI自动化写代码的时候，真的是非常的方面，手机页面和weditor是实时同步的。</p>
<h2 id="【推荐】AppetizerIO-所见即所得脚本编辑器"><a href="#【推荐】AppetizerIO-所见即所得脚本编辑器" class="headerlink" title="【推荐】AppetizerIO 所见即所得脚本编辑器"></a>【推荐】AppetizerIO 所见即所得脚本编辑器</h2><p><a href="https://www.appetizer.io/">AppetizerIO</a> 提供了对uiautomator2的深度集成，可以图形化管理ATX设备，还有所见即所得脚本编辑器<br>     *到网站下载直接打开，首次使用需要注册账号<br>       * <code>设备管理</code> 界面里可以检查设备是否正常init，起停atx-agent，抓取atx-agent.log文件<br>       *  <code>APP测试-&gt;脚本助手</code>调出脚本助手，实时界面同步，点击界面直接插入各种代码，同时支持uiautomator和Appium<br>      * <strong><a href="https://github.com/openatx/uiautomator2/wiki/Appetizer%E6%89%80%E8%A7%81%E5%8D%B3%E6%89%80%E5%BE%97u2%E8%84%9A%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8">视频教程 请戳这里</a></strong>  <a href="http://doc.appetizer.io/">其他文档在此</a></p>
<h1 id="应用及操作"><a href="#应用及操作" class="headerlink" title="应用及操作"></a>应用及操作</h1><h2 id="调用uiautomator2的过程"><a href="#调用uiautomator2的过程" class="headerlink" title="调用uiautomator2的过程"></a>调用uiautomator2的过程</h2><ol>
<li>配置手机设备参数，设置具体操作的是哪一台手机 </li>
<li>抓取手机上应用的控件，制定对应的控件来进行操作</li>
<li>抓取手机上应用的控件，制定对应的控件来进行操作抓取手机上应用的控件，制定对应的控件来进行操作<br>对抓取到的控件进行操作，比如点击、填写参数等。</li>
</ol>
<h2 id="设备连接方法，有两种"><a href="#设备连接方法，有两种" class="headerlink" title="设备连接方法，有两种"></a>设备连接方法，有两种</h2><p>python-uiautomator2连接手机的方式有两种，一种是通过WIFI，另外一种是通过USB。两种方法各有优缺点。<br>WIFI最便利的地方要数可以不用连接数据线，USB则可以用在PC和手机网络不在一个网段用不了的情况。</p>
<ol>
<li>通过WiFi，假设设备IP 192.168.5.4和您的PC在同一网络中<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> uiautomator2 <span class="keyword">as</span> u2</span><br><span class="line">d = u2.connect(<span class="string">&#x27;192.168.5.4&#x27;</span>) <span class="comment"># WIFI链接设备。或者u2.connect_wifi(&#x27;10.0.0.1&#x27;)</span></span><br></pre></td></tr></table></figure></li>
<li>通过USB， 假设设备序列是123456789F（见adb devices）<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> uiautomator2 <span class="keyword">as</span> u2</span><br><span class="line">d = u2.connect(<span class="string">&#x27;123456789F&#x27;</span>) <span class="comment"># USB链接设备。或者u2.connect_usb(&#x27;123456f&#x27;)</span></span><br><span class="line"><span class="comment">#d = u2.connect_usb()#当前只有一个设备时可以用这个</span></span><br></pre></td></tr></table></figure>
在没有参数的情况下调用u2.connect()， uiautomator2将从环境变量ANDROID_DEVICE_IP获取设备IP。如果这个环境变量是空的，uiautomator将返回connect_usb，您需要确保只有一个设备连接到计算机。<h2 id="检查并维持设备端守护进程处于运行状态"><a href="#检查并维持设备端守护进程处于运行状态" class="headerlink" title="检查并维持设备端守护进程处于运行状态"></a>检查并维持设备端守护进程处于运行状态</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d.healthcheck()</span><br></pre></td></tr></table></figure>
<h2 id="停用UiAutomator的守护程序"><a href="#停用UiAutomator的守护程序" class="headerlink" title="停用UiAutomator的守护程序?"></a>停用UiAutomator的守护程序?</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d.service(<span class="string">&#x27;uiautomator&#x27;</span>).stop()</span><br></pre></td></tr></table></figure>
<h2 id="打开调试开关"><a href="#打开调试开关" class="headerlink" title="打开调试开关"></a>打开调试开关</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d.debug = <span class="literal">True</span></span><br><span class="line">d.info</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">返回</span></span><br><span class="line"><span class="string">12:32:47.182 $ curl -X POST -d &#x27;&#123;&quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;id&quot;: &quot;b80d3a488580be1f3e9cb3e926175310&quot;, &quot;method&quot;: &quot;deviceInfo&quot;, &quot;params&quot;: &#123;&#125;&#125;&#x27; &#x27;http://127.0.0.1:54179/jsonrpc/0&#x27;</span></span><br><span class="line"><span class="string">12:32:47.225 Response &gt;&gt;&gt;</span></span><br><span class="line"><span class="string">&#123;&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;id&quot;:&quot;b80d3a488580be1f3e9cb3e926175310&quot;,&quot;result&quot;:&#123;&quot;currentPackageName&quot;:&quot;com.android.mms&quot;,&quot;displayHeight&quot;:1920,&quot;displayRotation&quot;:0,&quot;displaySizeDpX&quot;:360,&quot;displaySizeDpY&quot;:640,&quot;displayWidth&quot;:1080,&quot;productName&quot;</span></span><br><span class="line"><span class="string">:&quot;odin&quot;,&quot;screenOn&quot;:true,&quot;sdkInt&quot;:25,&quot;naturalOrientation&quot;:true&#125;&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="安装应用，只能从URL安装"><a href="#安装应用，只能从URL安装" class="headerlink" title="安装应用，只能从URL安装"></a>安装应用，只能从URL安装</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d.app_install(<span class="string">&#x27;http://some-domain.com/some.apk&#x27;</span>)<span class="comment">#引号内为下载apk地址</span></span><br></pre></td></tr></table></figure>
<h2 id="启动应用"><a href="#启动应用" class="headerlink" title="启动应用"></a>启动应用</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d.app_start(<span class="string">&#x27;com.ruguoapp.jike&#x27;</span>)<span class="comment">#引号内为包名称</span></span><br></pre></td></tr></table></figure>
<h2 id="停止应用"><a href="#停止应用" class="headerlink" title="停止应用"></a>停止应用</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#相当于&#x27;am force-stop&#x27;强制停止应用</span></span><br><span class="line">d.app_stop(<span class="string">&#x27;com.example.hello_world&#x27;</span>) </span><br><span class="line"><span class="comment">#相当于&#x27;pm clear&#x27; 清空App数据</span></span><br><span class="line">d.app_clear(<span class="string">&#x27;com.example.hello_world&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="停止所有正在运行的应用程序"><a href="#停止所有正在运行的应用程序" class="headerlink" title="停止所有正在运行的应用程序"></a>停止所有正在运行的应用程序</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 停止所有</span></span><br><span class="line">d.app_stop_all()</span><br><span class="line"><span class="comment"># 停止所有应用程序，除了com.examples.demo</span></span><br><span class="line">d.app_stop_all(excludes=[<span class="string">&#x27;com.examples.demo&#x27;</span>])</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="跳过弹窗，禁止弹窗"><a href="#跳过弹窗，禁止弹窗" class="headerlink" title="跳过弹窗，禁止弹窗"></a>跳过弹窗，禁止弹窗</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d.disable_popups（）<span class="comment">#自动跳过弹出窗口 </span></span><br><span class="line">d.disable_popups（假）<span class="comment">#禁用自动跳过弹出窗</span></span><br></pre></td></tr></table></figure>
<h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><p>Session表示应用程序的生命周期。可用于启动应用，检测应用崩溃</p>
<ul>
<li><p>启动和关闭应用程序</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sess = d.session(<span class="string">&quot;com.netease.cloudmusic&quot;</span>) <span class="comment"># start 网易云音乐</span></span><br><span class="line">sess.close() <span class="comment"># 停止网易云音乐</span></span><br></pre></td></tr></table></figure></li>
<li><p>使用python with启动和关闭应用程序</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> d.session(<span class="string">&quot;com.netease.cloudmusic&quot;</span>) <span class="keyword">as</span> sess:</span><br><span class="line">    sess(text=<span class="string">&quot;Play&quot;</span>).click()</span><br></pre></td></tr></table></figure></li>
<li><p>链接正在运行的应用</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sess = d.session（“ com.netease.cloudmusic ”，attach = <span class="literal">True</span>）</span><br></pre></td></tr></table></figure></li>
<li><p>检测应用崩溃</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># App正在运行时</span></span><br><span class="line">sess(text=<span class="string">&quot;Music&quot;</span>).click() <span class="comment"># 操作是正常的</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># App崩溃时</span></span><br><span class="line">sess(text=<span class="string">&quot;Music&quot;</span>).click() <span class="comment"># 引发会话中断错误SessionBrokenError</span></span><br><span class="line"><span class="comment"># session下的其他函数调用也会引发SessionBrokenError错误</span></span><br></pre></td></tr></table></figure>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 检查会话是否正确。</span></span><br><span class="line"><span class="comment"># 警告:函数名将来可能会更改</span></span><br><span class="line">sess.running() <span class="comment"># True or False</span></span><br></pre></td></tr></table></figure>
<h2 id="获取设备信息"><a href="#获取设备信息" class="headerlink" title="获取设备信息"></a>获取设备信息</h2></li>
<li><p>获取基本信息</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d.info</span><br></pre></td></tr></table></figure>
<p> 以下是可能的输出：</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123; </span><br><span class="line">    <span class="string">u&#x27;displayRotation&#x27;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">u&#x27;displaySizeDpY&#x27;</span>: <span class="number">640</span>,</span><br><span class="line">    <span class="string">u&#x27;displaySizeDpX&#x27;</span>: <span class="number">360</span>,</span><br><span class="line">    <span class="string">u&#x27;currentPackageName&#x27;</span>: <span class="string">u&#x27;com.android.launcher&#x27;</span>,</span><br><span class="line">    <span class="string">u&#x27;productName&#x27;</span>: <span class="string">u&#x27;takju&#x27;</span>,</span><br><span class="line">    <span class="string">u&#x27;displayWidth&#x27;</span>: <span class="number">720</span>,</span><br><span class="line">    <span class="string">u&#x27;sdkInt&#x27;</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="string">u&#x27;displayHeight&#x27;</span>: <span class="number">1184</span>,</span><br><span class="line">    <span class="string">u&#x27;naturalOrientation&#x27;</span>: <span class="literal">True</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>获取窗口大小</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d.window_size()</span><br><span class="line"><span class="comment"># 设备垂直输出示例: (1080, 1920)</span></span><br><span class="line"><span class="comment"># 设备水平输出示例: (1920, 1080)</span></span><br></pre></td></tr></table></figure></li>
<li><p>获取当前应用程序信息。对于某些android设备，输出可以为空(参见输出示例3)</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d.current_app()</span><br><span class="line"><span class="comment"># 输出示例 1: &#123;&#x27;package&#x27;: &#x27;com.netease.example&#x27;, &#x27;activity&#x27;: &#x27;.Client&#x27;, &#x27;pid&#x27;: 23710&#125;</span></span><br><span class="line"><span class="comment"># 输出示例 2: &#123;&#x27;package&#x27;: &#x27;com.ruguoapp.jike&#x27;, &#x27;activity&#x27;: &#x27;com.ruguoapp.jike.business.video.ui.activity.videolist.VideoListActivity&#x27;&#125;</span></span><br><span class="line"><span class="comment"># 输出示例 3: &#123;&#x27;package&#x27;: None, &#x27;activity&#x27;: None&#125;</span></span><br></pre></td></tr></table></figure></li>
<li><p>获取设备序列号</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d.serial</span><br><span class="line"><span class="comment"># 输出示例: 74aAEDR428Z9</span></span><br></pre></td></tr></table></figure></li>
<li><p>获取WIFI IP</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(d.wlan_ip)</span><br><span class="line"><span class="comment">#输出示例:10.0.0.1</span></span><br></pre></td></tr></table></figure></li>
<li><p>获取详细的设备信息</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(d.device_info)</span><br></pre></td></tr></table></figure>

<p> 下面是一个可能的输出:</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;udid&#x27;</span>: <span class="string">&#x27;3578298f-b4:0b:44:e6:1f:90-OD103&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;version&#x27;</span>: <span class="string">&#x27;7.1.1&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;serial&#x27;</span>: <span class="string">&#x27;3578298f&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;brand&#x27;</span>: <span class="string">&#x27;SMARTISAN&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;model&#x27;</span>: <span class="string">&#x27;OD103&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;hwaddr&#x27;</span>: <span class="string">&#x27;b4:0b:44:e6:1f:90&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;port&#x27;</span>: <span class="number">7912</span>,</span><br><span class="line"> <span class="string">&#x27;sdk&#x27;</span>: <span class="number">25</span>,</span><br><span class="line"> <span class="string">&#x27;agentVersion&#x27;</span>: <span class="string">&#x27;dev&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;display&#x27;</span>: &#123;<span class="string">&#x27;width&#x27;</span>: <span class="number">1080</span>, <span class="string">&#x27;height&#x27;</span>: <span class="number">1920</span>&#125;,</span><br><span class="line"> <span class="string">&#x27;battery&#x27;</span>: &#123;<span class="string">&#x27;acPowered&#x27;</span>: <span class="literal">False</span>,</span><br><span class="line">  <span class="string">&#x27;usbPowered&#x27;</span>: <span class="literal">False</span>,</span><br><span class="line">  <span class="string">&#x27;wirelessPowered&#x27;</span>: <span class="literal">False</span>,</span><br><span class="line">  <span class="string">&#x27;status&#x27;</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="string">&#x27;health&#x27;</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="string">&#x27;present&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">  <span class="string">&#x27;level&#x27;</span>: <span class="number">99</span>,</span><br><span class="line">  <span class="string">&#x27;scale&#x27;</span>: <span class="number">100</span>,</span><br><span class="line">  <span class="string">&#x27;voltage&#x27;</span>: <span class="number">4316</span>,</span><br><span class="line">  <span class="string">&#x27;temperature&#x27;</span>: <span class="number">272</span>,</span><br><span class="line">  <span class="string">&#x27;technology&#x27;</span>: <span class="string">&#x27;Li-ion&#x27;</span>&#125;,</span><br><span class="line"> <span class="string">&#x27;memory&#x27;</span>: &#123;<span class="string">&#x27;total&#x27;</span>: <span class="number">3690280</span>, <span class="string">&#x27;around&#x27;</span>: <span class="string">&#x27;4 GB&#x27;</span>&#125;,</span><br><span class="line"> <span class="string">&#x27;cpu&#x27;</span>: &#123;<span class="string">&#x27;cores&#x27;</span>: <span class="number">8</span>, <span class="string">&#x27;hardware&#x27;</span>: <span class="string">&#x27;Qualcomm Technologies, Inc MSM8953Pro&#x27;</span>&#125;,</span><br><span class="line"> <span class="string">&#x27;presenceChangedAt&#x27;</span>: <span class="string">&#x27;0001-01-01T00:00:00Z&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;usingBeganAt&#x27;</span>: <span class="string">&#x27;0001-01-01T00:00:00Z&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>
<h2 id="获取应用信息"><a href="#获取应用信息" class="headerlink" title="获取应用信息"></a>获取应用信息</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d.app_info(<span class="string">&quot;com.examples.demo&quot;</span>)</span><br><span class="line"><span class="comment"># 会输出</span></span><br><span class="line"><span class="comment">#&#123;</span></span><br><span class="line"><span class="comment">#    &quot;mainActivity&quot;: &quot;com.github.uiautomator.MainActivity&quot;,</span></span><br><span class="line"><span class="comment">#    &quot;label&quot;: &quot;ATX&quot;,</span></span><br><span class="line"><span class="comment">#    &quot;versionName&quot;: &quot;1.1.7&quot;,</span></span><br><span class="line"><span class="comment">#    &quot;versionCode&quot;: 1001007,</span></span><br><span class="line"><span class="comment">#    &quot;size&quot;:1760809</span></span><br><span class="line"><span class="comment">#&#125;</span></span><br><span class="line"><span class="comment"># 保存应用程序图标</span></span><br><span class="line">img = d.app_icon(<span class="string">&quot;com.examples.demo&quot;</span>)</span><br><span class="line">img.save(<span class="string">&quot;icon.png&quot;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="推拉文件"><a href="#推拉文件" class="headerlink" title="推拉文件"></a>推拉文件</h2><ul>
<li><p>将文件推送到设备</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># push文件夹</span></span><br><span class="line">d.push(<span class="string">&quot;foo.txt&quot;</span>, <span class="string">&quot;/sdcard/&quot;</span>)</span><br><span class="line"><span class="comment"># push和重命名</span></span><br><span class="line">d.push(<span class="string">&quot;foo.txt&quot;</span>, <span class="string">&quot;/sdcard/bar.txt&quot;</span>)</span><br><span class="line"><span class="comment"># push fileobj</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;foo.txt&quot;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    d.push(f, <span class="string">&quot;/sdcard/&quot;</span>)</span><br><span class="line"><span class="comment"># 推动和更改文件访问模式</span></span><br><span class="line">d.push(<span class="string">&quot;foo.sh&quot;</span>, <span class="string">&quot;/data/local/tmp/&quot;</span>, mode=<span class="number">0o755</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>从设备中拉出一个文件</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d.pull(<span class="string">&quot;/sdcard/tmp.txt&quot;</span>, <span class="string">&quot;tmp.txt&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果在设备上找不到文件，FileNotFoundError将引发</span></span><br><span class="line">d.pull(<span class="string">&quot;/sdcard/some-file-not-exists.txt&quot;</span>, <span class="string">&quot;tmp.txt&quot;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="关键事件"><a href="#关键事件" class="headerlink" title="关键事件"></a>关键事件</h2><ul>
<li>打开/关闭屏幕 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d.screen_on（）＃打开屏幕 </span><br><span class="line">d.screen_off（）＃关闭屏幕</span><br></pre></td></tr></table></figure></li>
<li>获取当前屏幕状态 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d.info.get（<span class="string">&#x27; screenOn &#x27;</span>）<span class="comment">#需要 Android&gt; = 4.4</span></span><br></pre></td></tr></table></figure></li>
<li>硬键盘和软键盘操作 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d.press(<span class="string">&quot;home&quot;</span>) <span class="comment"># 点击home键</span></span><br><span class="line">d.press(<span class="string">&quot;back&quot;</span>) <span class="comment"># 点击back键</span></span><br><span class="line">d.press(<span class="string">&quot;left&quot;</span>) <span class="comment"># 点击左键</span></span><br><span class="line">d.press(<span class="string">&quot;right&quot;</span>) <span class="comment"># 点击右键</span></span><br><span class="line">d.press(<span class="string">&quot;up&quot;</span>) <span class="comment"># 点击上键</span></span><br><span class="line">d.press(<span class="string">&quot;down&quot;</span>) <span class="comment"># 点击下键</span></span><br><span class="line">d.press(<span class="string">&quot;center&quot;</span>) <span class="comment"># 点击选中</span></span><br><span class="line">d.press(<span class="string">&quot;menu&quot;</span>) <span class="comment"># 点击menu按键</span></span><br><span class="line">d.press(<span class="string">&quot;search&quot;</span>) <span class="comment"># 点击搜索按键</span></span><br><span class="line">d.press(<span class="string">&quot;enter&quot;</span>) <span class="comment"># 点击enter键</span></span><br><span class="line">d.press(<span class="string">&quot;delete&quot;</span>) <span class="comment"># 点击删除按键</span></span><br><span class="line">d.press(<span class="string">&quot;recent&quot;</span>) <span class="comment"># 点击近期活动按键</span></span><br><span class="line">d.press(<span class="string">&quot;volume_up&quot;</span>) <span class="comment"># 音量+</span></span><br><span class="line">d.press(<span class="string">&quot;volume_down&quot;</span>) <span class="comment"># 音量-</span></span><br><span class="line">d.press(<span class="string">&quot;volume_mute&quot;</span>) <span class="comment"># 静音</span></span><br><span class="line">d.press(<span class="string">&quot;camera&quot;</span>) <span class="comment"># 相机</span></span><br><span class="line">d.press(<span class="string">&quot;power&quot;</span>) <span class="comment">#电源键</span></span><br></pre></td></tr></table></figure>
 你可以在 <a href="https://developer.android.com/reference/android/view/KeyEvent.html">Android KeyEvnet</a>上找到所有的关键代码定义</li>
<li>解锁屏幕 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d.unlock()</span><br><span class="line"><span class="comment"># 相当于</span></span><br><span class="line"><span class="comment"># 1. 发射活动:com.github.uiautomator.ACTION_IDENTIFY</span></span><br><span class="line"><span class="comment"># 2. 按home键</span></span><br></pre></td></tr></table></figure>
<h2 id="手势与设备的交互"><a href="#手势与设备的交互" class="headerlink" title="手势与设备的交互"></a>手势与设备的交互</h2></li>
<li>单击屏幕 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d.click（x，y）</span><br></pre></td></tr></table></figure></li>
<li>双击屏幕 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d.double_click（x，y）</span><br><span class="line">d.double_click（X，Y，<span class="number">0.1</span>）＃默认两个单击之间间隔时间为<span class="number">0.1</span>秒</span><br></pre></td></tr></table></figure></li>
<li>长按 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d.long_click（x，y）</span><br><span class="line">d.long_click（X，Y，<span class="number">0.5</span>）<span class="comment">#长按0.5秒（默认）</span></span><br></pre></td></tr></table></figure></li>
<li>滑动 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d.swipe(sx, sy, ex, ey)</span><br><span class="line">d.swipe(sx, sy, ex, ey, <span class="number">0.5</span>) <span class="comment">#滑动0.5s(default)</span></span><br></pre></td></tr></table></figure></li>
<li>拖动 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d.drag(sx, sy, ex, ey)</span><br><span class="line">d.drag(sx, sy, ex, ey, <span class="number">0.5</span>)<span class="comment">#拖动0.5s(default)</span></span><br></pre></td></tr></table></figure></li>
<li>滑动点 多用于九宫格解锁，提前获取到每个点的相对坐标（这里支持百分比），<br> 更详细的使用参考这个帖子 <a href="https://testerhome.com/topics/11034">使用u2实现九宫图案解锁</a> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#从点(x0, y0)滑到点(x1, y1)再滑到点(x2, y2)</span></span><br><span class="line"><span class="comment">#两点之间的滑动速度是0.2秒</span></span><br><span class="line">d.swipe((x0, y0), (x1, y1), (x2, y2), <span class="number">0.2</span>)</span><br></pre></td></tr></table></figure>
 注意：单击，滑动，拖动操作支持百分比位置值。例： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d.long_click(<span class="number">0.5</span>, <span class="number">0.5</span>) 表示长按屏幕中心</span><br></pre></td></tr></table></figure>
<h2 id="屏幕相关的"><a href="#屏幕相关的" class="headerlink" title="屏幕相关的"></a>屏幕相关的</h2></li>
<li>检索方向 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d.orientation</span><br><span class="line"><span class="comment"># 检索方向。输出可以是 &quot;natural&quot; or &quot;left&quot; or &quot;right&quot; or &quot;upsidedown&quot;</span></span><br></pre></td></tr></table></figure></li>
<li>设置方向 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d.set_orientation(<span class="string">&#x27;l&#x27;</span>) <span class="comment"># or &quot;left&quot;</span></span><br><span class="line">d.set_orientation(<span class="string">&quot;l&quot;</span>) <span class="comment"># or &quot;left&quot;</span></span><br><span class="line">d.set_orientation(<span class="string">&quot;r&quot;</span>) <span class="comment"># or &quot;right&quot;</span></span><br><span class="line">d.set_orientation(<span class="string">&quot;n&quot;</span>) <span class="comment"># or &quot;natural&quot;</span></span><br></pre></td></tr></table></figure></li>
<li>冻结/ 开启旋转 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d.freeze_rotation()<span class="comment"># 冻结旋转</span></span><br><span class="line">d.freeze_rotation(<span class="literal">False</span>)<span class="comment"># 开启旋转</span></span><br></pre></td></tr></table></figure></li>
<li>截图 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 截图并保存到电脑上的一个文件中，需要Android&gt;=4.2。</span></span><br><span class="line">d.screenshot(<span class="string">&quot;home.jpg&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 得到PIL.Image格式的图像. 但你必须先安装pillow</span></span><br><span class="line">image = d.screenshot() <span class="comment"># default format=&quot;pillow&quot;</span></span><br><span class="line">image.save(<span class="string">&quot;home.jpg&quot;</span>) <span class="comment"># 或&#x27;home.png&#x27;，目前只支持png 和 jpg格式的图像</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 得到OpenCV的格式图像。当然，你需要numpy和cv2安装第一个</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line">image = d.screenshot(<span class="built_in">format</span>=<span class="string">&#x27;opencv&#x27;</span>)</span><br><span class="line">cv2.imwrite(<span class="string">&#x27;home.jpg&#x27;</span>, image)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 获取原始JPEG数据</span></span><br><span class="line">imagebin = d.screenshot(<span class="built_in">format</span>=<span class="string">&#x27;raw&#x27;</span>)</span><br><span class="line"><span class="built_in">open</span>(<span class="string">&quot;some.jpg&quot;</span>, <span class="string">&quot;wb&quot;</span>).write(imagebin)</span><br></pre></td></tr></table></figure></li>
<li>转储UI层次结构 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># get the UI hierarchy dump content (unicoded).（获取UI层次结构转储内容）</span></span><br><span class="line">d.dump_hierarchy()</span><br></pre></td></tr></table></figure></li>
<li>打开通知或快速设置 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d.open_notification（）<span class="comment">#下拉打开通知栏</span></span><br><span class="line">d.open_quick_settings（）<span class="comment">#下拉打开快速设置栏</span></span><br></pre></td></tr></table></figure>
<h2 id="选择Ui对象"><a href="#选择Ui对象" class="headerlink" title="选择Ui对象"></a>选择Ui对象</h2>选择器是一种方便的机制，用于在当前窗口中标识特定的UI对象。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#选择带有文本&#x27;Clock&#x27;的对象，它的类名是&#x27;android.widget.TextView&#x27;</span></span><br><span class="line">d(text=<span class="string">&#x27;Clock&#x27;</span>, className=<span class="string">&#x27;android.widget.TextView&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
<p>选择器支持以下参数。有关详细信息，请参阅 <a href="http://developer.android.com/tools/help/uiautomator/UiSelector.html">UiSelector Java doc</a> for detailed information.</p>
<ul>
<li> <code>text</code>, <code>textContains</code>, <code>textMatches</code>, <code>textStartsWith</code></li>
<li> <code>className</code>, <code>classNameMatches</code></li>
<li> <code>description</code>, <code>descriptionContains</code>, <code>descriptionMatches</code>, <code>descriptionStartsWith</code></li>
<li> <code>checkable</code>, <code>checked</code>, <code>clickable</code>, <code>longClickable</code></li>
<li> <code>scrollable</code>, <code>enabled</code>,<code>focusable</code>, <code>focused</code>, <code>selected</code></li>
<li> <code>packageName</code>, <code>packageNameMatches</code></li>
<li> <code>resourceId</code>, <code>resourceIdMatches</code></li>
<li> <code>index</code>, <code>instance</code></li>
</ul>
<p>##获取所选ui对象状态及其信息</p>
<ul>
<li>检查特定的UI对象是否存在 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d(text=<span class="string">&quot;Settings&quot;</span>).exists <span class="comment"># 返回布尔值，如果存在则为True，否则为False</span></span><br><span class="line">d.exists(text=<span class="string">&quot;Settings&quot;</span>) <span class="comment"># 另一种写法</span></span><br><span class="line"><span class="comment">#高级用法</span></span><br><span class="line">d(text=<span class="string">&quot;Settings&quot;</span>).exists(timeout=<span class="number">3</span>) <span class="comment"># 等待&#x27;Settings&#x27;在3秒钟出现</span></span><br></pre></td></tr></table></figure></li>
<li>获取特定UI对象的信息 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d(text=<span class="string">&quot;Settings&quot;</span>).info</span><br></pre></td></tr></table></figure>
 下面是一个可能的输出 <figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	  <span class="string">&#x27;bounds&#x27;</span>: &#123;</span><br><span class="line">		    <span class="string">&#x27;bottom&#x27;</span>: <span class="number">2744</span>,</span><br><span class="line">		    <span class="string">&#x27;left&#x27;</span>: <span class="number">386</span>,</span><br><span class="line">		    <span class="string">&#x27;right&#x27;</span>: <span class="number">478</span>,</span><br><span class="line">		    <span class="string">&#x27;top&#x27;</span>: <span class="number">2679</span>&#125;,</span><br><span class="line">	  <span class="string">&#x27;childCount&#x27;</span>: <span class="number">0</span>,</span><br><span class="line">	  <span class="string">&#x27;className&#x27;</span>: <span class="string">&#x27;android.widget.TextView&#x27;</span>,</span><br><span class="line">	  <span class="string">&#x27;contentDescription&#x27;</span>: <span class="literal">None</span>,</span><br><span class="line">	  <span class="string">&#x27;packageName&#x27;</span>: <span class="string">&#x27;com.ruguoapp.jike&#x27;</span>,</span><br><span class="line">	  <span class="string">&#x27;resourceName&#x27;</span>: <span class="string">&#x27;com.ruguoapp.jike:id/tv_main_tab_title&#x27;</span>,</span><br><span class="line">	  <span class="string">&#x27;text&#x27;</span>: <span class="string">&#x27;动态&#x27;</span>,</span><br><span class="line">	  <span class="string">&#x27;visibleBounds&#x27;</span>: &#123;</span><br><span class="line">		    <span class="string">&#x27;bottom&#x27;</span>: <span class="number">2744</span>,</span><br><span class="line">		    <span class="string">&#x27;left&#x27;</span>: <span class="number">386</span>,</span><br><span class="line">		    <span class="string">&#x27;right&#x27;</span>: <span class="number">478</span>,</span><br><span class="line">		    <span class="string">&#x27;top&#x27;</span>: <span class="number">2679</span>&#125;,</span><br><span class="line">	  <span class="string">&#x27;checkable&#x27;</span>: <span class="literal">False</span>,</span><br><span class="line">	  <span class="string">&#x27;checked&#x27;</span>: <span class="literal">False</span>,</span><br><span class="line">	  <span class="string">&#x27;clickable&#x27;</span>: <span class="literal">False</span>,</span><br><span class="line">	  <span class="string">&#x27;enabled&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">	  <span class="string">&#x27;focusable&#x27;</span>: <span class="literal">False</span>,</span><br><span class="line">	  <span class="string">&#x27;focused&#x27;</span>: <span class="literal">False</span>,</span><br><span class="line">	  <span class="string">&#x27;longClickable&#x27;</span>: <span class="literal">False</span>,</span><br><span class="line">	  <span class="string">&#x27;scrollable&#x27;</span>: <span class="literal">False</span>,</span><br><span class="line">	  <span class="string">&#x27;selected&#x27;</span>: <span class="literal">False</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>获取/设置/清除可编辑字段的文本(例如EditText小部件) <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d(text=<span class="string">&quot;Settings&quot;</span>).get_text()  <span class="comment">#得到文本小部件</span></span><br><span class="line">d(text=<span class="string">&quot;Settings&quot;</span>).set_text(<span class="string">&quot;My text...&quot;</span>)  <span class="comment">#设置文本</span></span><br><span class="line">d(text=<span class="string">&quot;Settings&quot;</span>).clear_text()  <span class="comment">#清除文本</span></span><br></pre></td></tr></table></figure></li>
<li>获取Widget中心点 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d(text=<span class="string">&quot;Settings&quot;</span>).center()</span><br><span class="line"><span class="comment">#d(text=&quot;Settings&quot;).center(offset=(0, 0)) # 基准位置左前</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="对选定UI对象的操作"><a href="#对选定UI对象的操作" class="headerlink" title="对选定UI对象的操作"></a>对选定UI对象的操作</h2><ul>
<li><p>UI对象有五种定位方式<br> text、resourceId、description、className、xpath、坐标</p>
</li>
<li><p>执行单击UI对象</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#text定位单击</span></span><br><span class="line">d(text=<span class="string">&quot;Settings&quot;</span>).click()</span><br><span class="line">d(text=<span class="string">&quot;Settings&quot;</span>, className=<span class="string">&quot;android.widget.TextView&quot;</span>).click()</span><br><span class="line"><span class="comment">#resourceId定位单击</span></span><br><span class="line">d(resourceId=<span class="string">&quot;com.ruguoapp.jike:id/tv_title&quot;</span>, className=<span class="string">&quot;android.widget.TextView&quot;</span>).click() </span><br><span class="line"><span class="comment">#description定位单击</span></span><br><span class="line">d(description=<span class="string">&quot;设置&quot;</span>).click()</span><br><span class="line">d(description=<span class="string">&quot;设置&quot;</span>, className=<span class="string">&quot;android.widget.TextView&quot;</span>).click()</span><br><span class="line"><span class="comment">#className定位单击</span></span><br><span class="line">d(className=<span class="string">&quot;android.widget.TextView&quot;</span>).click()</span><br><span class="line"><span class="comment">#xpath定位单击</span></span><br><span class="line">d.xpath(<span class="string">&quot;//android.widget.FrameLayout[@index=&#x27;0&#x27;]/android.widget.LinearLayout[@index=&#x27;0&#x27;]&quot;</span>).click()</span><br><span class="line"><span class="comment">#坐标单击</span></span><br><span class="line">d.click(<span class="number">182</span>, <span class="number">1264</span>)</span><br></pre></td></tr></table></figure>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 等待元素出现(最多10秒），出现后单击 </span></span><br><span class="line">d(text=<span class="string">&quot;Settings&quot;</span>).click(timeout=<span class="number">10</span>)</span><br><span class="line"><span class="comment"># 在10秒时点击，默认的超时0</span></span><br><span class="line">d(text=<span class="string">&#x27;Skip&#x27;</span>).click_exists(timeout=<span class="number">10.0</span>)</span><br><span class="line"><span class="comment"># 单击直到元素消失，返回布尔</span></span><br><span class="line">d(text=<span class="string">&quot;Skip&quot;</span>).click_gone(maxretry=<span class="number">10</span>, interval=<span class="number">1.0</span>) <span class="comment"># maxretry默认值10,interval默认值1.0</span></span><br><span class="line"><span class="comment"># 点击基准位置偏移</span></span><br><span class="line">d(text=<span class="string">&quot;Settings&quot;</span>).click(offset=(<span class="number">0.5</span>, <span class="number">0.5</span>)) <span class="comment"># 点击中心位置，同d(text=&quot;Settings&quot;).click()</span></span><br><span class="line">d(text=<span class="string">&quot;Settings&quot;</span>).click(offset=(<span class="number">0</span>, <span class="number">0</span>)) <span class="comment"># 点击左前位置</span></span><br><span class="line">d(text=<span class="string">&quot;Settings&quot;</span>).click(offset=(<span class="number">1</span>, <span class="number">1</span>)) <span class="comment"># 点击右下</span></span><br></pre></td></tr></table></figure></li>
<li><p>执行双击UI对象</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d(text=<span class="string">&quot;设置&quot;</span>).double_click() <span class="comment">#双击特定ui对象的中心</span></span><br><span class="line">d.double_click(x, y, <span class="number">0.1</span>)<span class="comment">#两次单击之间的默认持续时间为0.1秒</span></span><br></pre></td></tr></table></figure></li>
<li><p>执行长按UI对象</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 长按特定UI对象的中心</span></span><br><span class="line">d(text=<span class="string">&quot;Settings&quot;</span>).long_click()</span><br><span class="line">d.long_click(x, y, <span class="number">0.5</span>) <span class="comment"># 长按坐标位置0.5s默认</span></span><br></pre></td></tr></table></figure>
<p>##特定UI对象的手势操作</p>
</li>
<li><p>将UI对象拖向另一个点或另一个UI对象</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Android&lt;4.3不能使用drag.</span></span><br><span class="line"><span class="comment"># 在0.5秒内将UI对象拖到屏幕点(x, y)</span></span><br><span class="line">d(text=<span class="string">&quot;Settings&quot;</span>).drag_to(x, y, duration=<span class="number">0.5</span>)</span><br><span class="line"><span class="comment"># 将UI对象拖到另一个UI对象的中心位置，时间为0.25秒</span></span><br><span class="line">d(text=<span class="string">&quot;Settings&quot;</span>).drag_to(text=<span class="string">&quot;Clock&quot;</span>, duration=<span class="number">0.25</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>==未懂==从UI对象的中心向其边缘滑动<br>  滑动支持4个方向:左、右、上、下</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">   d(text=<span class="string">&quot;Settings&quot;</span>).swipe(<span class="string">&quot;right&quot;</span>)</span><br><span class="line">   d(text=<span class="string">&quot;Settings&quot;</span>).swipe(<span class="string">&quot;left&quot;</span>, steps=<span class="number">10</span>)</span><br><span class="line">   d(text=<span class="string">&quot;Settings&quot;</span>).swipe(<span class="string">&quot;up&quot;</span>, steps=<span class="number">20</span>) <span class="comment"># 1步约为5ms, 20步约为0.1s</span></span><br><span class="line">   d(text=<span class="string">&quot;Settings&quot;</span>).swipe(<span class="string">&quot;down&quot;</span>, steps=<span class="number">20</span>)</span><br><span class="line">   ```	 </span><br><span class="line">- ==未懂==两点手势操作，从一个点到另一个点</span><br><span class="line">```python</span><br><span class="line">d(text=<span class="string">&quot;Settings&quot;</span>).gesture((sx1, sy1), (sx2, sy2), (ex1, ey1), (ex2, ey2))</span><br></pre></td></tr></table></figure></li>
<li><p>特定UI对象的手势操作<br> 支持两种手势：从边缘到中心、从中心到边缘</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#注意:缩放要到安卓4.3才能设置。</span></span><br><span class="line"><span class="comment">#从边缘到中心</span></span><br><span class="line">d(text=<span class="string">&quot;Settings&quot;</span>).pinch_in(percent=<span class="number">100</span>, steps=<span class="number">10</span>)</span><br><span class="line"><span class="comment"># 从中心到边缘</span></span><br><span class="line">d(text=<span class="string">&quot;Settings&quot;</span>).pinch_out()</span><br></pre></td></tr></table></figure></li>
<li><p>等待，直到特定的UI出现或消失</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 等待ui对象出现</span></span><br><span class="line">d(text=<span class="string">&quot;Settings&quot;</span>).wait(timeout=<span class="number">3.0</span>) <span class="comment"># 返回布尔值</span></span><br><span class="line"><span class="comment"># 等待ui对象的消失</span></span><br><span class="line">d(text=<span class="string">&quot;Settings&quot;</span>).wait_gone(timeout=<span class="number">1.0</span>)</span><br></pre></td></tr></table></figure>
<p> 默认超时为20秒。有关详细信息，请参阅全局设置</p>
</li>
<li><p>==未懂==对特定的ui对象执行投掷(可滚动)<br> 可能的属性</p>
<ol>
<li><code>horiz</code>（水平） 或 <code>vert</code>（垂直）</li>
<li><code>forward</code>（向前）或<code>backward</code>（向后）或<code>toBeginning</code>（开始位置）或<code>toEnd</code>（结束位置）<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#向前投掷(默认)垂直(默认)</span></span><br><span class="line">d(scrollable=<span class="literal">True</span>).fling()</span><br><span class="line"><span class="comment">#垂直向后滚动</span></span><br><span class="line">d(scrollable=<span class="literal">True</span>).fling.vert.forward()</span><br><span class="line"><span class="comment">#没搞懂</span></span><br><span class="line">d(scrollable=<span class="literal">True</span>).fling.vert.backward()</span><br><span class="line"><span class="comment">#没搞懂</span></span><br><span class="line">d(scrollable=<span class="literal">True</span>).fling.horiz.toBeginning(max_swipes=<span class="number">1000</span>)</span><br><span class="line"><span class="comment">#滚动到结束</span></span><br><span class="line">d(scrollable=<span class="literal">True</span>).fling.toEnd()</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>==未懂==在特定的ui对象上执行滚动(可滚动)<br> 可能的属性</p>
<ol>
<li><code>horiz</code>（水平） 或 <code>vert</code>（垂直）</li>
<li><code>forward</code>（向前）或<code>backward</code>（向后）或<code>toBeginning</code>（开始位置）或<code>toEnd</code>（结束位置）或 <code>to</code> 来<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 向前滚动(默认)垂直(默认)</span></span><br><span class="line">d(scrollable=<span class="literal">True</span>).scroll(steps=<span class="number">10</span>)</span><br><span class="line"><span class="comment"># 水平向前滚动</span></span><br><span class="line">d(scrollable=<span class="literal">True</span>).scroll.horiz.forward(steps=<span class="number">100</span>)</span><br><span class="line"><span class="comment">#垂直向后滚动</span></span><br><span class="line">d(scrollable=<span class="literal">True</span>).scroll.vert.backward()</span><br><span class="line"><span class="comment">#滚动到开始水平</span></span><br><span class="line">d(scrollable=<span class="literal">True</span>).scroll.horiz.toBeginning(steps=<span class="number">100</span>, max_swipes=<span class="number">1000</span>)</span><br><span class="line"><span class="comment"># 滚动到垂直结束</span></span><br><span class="line">d(scrollable=<span class="literal">True</span>).scroll.toEnd()</span><br><span class="line"><span class="comment">#垂直向前滚动，直到出现特定的ui对象</span></span><br><span class="line">d(scrollable=<span class="literal">True</span>).scroll.to(text=<span class="string">&quot;Security&quot;</span>)</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<h2 id="Watcher（-未懂-）"><a href="#Watcher（-未懂-）" class="headerlink" title="Watcher（==未懂==）"></a>Watcher（==未懂==）</h2><p>当选择器没有找到匹配项时，可以注册<a href="http://developer.android.com/tools/help/uiautomator/UiWatcher.html">watchers</a> 来执行一些操作。</p>
<ul>
<li><p>注册 Watcher</p>
<p> 当选择器找不到匹配项时，uiautomator2将运行所有注册的watchers.<br>  当条件匹配时单击目标</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d.watcher(<span class="string">&quot;AUTO_FC_WHEN_ANR&quot;</span>).when(text=<span class="string">&quot;ANR&quot;</span>).when(text=<span class="string">&quot;Wait&quot;</span>) \</span><br><span class="line">                             .click(text=<span class="string">&quot;Force Close&quot;</span>)</span><br><span class="line"><span class="comment"># d.watcher(name) ## 创建一个新的名为watcher的程序。</span></span><br><span class="line"><span class="comment">#  .when(condition)  ## 监视程序的用户选择条件。</span></span><br><span class="line"><span class="comment">#  .click(target)  ## 对目标UiSelector执行单击操作</span></span><br></pre></td></tr></table></figure></li>
<li><p>还有一个关于点击的技巧。您可以不带参数地使用click。</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d.watcher(<span class="string">&quot;ALERT&quot;</span>).when(text=<span class="string">&quot;OK&quot;</span>).click()</span><br><span class="line"><span class="comment"># 一样</span></span><br><span class="line">d.watcher(<span class="string">&quot;ALERT&quot;</span>).when(text=<span class="string">&quot;OK&quot;</span>).click(text=<span class="string">&quot;OK&quot;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
<ul>
<li><p>当条件为真时按下键</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d.watcher(<span class="string">&quot;AUTO_FC_WHEN_ANR&quot;</span>).when(text=<span class="string">&quot;ANR&quot;</span>).when(text=<span class="string">&quot;Wait&quot;</span>) \</span><br><span class="line">                             .press(<span class="string">&quot;back&quot;</span>, <span class="string">&quot;home&quot;</span>)</span><br><span class="line"><span class="comment"># d.watcher(name) ## 创建一个新的名为watcher的程序</span></span><br><span class="line"><span class="comment">#  .when(condition)  ## 监视程序的用户选择条件</span></span><br><span class="line"><span class="comment">#  .press(&lt;keyname&gt;, ..., &lt;keyname&gt;.()  ## 按顺序按下一个键</span></span><br></pre></td></tr></table></figure></li>
<li><p>检查指定的监视程序是否触发<br> 一个监视程序被触发，这意味着运行了监视程序并匹配了它的所有条件。</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d.watcher(<span class="string">&quot;watcher_name&quot;</span>).triggered</span><br><span class="line"><span class="comment"># 如果指定的监视程序被触发，则为true，否则为false</span></span><br></pre></td></tr></table></figure></li>
<li><p>删除指定的监视程序</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除观察者</span></span><br><span class="line">d.watcher(<span class="string">&quot;watcher_name&quot;</span>).remove()</span><br></pre></td></tr></table></figure></li>
<li><p>列出所有观察者</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d.watchers</span><br><span class="line"><span class="comment">#列出所有注册观察员的名单</span></span><br></pre></td></tr></table></figure></li>
<li><p>检查任何触发的监视程序</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d.watchers.triggered</span><br><span class="line"><span class="comment">#  在任何监视程序触发时为真</span></span><br></pre></td></tr></table></figure></li>
<li><p>重置所有触发观察者</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重置所有触发的观察者，然后是d.观察者。触发将为false。</span></span><br><span class="line">d.watchers.reset()</span><br></pre></td></tr></table></figure></li>
<li><p>删除观察者</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除所有注册观察者</span></span><br><span class="line">d.watchers.remove()</span><br><span class="line"><span class="comment"># 删除指定的监视程序，与d.watcher(“watcher_name”)相同。</span></span><br><span class="line">d.watchers.remove(<span class="string">&quot;watcher_name&quot;</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>强制运行所有的观察者</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 强制运行所有注册的观察者</span></span><br><span class="line">d.watchers.run()</span><br></pre></td></tr></table></figure></li>
</ul>
<ul>
<li>当页面更新时运行所有观察者。<br> 通常可以用来自动点击权限确认框，或者自动安装 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d.watcher(<span class="string">&quot;OK&quot;</span>).when(text=<span class="string">&quot;OK&quot;</span>).click(text=<span class="string">&quot;OK&quot;</span>)</span><br><span class="line"><span class="comment"># 启用自动触发监视程序</span></span><br><span class="line">d.watchers.watched = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 禁用自动触发监视程序</span></span><br><span class="line">d.watchers.watched = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前触发器监视者状态</span></span><br><span class="line"><span class="keyword">assert</span> d.watchers.watched == <span class="literal">False</span></span><br></pre></td></tr></table></figure>
另外文档还是有很多没有写，推荐直接去看源码<a href="uiautomator2/__init__.py"><strong>init</strong>.py</a></li>
</ul>
<h2 id="全局设置"><a href="#全局设置" class="headerlink" title="全局设置"></a>全局设置</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置每次UI点击后1.5秒的延迟</span></span><br><span class="line">d.click_post_delay = <span class="number">1.5</span> <span class="comment"># 默认没有延迟</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置默认元素等待超时(秒)</span></span><br><span class="line">d.wait_timeout = <span class="number">30.0</span> <span class="comment"># 默认的20.0</span></span><br></pre></td></tr></table></figure>

<p>UiAutomator中的超时设置(隐藏方法)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt; d.jsonrpc.getConfigurator() </span><br><span class="line">&#123;<span class="string">&#x27;actionAcknowledgmentTimeout&#x27;</span>: <span class="number">500</span>,</span><br><span class="line"> <span class="string">&#x27;keyInjectionDelay&#x27;</span>: <span class="number">0</span>,</span><br><span class="line"> <span class="string">&#x27;scrollAcknowledgmentTimeout&#x27;</span>: <span class="number">200</span>,</span><br><span class="line"> <span class="string">&#x27;waitForIdleTimeout&#x27;</span>: <span class="number">0</span>,</span><br><span class="line"> <span class="string">&#x27;waitForSelectorTimeout&#x27;</span>: <span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt; d.jsonrpc.setConfigurator(&#123;<span class="string">&quot;waitForIdleTimeout&quot;</span>: <span class="number">100</span>&#125;)</span><br><span class="line">&#123;<span class="string">&#x27;actionAcknowledgmentTimeout&#x27;</span>: <span class="number">500</span>,</span><br><span class="line"> <span class="string">&#x27;keyInjectionDelay&#x27;</span>: <span class="number">0</span>,</span><br><span class="line"> <span class="string">&#x27;scrollAcknowledgmentTimeout&#x27;</span>: <span class="number">200</span>,</span><br><span class="line"> <span class="string">&#x27;waitForIdleTimeout&#x27;</span>: <span class="number">100</span>,</span><br><span class="line"> <span class="string">&#x27;waitForSelectorTimeout&#x27;</span>: <span class="number">0</span>&#125;</span><br></pre></td></tr></table></figure>

<p>为了防止客户端程序响应超时，<code>waitForIdleTimeout</code>和<code>waitForSelectorTimeout</code>目前已改为<code>0</code></p>
<p>Refs: <a href="https://developer.android.com/reference/android/support/test/uiautomator/Configurator">Google uiautomator Configurator</a></p>
<h2 id="Input-method"><a href="#Input-method" class="headerlink" title="Input method"></a>Input method</h2><p>这种方法通常用于不知道控件的情况下的输入。第一步需要切换输入法，然后发送adb广播命令，具体使用方法如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d.set_fastinput_ime(<span class="literal">True</span>) <span class="comment"># 切换成FastInputIME输入法</span></span><br><span class="line">d.send_keys(<span class="string">&quot;你好123abcEFG&quot;</span>) <span class="comment"># adb广播输入</span></span><br><span class="line">d.clear_text() <span class="comment"># 清除输入框所有内容(Require android-uiautomator.apk version &gt;= 1.0.7)</span></span><br><span class="line">d.set_fastinput_ime(<span class="literal">False</span>) <span class="comment"># 切换成正常的输入法</span></span><br><span class="line">d.send_action(<span class="string">&quot;search&quot;</span>) <span class="comment"># 模拟输入法的搜索</span></span><br></pre></td></tr></table></figure>

<p><strong>send_action</strong> 说明</p>
<p>该函数可以使用的参数有 <code>go search send next done previous</code></p>
<p><em>什么时候该使用这个函数呢？</em></p>
<p>有些时候在EditText中输入完内容之后，调用<code>press(&quot;search&quot;)</code> or <code>press(&quot;enter&quot;)</code>发现并没有什么反应。<br>这个时候就需要<code>send_action</code>函数了，这里用到了只有输入法才能用的<a href="https://developer.android.com/reference/android/view/inputmethod/EditorInfo">IME_ACTION_CODE</a>。<br><code>send_action</code>先broadcast命令发送给输入法操作<code>IME_ACTION_CODE</code>，由输入法完成后续跟EditText的通信。（原理我不太清楚，有了解的，提issue告诉我)</p>
<h2 id="Toast"><a href="#Toast" class="headerlink" title="Toast"></a>Toast</h2><ul>
<li><p>展示Toast</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d.toast.show(<span class="string">&quot;Hello world&quot;</span>)</span><br><span class="line">d.toast.show(<span class="string">&quot;Hello world&quot;</span>, <span class="number">1.0</span>) <span class="comment"># 显示为1.0，默认为1.0</span></span><br></pre></td></tr></table></figure></li>
<li><p>获取 Toast</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># [参数]</span></span><br><span class="line"><span class="comment"># 5.0: 最大等待超时。默认的10.0</span></span><br><span class="line"><span class="comment"># 缓存时间10.0s。如果最近10s已经出现toast，则返回缓存toast。默认10.0(将来可能会有变化)</span></span><br><span class="line"><span class="comment"># 如果最终没有toast，返回&quot;default message&quot;。默认没有</span></span><br><span class="line">d.toast.get_message(<span class="number">5.0</span>, <span class="number">10.0</span>, <span class="string">&quot;default message&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 常见的使用</span></span><br><span class="line"><span class="keyword">assert</span> <span class="string">&quot;Short message&quot;</span> <span class="keyword">in</span> d.toast.get_message(<span class="number">5.0</span>, default=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#清楚缓存toast</span></span><br><span class="line">d.toast.reset()</span><br><span class="line"><span class="comment"># Now d.toast.get_message(0) is None</span></span><br></pre></td></tr></table></figure>
<h2 id="XPath"><a href="#XPath" class="headerlink" title="XPath"></a>XPath</h2></li>
<li><p>例如: 其中一个节点的内容</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;android.widget.TextView</span><br><span class="line">  index=<span class="string">&quot;2&quot;</span></span><br><span class="line">  text=<span class="string">&quot;05:19&quot;</span></span><br><span class="line">  resource-<span class="built_in">id</span>=<span class="string">&quot;com.netease.cloudmusic:id/qf&quot;</span></span><br><span class="line">  package=<span class="string">&quot;com.netease.cloudmusic&quot;</span></span><br><span class="line">  content-desc=<span class="string">&quot;&quot;</span></span><br><span class="line">  checkable=<span class="string">&quot;false&quot;</span> checked=<span class="string">&quot;false&quot;</span> clickable=<span class="string">&quot;false&quot;</span> enabled=<span class="string">&quot;true&quot;</span> focusable=<span class="string">&quot;false&quot;</span> focused=<span class="string">&quot;false&quot;</span></span><br><span class="line">  scrollable=<span class="string">&quot;false&quot;</span> long-clickable=<span class="string">&quot;false&quot;</span> password=<span class="string">&quot;false&quot;</span> selected=<span class="string">&quot;false&quot;</span> visible-to-user=<span class="string">&quot;true&quot;</span></span><br><span class="line">  bounds=<span class="string">&quot;[957,1602][1020,1636]&quot;</span> /&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>xpath定位和使用方法<br> 有些属性的名字有修改需要注意</p>
 <figure class="highlight"><table><tr><td class="code"><pre><span class="line">description -&gt; content-desc</span><br><span class="line">resourceId -&gt; resource-id</span><br></pre></td></tr></table></figure></li>
<li><p>常见用法</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 等待10s</span></span><br><span class="line">d.xpath(<span class="string">&quot;//android.widget.TextView&quot;</span>).wait(<span class="number">10.0</span>)</span><br><span class="line"><span class="comment"># 找到并单击</span></span><br><span class="line">d.xpath(<span class="string">&quot;//*[@content-desc=&#x27;分享&#x27;]&quot;</span>).click()</span><br><span class="line"><span class="comment"># 检查是否存在</span></span><br><span class="line"><span class="keyword">if</span> d.xpath(<span class="string">&quot;//android.widget.TextView[contains(@text, &#x27;Se&#x27;)]&quot;</span>).exists:</span><br><span class="line">    print(<span class="string">&quot;exists&quot;</span>)</span><br><span class="line"><span class="comment"># 获取所有文本视图文本、属性和中心点</span></span><br><span class="line"><span class="keyword">for</span> elem <span class="keyword">in</span> d.xpath(<span class="string">&quot;//android.widget.TextView&quot;</span>).<span class="built_in">all</span>():</span><br><span class="line">    print(<span class="string">&quot;Text:&quot;</span>, elem.text)</span><br><span class="line"><span class="comment">#获取视图文本</span></span><br><span class="line"><span class="keyword">for</span> elem <span class="keyword">in</span> d.xpath(<span class="string">&quot;//android.widget.TextView&quot;</span>).<span class="built_in">all</span>():</span><br><span class="line">    print(<span class="string">&quot;Attrib:&quot;</span>, elem.attrib)</span><br><span class="line"><span class="comment">#获取属性和中心点</span></span><br><span class="line"><span class="comment">#返回: (100, 200)</span></span><br><span class="line"><span class="keyword">for</span> elem <span class="keyword">in</span> d.xpath(<span class="string">&quot;//android.widget.TextView&quot;</span>).<span class="built_in">all</span>():</span><br><span class="line">    print(<span class="string">&quot;Position:&quot;</span>, elem.center())</span><br></pre></td></tr></table></figure></li>
<li><p>其他XPath常见用法</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 所有元素</span></span><br><span class="line">//*</span><br><span class="line"></span><br><span class="line"><span class="comment"># resource-id包含login字符</span></span><br><span class="line">//*[contains(@resource-<span class="built_in">id</span>, <span class="string">&#x27;login&#x27;</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按钮包含账号或帐号</span></span><br><span class="line">//android.widget.Button[contains(@text, <span class="string">&#x27;账号&#x27;</span>) <span class="keyword">or</span> contains(@text, <span class="string">&#x27;帐号&#x27;</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 所有ImageView中的第二个</span></span><br><span class="line">(//android.widget.ImageView)[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 所有ImageView中的最后一个</span></span><br><span class="line">(//android.widget.ImageView)[last()]</span><br><span class="line"></span><br><span class="line"><span class="comment"># className包含ImageView</span></span><br><span class="line">//*[contains(name(), <span class="string">&quot;ImageView&quot;</span>)]</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>UI</category>
      </categories>
      <tags>
        <tag>UI</tag>
      </tags>
  </entry>
  <entry>
    <title>python+requests接口自动化测试</title>
    <url>/2019/05/23/python-requests%E6%8E%A5%E5%8F%A3%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h1 id="思路和框架"><a href="#思路和框架" class="headerlink" title="思路和框架"></a>思路和框架</h1><p>正常的接口测试流程<br>确定测试接口的工具 —&gt; 配置需要的接口参数 —&gt; 进行测试 —&gt; 检查测试结果（有的需要数据库辅助） —&gt; 生成测试报告（html报告）<br>根据这样的过程来一步步搭建我们的框架。在这个过程中，我们需要做到业务和数据的分离，这样才能灵活，达到我们写框架的目的。<br>接下来，我们来进行结构的划分。</p>
<blockquote>
<p><img src="/.kim//15564505722125.jpg" alt="-w296"></p>
</blockquote>
<ul>
<li>common：存放一些共通的方法</li>
<li>result：执行过程中生成的文件夹，里面存放每次测试的结果</li>
<li>testCase：用于存放具体的测试case</li>
<li>gitignore：Git忽略提交规则（不是必要）</li>
<li>testFile：存放测试过程中用到的文件，包括上传的文件，测试用例以及数据库的sql语句</li>
<li>caselist：txt文件，配置每次执行的case名称</li>
<li>config：配置一些常量，例如数据库的相关信息，接口的相关信息等</li>
<li>readConfig： 用于读取config配置文件中的内容</li>
<li> runAll：用于执行case</li>
<li> token.txt：本地换持有token</li>
</ul>
<h1 id="config"><a href="#config" class="headerlink" title="config"></a>config</h1><p>配置一些常量，例如数据库的相关信息，接口的相关信息等<br>config.ini内容如下</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[EMAIL]</span></span><br><span class="line"><span class="attr">mail_host</span> = smtp.qq.com</span><br><span class="line"><span class="attr">mail_user</span> = xxx@qq.com</span><br><span class="line"><span class="attr">mail_pass</span> = xxx</span><br><span class="line"><span class="attr">mail_port</span> = <span class="number">465</span></span><br><span class="line"><span class="attr">mail_replyto</span> = xxx@ruguoapp.com</span><br><span class="line"><span class="attr">sender</span> = xxx@qq.com</span><br><span class="line"><span class="attr">receiver</span> = xxx@qq.com</span><br><span class="line"><span class="attr">subject</span> = <span class="string">&quot;测试报告&quot;</span></span><br><span class="line"><span class="attr">content</span> = <span class="string">&quot;今天测试一下python是否可以发送邮件成功。&quot;</span></span><br><span class="line"><span class="attr">user</span> = xx</span><br><span class="line"><span class="attr">on_off</span> = <span class="literal">on</span></span><br><span class="line"></span><br><span class="line"><span class="section">[HTTP]</span></span><br><span class="line"><span class="attr">scheme</span> =https</span><br><span class="line"><span class="attr">base_url</span> =xxx</span><br><span class="line"><span class="attr">timeout</span> = <span class="number">10.0</span></span><br><span class="line"></span><br><span class="line"><span class="section">[DATABASE]</span></span><br><span class="line"><span class="attr">host</span> = localhost</span><br><span class="line"><span class="attr">username</span> = root</span><br><span class="line"><span class="attr">password</span> = root</span><br><span class="line"><span class="attr">port</span> = <span class="number">3306</span></span><br><span class="line"><span class="attr">database</span> = test</span><br></pre></td></tr></table></figure>

<h1 id="readConfig-py"><a href="#readConfig-py" class="headerlink" title="readConfig.py"></a>readConfig.py</h1><p>用来读取config配置文件中的内容，定义的方法，根据名称取对应的值<br>内容如下</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">import <span class="built_in">os</span></span><br><span class="line">import codecs</span><br><span class="line">import configparser</span><br><span class="line"></span><br><span class="line">ProDir = <span class="built_in">os</span>.<span class="built_in">path</span>.split(<span class="built_in">os</span>.<span class="built_in">path</span>.realpath(__file__))[<span class="number">0</span>]  # 该文件的绝对路径</span><br><span class="line">configPath = <span class="built_in">os</span>.<span class="built_in">path</span>.join(ProDir, <span class="string">&quot;config.ini&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class ReadConfig:</span><br><span class="line">    def __init__(<span class="built_in">self</span>):</span><br><span class="line">        fd = <span class="built_in">open</span>(configPath)</span><br><span class="line">        data = fd.<span class="built_in">read</span>()</span><br><span class="line"></span><br><span class="line">        #  <span class="built_in">remove</span> BOM</span><br><span class="line">        <span class="keyword">if</span> data[:<span class="number">3</span>] == codecs.BOM_UTF8:</span><br><span class="line">            data = data[<span class="number">3</span>:]</span><br><span class="line">            file = codecs.<span class="built_in">open</span>(configPath, <span class="string">&quot;w&quot;</span>)</span><br><span class="line">            file.<span class="built_in">write</span>(data)</span><br><span class="line">            file.<span class="built_in">close</span>()</span><br><span class="line">        fd.<span class="built_in">close</span>()</span><br><span class="line"></span><br><span class="line">        <span class="built_in">self</span>.cf = configparser.ConfigParser()</span><br><span class="line">        <span class="built_in">self</span>.cf.<span class="built_in">read</span>(configPath)</span><br><span class="line"></span><br><span class="line">    def get_email(<span class="built_in">self</span>, name):</span><br><span class="line">        value = <span class="built_in">self</span>.cf.get(<span class="string">&quot;EMAIL&quot;</span>, name)</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line">    def get_http(<span class="built_in">self</span>, name):</span><br><span class="line">        value = <span class="built_in">self</span>.cf.get(<span class="string">&quot;HTTP&quot;</span>, name)</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line">        </span><br><span class="line">    def get_db(<span class="built_in">self</span>, name):</span><br><span class="line">            value = <span class="built_in">self</span>.cf.get(<span class="string">&quot;DATABASE&quot;</span>, name)</span><br><span class="line">            <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:  # 测试一下，我们读取配置文件的方法是否可用</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;HTTP中的base_url值为：&#x27;</span>, ReadConfig().get_http(<span class="string">&#x27;base_url&#x27;</span>))</span><br></pre></td></tr></table></figure>

<h1 id="common"><a href="#common" class="headerlink" title="common"></a>common</h1><p>存放一些共通的方法<br><img src="/.kim//15564518770914.jpg" alt="-w235"><br>conmmontest：操作本地case<br>configEmail：发送邮件<br>configHttp：配置接口文件<br>getHeades：获取请求头<br>HTMLTestRunner：测试报告<br>Token：token<br>Log：输出的日志的所有操作，主要是对输出格式的规定，输出等级的定义以及其他一些输出的定义等等<br>url：接口列表</p>
<h2 id="Log"><a href="#Log" class="headerlink" title="Log"></a>Log</h2><p>对于这个log文件呢，我给它单独启用了一个线程，这样在整个运行过程中，我们在写log的时候也会比较方便，看名字大家也知道了，这里就是我们对输出的日志的所有操作了，主要是对输出格式的规定，输出等级的定义以及其他一些输出的定义等等。总之，你想对log做的任何事情，都可以放到这里来。</p>
<figure class="highlight pf"><table><tr><td class="code"><pre><span class="line">import <span class="keyword">os</span></span><br><span class="line">import logging</span><br><span class="line">import threading</span><br><span class="line"></span><br><span class="line">localReadConfig = readConfig.ReadConfig()</span><br><span class="line"></span><br><span class="line">class Log:</span><br><span class="line">    logging.<span class="keyword">basic</span>Config()</span><br><span class="line"></span><br><span class="line">    def __init__(<span class="literal">self</span>):</span><br><span class="line">        <span class="keyword">global</span> <span class="keyword">log</span>Path, resultPath, path, logger_name</span><br><span class="line">        path = readConfig.ProDir</span><br><span class="line">        resultPath = <span class="keyword">os</span>.path.join(path, <span class="string">&quot;result&quot;</span>)</span><br><span class="line">        logger_name = &#x27;logs&#x27;</span><br><span class="line"></span><br><span class="line">        if not <span class="keyword">os</span>.path.exists(resultPath):  <span class="comment"># 判断该文件是否存在</span></span><br><span class="line">            <span class="keyword">os</span>.mkdir(resultPath)  <span class="comment"># 创建目录</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">log</span>Path = <span class="keyword">os</span>.path.join(resultPath, str(datetime.now().strftime(<span class="string">&quot;%Y%m%d%H%M%S&quot;</span>)))</span><br><span class="line">        if not <span class="keyword">os</span>.path.exists(<span class="keyword">log</span>Path):</span><br><span class="line">            <span class="keyword">os</span>.mkdir(<span class="keyword">log</span>Path)</span><br><span class="line"></span><br><span class="line">        <span class="literal">self</span>.logger = logging.getLogger(logger_name)  <span class="comment"># 获得一个logger对象，默认是root</span></span><br><span class="line">        <span class="literal">self</span>.logger.<span class="built_in">set</span>Level(logging.INFO)  <span class="comment"># 设定INFO级别，所有等级大于等于INFO的信息都会输出</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 定义handler</span></span><br><span class="line">        handler = logging.FileHandler(<span class="keyword">os</span>.path.join(<span class="keyword">log</span>Path, <span class="string">&quot;output.log&quot;</span>))  <span class="comment"># 向文件output.log输出日志信息</span></span><br><span class="line">        <span class="comment"># 定义格式</span></span><br><span class="line">        formatter = logging.Formatter(</span><br><span class="line">            &#x27;[%(asctime)s]  <span class="variable">&lt;%(levelname)s&gt;</span>  %(message)s&#x27;)  <span class="comment"># 定义日志输出格式(&#x27;%(asctime)s] %(levelname)s [%(funcName)s: %(filename)s, %(lineno)d] %(message)s&#x27;)</span></span><br><span class="line">        handler.<span class="built_in">set</span>Formatter(formatter)  <span class="comment"># 选择一个格式</span></span><br><span class="line"></span><br><span class="line">        <span class="literal">self</span>.logger.addHandler(handler)  <span class="comment"># 增加指定的handler</span></span><br></pre></td></tr></table></figure>

<p>现在，我们创建了上面的Log类，在__init__初始化方法中，我们进行了log的相关初始化操作。具体的操作内容，注释已经写得很清楚了，这样，log的基本格式已经定义完成了，至于其他的方法，就靠大家自己发挥了，毕竟每个人的需求也不同，我们就只写普遍的共用方法啦。接下来，就是把它放进一个线程内了，请看下面的代码：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> MyLog:</span><br><span class="line">    log = None</span><br><span class="line">    mutex = threading.<span class="constructor">Lock()</span>  # 多线程</span><br><span class="line"></span><br><span class="line">    def <span class="constructor">__init__(<span class="params">self</span>)</span>:</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    @staticmethod</span><br><span class="line">    def get<span class="constructor">_log()</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="module-access"><span class="module"><span class="identifier">MyLog</span>.</span></span>log is None:</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">MyLog</span>.</span></span>mutex.acquire<span class="literal">()</span>  # 获取互斥锁后，进程只能在释放锁后下个进程才能进来</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">MyLog</span>.</span></span>log = <span class="constructor">Log()</span></span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">MyLog</span>.</span></span>mutex.release<span class="literal">()</span>  # 互斥锁必须被释放掉</span><br><span class="line"></span><br><span class="line">        return <span class="module-access"><span class="module"><span class="identifier">MyLog</span>.</span></span>log</span><br></pre></td></tr></table></figure>

<h2 id="configHttp-py"><a href="#configHttp-py" class="headerlink" title="configHttp.py"></a>configHttp.py</h2><p>配置接口文件，主要内容如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> readConfig <span class="keyword">as</span> readConfig</span><br><span class="line"><span class="keyword">from</span> common <span class="keyword">import</span> getHeaders</span><br><span class="line"><span class="keyword">from</span> common.Log <span class="keyword">import</span> MyLog <span class="keyword">as</span> Log</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">localReadConfig = readConfig.ReadConfig()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConfigHttp</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">global</span> scheme, host, timeout</span><br><span class="line">        scheme = localReadConfig.get_http(<span class="string">&quot;scheme&quot;</span>)</span><br><span class="line">        host = localReadConfig.get_http(<span class="string">&quot;base_url&quot;</span>)</span><br><span class="line">        timeout = localReadConfig.get_http(<span class="string">&quot;timeout&quot;</span>)</span><br><span class="line">        self.log = Log.get_log()</span><br><span class="line">        self.logger = self.log.get_logger()</span><br><span class="line">        self.params = &#123;&#125;</span><br><span class="line">        self.headers = <span class="literal">None</span></span><br><span class="line">        self.data = &#123;&#125;</span><br><span class="line">        self.url = <span class="literal">None</span></span><br><span class="line">        self.files = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_url</span>(<span class="params">self, url</span>):</span></span><br><span class="line">        self.url = scheme +<span class="string">&#x27;://&#x27;</span>+host+url</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_headers</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        set headers</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.headers = getHeaders.get_headers()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_local_headers</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        set local headers</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.headers = getHeaders.local_headers()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_params</span>(<span class="params">self, param</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        set params</span></span><br><span class="line"><span class="string">        :param param:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.params = param</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_data</span>(<span class="params">self, data</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        set data</span></span><br><span class="line"><span class="string">        :param data:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.data = data</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        defined get method</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            response = requests.get(self.url, headers=self.headers, params=self.params, data=self.data)</span><br><span class="line">            <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">                <span class="keyword">return</span> response</span><br><span class="line">            <span class="keyword">elif</span> response.status_code == <span class="number">401</span>:</span><br><span class="line">                getHeaders.refresh_tokens()</span><br><span class="line">                response = requests.get(self.url, headers=self.headers, params=self.params, data=self.data)</span><br><span class="line">                <span class="keyword">return</span> response</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> response</span><br><span class="line">        <span class="keyword">except</span> TimeoutError:</span><br><span class="line">            self.logger.error(<span class="string">&quot;Time out!&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        defined post method</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            response = requests.post(self.url, headers=self.headers, params=self.params, data=self.data)</span><br><span class="line">            <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">                <span class="keyword">return</span> response</span><br><span class="line">            <span class="keyword">elif</span> response.status_code == <span class="number">401</span>:</span><br><span class="line">                getHeaders.refresh_tokens()</span><br><span class="line">                response = requests.post(self.url, headers=self.headers, params=self.params, data=self.data)</span><br><span class="line">                <span class="keyword">return</span> response</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> response</span><br><span class="line">        <span class="keyword">except</span> TimeoutError:</span><br><span class="line">            self.logger.error(<span class="string">&quot;Time out!&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post_with_file</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        defined post method</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            response = requests.post(self.url, headers=self.headers, data=self.data, files=self.files, timeout=<span class="built_in">float</span>(timeout))</span><br><span class="line">            <span class="keyword">return</span> response</span><br><span class="line">        <span class="keyword">except</span> TimeoutError:</span><br><span class="line">            self.logger.error(<span class="string">&quot;Time out!&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post_with_json</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        defined post method</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            response = requests.post(self.url, headers=self.headers, json=self.data, timeout=<span class="built_in">float</span>(timeout))</span><br><span class="line">            <span class="keyword">return</span> response</span><br><span class="line">        <span class="keyword">except</span> TimeoutError:</span><br><span class="line">            self.logger.error(<span class="string">&quot;Time out!&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>用python自带的requests来进行接口测试，，拿get和post两个方法来说吧。（平时用的最多的就是这两个方法了，其他方法，大家可以仿照着自行扩展）</p>
<ul>
<li>get方法<pre><code>  接口测试中见到最多的就是get方法和post方法，其中，getget方法在传递参数后，url的格式是这样的：http://接口地址?key1=value1&amp;key2=value2，
</code></pre>
</li>
</ul>
<p>对于requests提供的get方法，有几个常用的参数：<br>url：显而易见，就是接口的地址url啦<br>headers：定制请求头（headers），例如：content-type = application/x-www-form-urlencoded<br>params：用于传递测试接口所要用的参数，这里我们用python中的字典形式（key：value）进行参数的传递。<br>timeout：设置接口连接的最大时间（超过该时间会抛出超时错误）</p>
<p>举个栗子：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="attribute">url</span>=‘http://api.shein.com/v2/member/logout’</span><br><span class="line">header=&#123;‘content-type’： application/x-www-form-urlencoded&#125;</span><br><span class="line">param=&#123;‘user_id’： 123456,‘email’： 123456@163.com&#125;</span><br><span class="line"><span class="attribute">timeout</span>=0.5</span><br><span class="line">requests.get（url, <span class="attribute">headers</span>=header, <span class="attribute">params</span>=param, <span class="attribute">timeout</span>=timeout）</span><br></pre></td></tr></table></figure>

<ul>
<li>post方法<br>与get方法类似，只要设置好对应的参数，post方法中的参数，我们不在使用params进行传递，而是改用data进行传递了。</li>
</ul>
<p>常用的返回值的操作。<br>text：获取接口返回值的文本格式<br>json()：获取接口返回值的json()格式<br>status_code：返回状态码（成功为：200）<br>headers：返回完整的请求头信息（headers[‘name’]：返回指定的headers内容）<br>encoding：返回字符编码格式<br>url：返回接口的完整url地址</p>
<p>举个栗子：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="attribute">url</span>=‘http://api.shein.com/v2/member/login’</span><br><span class="line">header=&#123;‘content-type’： application/x-www-form-urlencoded&#125;</span><br><span class="line">data=&#123;‘email’： 123456@163.com,‘password’： 123456&#125;</span><br><span class="line"><span class="attribute">timeout</span>=0.5</span><br><span class="line">requests.post（url, <span class="attribute">headers</span>=header, <span class="attribute">data</span>=data, <span class="attribute">timeout</span>=timeout）</span><br></pre></td></tr></table></figure>
<p>以上这些，就是常用的方法啦，大家可自行取之。</p>
<p>关于失败请求抛出异常，我们可以使用“raise_for_status()”来完成，那么，当我们的请求发生错误时，就会抛出异常。在这里提醒下各位朋友，如果你的接口，在地址不正确的时候，会有相应的错误提示（有时也需要进行测试），这时，千万不能使用这个方法来抛出错误，因为python自己在链接接口时就已经把错误抛出，那么，后面你将无法测试期望的内容。而且程序会直接在这里当掉，以错误来计。</p>
<h2 id="common-py"><a href="#common-py" class="headerlink" title="common.py"></a>common.py</h2><p>内容如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> readConfig</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> xlrd <span class="keyword">import</span> open_workbook</span><br><span class="line"><span class="keyword">from</span> common <span class="keyword">import</span> configHttp</span><br><span class="line"><span class="keyword">from</span> common.Log <span class="keyword">import</span> MyLog <span class="keyword">as</span> Log</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">localReadConfig = readConfig.ReadConfig()</span><br><span class="line">testFilePath = os.path.join(readConfig.ProDir,<span class="string">&#x27;testFile&#x27;</span>)</span><br><span class="line">localConfigHttp = configHttp.ConfigHttp()</span><br><span class="line">log = Log.get_log()</span><br><span class="line">logger = log.get_logger()</span><br><span class="line"></span><br><span class="line">caseNo = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_value_from_return_json</span>(<span class="params">response_json, name1, name2</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    get value by key</span></span><br><span class="line"><span class="string">    :param response_json:</span></span><br><span class="line"><span class="string">    :param name1:</span></span><br><span class="line"><span class="string">    :param name2:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    group = response_json[name1]</span><br><span class="line">    value = group[name2]</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_value_dict_keys</span>(<span class="params"><span class="built_in">dict</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param dict:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">list</span> = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">dict</span>]</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_return_msg</span>(<span class="params">response</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    show msg detail</span></span><br><span class="line"><span class="string">    :param response:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    url = response.url</span><br><span class="line">    msg = response.text</span><br><span class="line">    code=<span class="built_in">str</span>(response.status_code)</span><br><span class="line">    print(<span class="string">&quot;请求地址：&quot;</span>+url)</span><br><span class="line">    print(<span class="string">&quot;请求结果：&quot;</span>+code)</span><br><span class="line">    print(<span class="string">&quot;请求返回值：&quot;</span>+<span class="string">&#x27;\n&#x27;</span>+json.dumps(json.loads(msg), ensure_ascii=<span class="literal">False</span>, sort_keys=<span class="literal">True</span>, indent=<span class="number">4</span>))</span><br><span class="line">    <span class="comment"># print(&#x27;Response HTTP Response Body:&#x27;, json.dumps(self.response.json(), indent=2, sort_keys=True, ensure_ascii=False))</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># indent: 缩进空格数，indent = 0输出为一行</span></span><br><span class="line">    <span class="comment"># sort_keys = True: 将json结果的key按ascii码排序</span></span><br><span class="line">    <span class="comment"># ensure_ascii = False: 不确保ascii码，如果返回格式为utf - 8包含中文，不转化为\u...</span></span><br><span class="line"><span class="comment"># ****************************** read testCase excel ********************************</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从excel文件中读取测试用例</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_xls_case</span>(<span class="params">xls_name, sheet_name</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    get interface data from xls file</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    cls = []</span><br><span class="line">    <span class="comment"># 获取用例文件路径</span></span><br><span class="line">    xls_path = os.path.join(testFilePath, <span class="string">&#x27;case&#x27;</span>, xls_name)</span><br><span class="line">    <span class="comment"># 打开用例Excel</span></span><br><span class="line">    file = open_workbook(xls_path)</span><br><span class="line">    <span class="comment"># 获得打开Excel的sheet</span></span><br><span class="line">    sheet = file.sheet_by_name(sheet_name)</span><br><span class="line">    <span class="comment"># 获取这个sheet内容行数</span></span><br><span class="line">    rows = sheet.nrows</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(rows):<span class="comment">#根据行数做循环</span></span><br><span class="line">        <span class="keyword">if</span> sheet.row_values(i)[<span class="number">0</span>] != <span class="string">u&#x27;case_name&#x27;</span>:<span class="comment">#如果这个Excel的这个sheet的第i行的第一列不等于case_name那么我们把这行的数据添加到cls[]</span></span><br><span class="line">            cls.append(sheet.row_values(i))</span><br><span class="line">    <span class="keyword">return</span> cls</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>上面就是common主要内容。主要利用xlrd来操作excel文件，注意啦，我们是用excel文件来管理测试用例的。</p>
<h2 id="configEmail-py"><a href="#configEmail-py" class="headerlink" title="configEmail.py"></a>configEmail.py</h2><p>发送邮件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> Header</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> email.mime.application <span class="keyword">import</span> MIMEApplication  <span class="comment">#主要类型的MIME消息对象应用</span></span><br><span class="line"><span class="keyword">from</span> email.mime.multipart <span class="keyword">import</span> MIMEMultipart</span><br><span class="line"><span class="keyword">from</span> email.mime.image <span class="keyword">import</span> MIMEImage</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> readConfig <span class="keyword">as</span> readConfig</span><br><span class="line"><span class="keyword">from</span> common.Log <span class="keyword">import</span> MyLog</span><br><span class="line"></span><br><span class="line">localReadConfig = readConfig.ReadConfig()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Email</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">global</span> host, user, password, port, sender, title,receivers</span><br><span class="line"></span><br><span class="line">        sender = localReadConfig.get_email(<span class="string">&quot;sender&quot;</span>)  <span class="comment"># 发件人</span></span><br><span class="line">        receivers = [<span class="string">&#x27;8463299@qq.com&#x27;</span>]  <span class="comment"># 收件人</span></span><br><span class="line">        <span class="comment"># receivers = [&#x27;test@163.com&#x27;,&#x27;test@vip.qq.com&#x27;]  # 接收多个邮件，可设置为你的QQ邮箱或者其他邮箱</span></span><br><span class="line">        host = localReadConfig.get_email(<span class="string">&quot;mail_host&quot;</span>)<span class="comment"># 设置服务器</span></span><br><span class="line">        port = localReadConfig.get_email(<span class="string">&quot;mail_port&quot;</span>)  <span class="comment"># 设置服务器</span></span><br><span class="line">        user = localReadConfig.get_email(<span class="string">&quot;mail_user&quot;</span>)<span class="comment"># QQ邮件登录名称</span></span><br><span class="line">        password = localReadConfig.get_email(<span class="string">&quot;mail_pass&quot;</span>)<span class="comment"># QQ邮箱的授权码</span></span><br><span class="line"></span><br><span class="line">        title = localReadConfig.get_email(<span class="string">&quot;subject&quot;</span>)<span class="comment">#邮件主题</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 定义邮件主题</span></span><br><span class="line">        date = datetime.now().strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line">        self.subject = <span class="string">&quot;接口测试报告&quot;</span> + <span class="string">&quot; &quot;</span> + date</span><br><span class="line"></span><br><span class="line">        self.log = MyLog.get_log()</span><br><span class="line">        self.logger = self.log.get_logger()</span><br><span class="line"></span><br><span class="line">        self.msg = MIMEMultipart(<span class="string">&#x27;related&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">config_header</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        defined email header include subject, sender and receiver</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.msg[<span class="string">&#x27;Subject&#x27;</span>] = Header(self.subject)  <span class="comment"># 邮件主题</span></span><br><span class="line">        self.msg[<span class="string">&#x27;From&#x27;</span>] = Header(sender)  <span class="comment"># 发件人</span></span><br><span class="line">        self.msg[<span class="string">&#x27;To&#x27;</span>] = Header(<span class="built_in">str</span>(<span class="string">&quot;;&quot;</span>.join(receivers)))  <span class="comment"># 收件人</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">config_content</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        write the content of email</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.config_file_html_img()</span><br><span class="line">        self.config_file()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">config_file_html_img</span>(<span class="params">self</span>):</span></span><br><span class="line">        file_path = os.path.join(readConfig.ProDir, <span class="string">&#x27;testFile&#x27;</span>, <span class="string">&#x27;emailStyle.html&#x27;</span>)  <span class="comment"># 文件路径</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> fp:  <span class="comment"># 读取文件内容</span></span><br><span class="line">            msg_text = MIMEText(fp.read(), <span class="string">&#x27;html&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>)  <span class="comment"># 创建Text对象，包括文本内容</span></span><br><span class="line">        self.msg.attach(msg_text)  <span class="comment"># 构建HTML格式的邮件内容</span></span><br><span class="line"></span><br><span class="line">        image2_path = os.path.join(readConfig.ProDir, <span class="string">&#x27;testFile&#x27;</span>, <span class="string">&#x27;img&#x27;</span>, <span class="string">&#x27;smile.jpg&#x27;</span>)  <span class="comment"># 图片路径</span></span><br><span class="line">        self.msg.attach(self.add_image(image2_path, <span class="string">&#x27;&lt;image2&gt;&#x27;</span>))  <span class="comment"># 构建HTML格式的邮件内容</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">config_file_html</span>(<span class="params">self</span>):</span></span><br><span class="line">        report_file_path = self.log.get_report_file_path()</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(report_file_path, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:  <span class="comment"># 打开html报告</span></span><br><span class="line">            email_body = f.read()  <span class="comment"># 读取报告内容</span></span><br><span class="line">        self.msg = MIMEMultipart()  <span class="comment"># 混合MIME格式</span></span><br><span class="line">        self.msg.attach(MIMEText(email_body, <span class="string">&#x27;html&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">config_file</span>(<span class="params">self</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.check_file():</span><br><span class="line">            report_folder_path = self.log.get_result_folder_path()</span><br><span class="line">            filename = [os.path.join(report_folder_path, <span class="string">&#x27;output.log&#x27;</span>),</span><br><span class="line">                        os.path.join(report_folder_path, <span class="string">&#x27;report.html&#x27;</span>)]</span><br><span class="line">            <span class="keyword">for</span> tmp <span class="keyword">in</span> filename:</span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(tmp, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    attach_files = MIMEApplication(f.read())</span><br><span class="line">                    attach_files.add_header(<span class="string">&#x27;Content-Disposition&#x27;</span>, <span class="string">&#x27;attachment&#x27;</span>, filename=tmp)</span><br><span class="line">                    self.msg.attach(attach_files)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_image</span>(<span class="params">self,src, img_id</span>):</span></span><br><span class="line">        <span class="comment"># xml中添加图片</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(src, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            msg_image = MIMEImage(f.read())  <span class="comment"># 读取图片内容</span></span><br><span class="line">        msg_image.add_header(<span class="string">&#x27;Content-ID&#x27;</span>, img_id)  <span class="comment"># 指定文件的Content-ID,&lt;img&gt;,在HTML中图片src将用到</span></span><br><span class="line">        <span class="keyword">return</span> msg_image</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check_file</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        check test report</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        report_path = self.log.get_report_file_path()</span><br><span class="line">        <span class="keyword">if</span> os.path.isfile(report_path) <span class="keyword">and</span> <span class="keyword">not</span> os.stat(report_path) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send_email</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        send email</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">global</span> smtp</span><br><span class="line">        self.config_content()</span><br><span class="line">        self.config_header()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            smtp = smtplib.SMTP_SSL(host,port)</span><br><span class="line">            smtp.login(user, password)</span><br><span class="line">            smtp.sendmail(sender, receivers, self.msg.as_string())</span><br><span class="line">            self.logger.info(<span class="string">&quot;测试报告已通过电子邮件发送给开发人员&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> ex:</span><br><span class="line">            self.logger.error(<span class="built_in">str</span>(ex))</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;邮件发送失败&quot;</span></span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            smtp.quit()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyEmail</span>:</span></span><br><span class="line">    email = <span class="literal">None</span></span><br><span class="line">    mutex = threading.Lock()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_email</span>():</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> MyEmail.email <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            MyEmail.mutex.acquire()</span><br><span class="line">            MyEmail.email = Email()</span><br><span class="line">            MyEmail.mutex.release()</span><br><span class="line">        <span class="keyword">return</span> MyEmail.email</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    email = MyEmail.get_email()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="HTMLTestRunner-py"><a href="#HTMLTestRunner-py" class="headerlink" title="HTMLTestRunner.py"></a>HTMLTestRunner.py</h2><p>HTMLTestRunner.py这个文件从网上下载的，大神写好的，用于生成html格式的测试报告<br>生成报告如下<br><img src="/.kim//15564537871910.jpg" alt="-w1142"></p>
<h1 id="runAll-py"><a href="#runAll-py" class="headerlink" title="runAll.py"></a>runAll.py</h1><p>这是整个框架运行的入口</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> common.Log <span class="keyword">import</span> MyLog <span class="keyword">as</span> Log</span><br><span class="line"><span class="keyword">import</span> readConfig <span class="keyword">as</span> readConfig</span><br><span class="line"><span class="keyword">from</span> common <span class="keyword">import</span> HTMLTestRunner</span><br><span class="line"><span class="keyword">from</span> common.configEmail <span class="keyword">import</span> MyEmail</span><br><span class="line"></span><br><span class="line">localReadConfig = readConfig.ReadConfig()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AllTest</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">global</span> log, logger, resultPath, on_off</span><br><span class="line">        log = Log.get_log()</span><br><span class="line">        logger = log.get_logger()</span><br><span class="line">        resultPath = log.get_report_file_path()</span><br><span class="line">        on_off = localReadConfig.get_email(<span class="string">&quot;on_off&quot;</span>)</span><br><span class="line">        self.caseListFile = os.path.join(readConfig.ProDir, <span class="string">&quot;caseList.txt&quot;</span>)</span><br><span class="line">        self.caseFile = os.path.join(readConfig.ProDir, <span class="string">&quot;testCase&quot;</span>)</span><br><span class="line">        self.caseList = []</span><br><span class="line">        self.email = MyEmail.get_email()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_case_list</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        set case list</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        fb = <span class="built_in">open</span>(self.caseListFile)</span><br><span class="line">        <span class="keyword">for</span> value <span class="keyword">in</span> fb.readlines():</span><br><span class="line">            data = <span class="built_in">str</span>(value)</span><br><span class="line">            <span class="keyword">if</span> data != <span class="string">&#x27;&#x27;</span> <span class="keyword">and</span> <span class="keyword">not</span> data.startswith(<span class="string">&quot;#&quot;</span>):</span><br><span class="line">                self.caseList.append(data.replace(<span class="string">&quot;\n&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">        fb.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_case_suite</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        set case suite</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.set_case_list()</span><br><span class="line">        test_suite = unittest.TestSuite()</span><br><span class="line">        suite_module = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> case <span class="keyword">in</span> self.caseList:</span><br><span class="line">            case_name = case.split(<span class="string">&quot;/&quot;</span>)[-<span class="number">1</span>]</span><br><span class="line">            print(case_name + <span class="string">&quot;.py&quot;</span>)</span><br><span class="line">            discover = unittest.defaultTestLoader.discover(self.caseFile, pattern=case_name + <span class="string">&#x27;.py&#x27;</span>, top_level_dir=<span class="literal">None</span>)</span><br><span class="line">            suite_module.append(discover)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(suite_module) &gt; <span class="number">0</span>:</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> suite <span class="keyword">in</span> suite_module:</span><br><span class="line">                <span class="keyword">for</span> test_name <span class="keyword">in</span> suite:</span><br><span class="line">                    test_suite.addTest(test_name)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> test_suite</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        run test</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            suit = self.set_case_suite()</span><br><span class="line">            <span class="keyword">if</span> suit <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                logger.info(<span class="string">&quot;================================== 测试开始 ==================================&quot;</span>)</span><br><span class="line">                fp = <span class="built_in">open</span>(resultPath, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">                runner = HTMLTestRunner.HTMLTestRunner(stream=fp, title=<span class="string">&#x27;即刻接口测试报告&#x27;</span>, description=<span class="string">&#x27;用例执行情况&#x27;</span>)</span><br><span class="line">                runner.run(suit)</span><br><span class="line">                fp.close()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                logger.info(<span class="string">&quot;没有需要测试的案例&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> ex:</span><br><span class="line">            logger.error(<span class="built_in">str</span>(ex))</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            <span class="comment"># 通过电子邮件发送测试报告</span></span><br><span class="line">            <span class="keyword">if</span> on_off == <span class="string">&#x27;on&#x27;</span>:</span><br><span class="line">                self.email.send_email()</span><br><span class="line">            <span class="keyword">elif</span> on_off == <span class="string">&#x27;off&#x27;</span>:</span><br><span class="line">                logger.info(<span class="string">&quot;不向开发人员发送报告电子邮件&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                logger.info(<span class="string">&quot;未知状态&quot;</span>)</span><br><span class="line"></span><br><span class="line">            logger.info(<span class="string">&quot;================================== 测试结束 ==================================&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    obj = AllTest()</span><br><span class="line">    obj.run()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>上面贴出了runAll里面的主要部分，首先我们要从caselist.txt文件中读取需要执行的case名称，然后将他们添加到python自带的unittest测试集中，最后执行run()函数，执行测试集。</p>
<h1 id="result"><a href="#result" class="headerlink" title="result"></a>result</h1><p>result文件夹会在首次执行case时生成，并且以后的测试结果都会被保存在该文件夹下，同时每次测试的文件夹都是用系统时间命名，里面包含了两个文件，log文件和测试报告<br><img src="/.kim//15564540018530.jpg"></p>
<h1 id="testCase"><a href="#testCase" class="headerlink" title="testCase"></a>testCase</h1><p>testCase文件夹下，存放我们写的具体的测试case。注意，所有的case名称都要以test开头来命名，因为unittest在进行测试时会自动匹配testCase文件夹下面所有test开头的.py文件<br><img src="/.kim//15564541032850.jpg" alt="-w345"></p>
<h1 id="testFile"><a href="#testFile" class="headerlink" title="testFile"></a>testFile</h1><p>testFile文件夹下，放置我们测试时用来管理测试用例的excel文件和用于数据库查询的sql语句的xml文件。<br><img src="/.kim//15564541531336.jpg" alt="-w238"></p>
<h1 id="caselist-txt"><a href="#caselist-txt" class="headerlink" title="caselist.txt"></a>caselist.txt</h1><p>凡是没有被注释掉的，都是要被执行的case名称啦。在这里写上你要执行的case名称就可以啦。<br><img src="/.kim//15564542832135.jpg" alt="-w326"></p>
<blockquote>
<p>参考<br><a href="https://my.oschina.net/u/3041656/blog/820023?p=7">https://my.oschina.net/u/3041656/blog/820023?p=7</a><br>参考源码<br><a href="https://gitee.com/null_534_6629/interfacetest/tree/master">https://gitee.com/null_534_6629/interfacetest/tree/master</a></p>
</blockquote>
]]></content>
      <categories>
        <category>接口测试</category>
      </categories>
      <tags>
        <tag>接口测试</tag>
      </tags>
  </entry>
</search>
